
//----------------------
// <auto-generated>
//     Generated REST API Client Code Generator v1.23.0.0 on 07-05-2025 15:50:41
//     Using the tool Kiota v1.25.1
// </auto-generated>
//----------------------


using FluentFin.Plugins.Jellyseer.Auth;
using FluentFin.Plugins.Jellyseer.Auth.Jellyfin;
using FluentFin.Plugins.Jellyseer.Auth.Local;
using FluentFin.Plugins.Jellyseer.Auth.Logout;
using FluentFin.Plugins.Jellyseer.Auth.Me;
using FluentFin.Plugins.Jellyseer.Auth.Plex;
using FluentFin.Plugins.Jellyseer.Auth.ResetPassword;
using FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item;
using FluentFin.Plugins.Jellyseer.Backdrops;
using FluentFin.Plugins.Jellyseer.Blacklist;
using FluentFin.Plugins.Jellyseer.Blacklist.Item;
using FluentFin.Plugins.Jellyseer.Certifications;
using FluentFin.Plugins.Jellyseer.Certifications.Movie;
using FluentFin.Plugins.Jellyseer.Certifications.Tv;
using FluentFin.Plugins.Jellyseer.Collection;
using FluentFin.Plugins.Jellyseer.Collection.Item;
using FluentFin.Plugins.Jellyseer.Discover;
using FluentFin.Plugins.Jellyseer.Discover.Genreslider;
using FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie;
using FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv;
using FluentFin.Plugins.Jellyseer.Discover.Keyword;
using FluentFin.Plugins.Jellyseer.Discover.Keyword.Item;
using FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies;
using FluentFin.Plugins.Jellyseer.Discover.Movies;
using FluentFin.Plugins.Jellyseer.Discover.Movies.Genre;
using FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item;
using FluentFin.Plugins.Jellyseer.Discover.Movies.Language;
using FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item;
using FluentFin.Plugins.Jellyseer.Discover.Movies.Studio;
using FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item;
using FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming;
using FluentFin.Plugins.Jellyseer.Discover.Trending;
using FluentFin.Plugins.Jellyseer.Discover.Tv;
using FluentFin.Plugins.Jellyseer.Discover.Tv.Genre;
using FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item;
using FluentFin.Plugins.Jellyseer.Discover.Tv.Language;
using FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item;
using FluentFin.Plugins.Jellyseer.Discover.Tv.Network;
using FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item;
using FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming;
using FluentFin.Plugins.Jellyseer.Discover.Watchlist;
using FluentFin.Plugins.Jellyseer.Genres;
using FluentFin.Plugins.Jellyseer.Genres.Movie;
using FluentFin.Plugins.Jellyseer.Genres.Tv;
using FluentFin.Plugins.Jellyseer.Issue;
using FluentFin.Plugins.Jellyseer.Issue.Count;
using FluentFin.Plugins.Jellyseer.Issue.Item;
using FluentFin.Plugins.Jellyseer.Issue.Item.Comment;
using FluentFin.Plugins.Jellyseer.Issue.Item.Item;
using FluentFin.Plugins.Jellyseer.IssueComment;
using FluentFin.Plugins.Jellyseer.IssueComment.Item;
using FluentFin.Plugins.Jellyseer.Keyword;
using FluentFin.Plugins.Jellyseer.Keyword.Item;
using FluentFin.Plugins.Jellyseer.Languages;
using FluentFin.Plugins.Jellyseer.Media;
using FluentFin.Plugins.Jellyseer.Media.Item;
using FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace;
using FluentFin.Plugins.Jellyseer.Media.Item.Item;
using FluentFin.Plugins.Jellyseer.Media.Item.Watch_data;
using FluentFin.Plugins.Jellyseer.Models;
using FluentFin.Plugins.Jellyseer.Movie;
using FluentFin.Plugins.Jellyseer.Movie.Item;
using FluentFin.Plugins.Jellyseer.Movie.Item.Ratings;
using FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined;
using FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations;
using FluentFin.Plugins.Jellyseer.Movie.Item.Similar;
using FluentFin.Plugins.Jellyseer.Network;
using FluentFin.Plugins.Jellyseer.Network.Item;
using FluentFin.Plugins.Jellyseer.OverrideRule;
using FluentFin.Plugins.Jellyseer.OverrideRule.Item;
using FluentFin.Plugins.Jellyseer.Person;
using FluentFin.Plugins.Jellyseer.Person.Item;
using FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits;
using FluentFin.Plugins.Jellyseer.Regions;
using FluentFin.Plugins.Jellyseer.Request;
using FluentFin.Plugins.Jellyseer.Request.Count;
using FluentFin.Plugins.Jellyseer.Request.Item;
using FluentFin.Plugins.Jellyseer.Request.Item.Item;
using FluentFin.Plugins.Jellyseer.Request.Item.Retry;
using FluentFin.Plugins.Jellyseer.Search;
using FluentFin.Plugins.Jellyseer.Search.Company;
using FluentFin.Plugins.Jellyseer.Search.Keyword;
using FluentFin.Plugins.Jellyseer.Service;
using FluentFin.Plugins.Jellyseer.Service.Radarr;
using FluentFin.Plugins.Jellyseer.Service.Radarr.Item;
using FluentFin.Plugins.Jellyseer.Service.Sonarr;
using FluentFin.Plugins.Jellyseer.Service.Sonarr.Item;
using FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup;
using FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item;
using FluentFin.Plugins.Jellyseer.Settings;
using FluentFin.Plugins.Jellyseer.Settings.About;
using FluentFin.Plugins.Jellyseer.Settings.Cache;
using FluentFin.Plugins.Jellyseer.Settings.Cache.Item;
using FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush;
using FluentFin.Plugins.Jellyseer.Settings.Discover;
using FluentFin.Plugins.Jellyseer.Settings.Discover.Add;
using FluentFin.Plugins.Jellyseer.Settings.Discover.Item;
using FluentFin.Plugins.Jellyseer.Settings.Discover.Reset;
using FluentFin.Plugins.Jellyseer.Settings.Initialize;
using FluentFin.Plugins.Jellyseer.Settings.Jellyfin;
using FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library;
using FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync;
using FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users;
using FluentFin.Plugins.Jellyseer.Settings.Jobs;
using FluentFin.Plugins.Jellyseer.Settings.Jobs.Item;
using FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel;
using FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run;
using FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule;
using FluentFin.Plugins.Jellyseer.Settings.Logs;
using FluentFin.Plugins.Jellyseer.Settings.Main;
using FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate;
using FluentFin.Plugins.Jellyseer.Settings.Network;
using FluentFin.Plugins.Jellyseer.Settings.Notifications;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Email;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush;
using FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test;
using FluentFin.Plugins.Jellyseer.Settings.Plex;
using FluentFin.Plugins.Jellyseer.Settings.Plex.Devices;
using FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers;
using FluentFin.Plugins.Jellyseer.Settings.Plex.Library;
using FluentFin.Plugins.Jellyseer.Settings.Plex.Sync;
using FluentFin.Plugins.Jellyseer.Settings.Plex.Users;
using FluentFin.Plugins.Jellyseer.Settings.Public;
using FluentFin.Plugins.Jellyseer.Settings.Radarr;
using FluentFin.Plugins.Jellyseer.Settings.Radarr.Item;
using FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles;
using FluentFin.Plugins.Jellyseer.Settings.Radarr.Test;
using FluentFin.Plugins.Jellyseer.Settings.Sonarr;
using FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item;
using FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test;
using FluentFin.Plugins.Jellyseer.Settings.Tautulli;
using FluentFin.Plugins.Jellyseer.Status;
using FluentFin.Plugins.Jellyseer.Status.Appdata;
using FluentFin.Plugins.Jellyseer.Studio;
using FluentFin.Plugins.Jellyseer.Studio.Item;
using FluentFin.Plugins.Jellyseer.Tv;
using FluentFin.Plugins.Jellyseer.Tv.Item;
using FluentFin.Plugins.Jellyseer.Tv.Item.Ratings;
using FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations;
using FluentFin.Plugins.Jellyseer.Tv.Item.Season;
using FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item;
using FluentFin.Plugins.Jellyseer.Tv.Item.Similar;
using FluentFin.Plugins.Jellyseer.User;
using FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin;
using FluentFin.Plugins.Jellyseer.User.ImportFromPlex;
using FluentFin.Plugins.Jellyseer.User.Item;
using FluentFin.Plugins.Jellyseer.User.Item.PushSubscription;
using FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item;
using FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions;
using FluentFin.Plugins.Jellyseer.User.Item.Quota;
using FluentFin.Plugins.Jellyseer.User.Item.Requests;
using FluentFin.Plugins.Jellyseer.User.Item.Settings;
using FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts;
using FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin;
using FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex;
using FluentFin.Plugins.Jellyseer.User.Item.Settings.Main;
using FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications;
using FluentFin.Plugins.Jellyseer.User.Item.Settings.Password;
using FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions;
using FluentFin.Plugins.Jellyseer.User.Item.Watch_data;
using FluentFin.Plugins.Jellyseer.User.Item.Watchlist;
using FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription;
using FluentFin.Plugins.Jellyseer.Watchlist;
using FluentFin.Plugins.Jellyseer.Watchlist.Item;
using FluentFin.Plugins.Jellyseer.Watchproviders;
using FluentFin.Plugins.Jellyseer.Watchproviders.Movies;
using FluentFin.Plugins.Jellyseer.Watchproviders.Regions;
using FluentFin.Plugins.Jellyseer.Watchproviders.Tv;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Threading;
using System.Threading.Tasks;

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ApiClient : BaseRequestBuilder
    {
        /// <summary>The auth property</summary>
        public global::FluentFin.Plugins.Jellyseer.Auth.AuthRequestBuilder Auth
        {
            get => new global::FluentFin.Plugins.Jellyseer.Auth.AuthRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The backdrops property</summary>
        public global::FluentFin.Plugins.Jellyseer.Backdrops.BackdropsRequestBuilder Backdrops
        {
            get => new global::FluentFin.Plugins.Jellyseer.Backdrops.BackdropsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The blacklist property</summary>
        public global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder Blacklist
        {
            get => new global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The certifications property</summary>
        public global::FluentFin.Plugins.Jellyseer.Certifications.CertificationsRequestBuilder Certifications
        {
            get => new global::FluentFin.Plugins.Jellyseer.Certifications.CertificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The collection property</summary>
        public global::FluentFin.Plugins.Jellyseer.Collection.CollectionRequestBuilder Collection
        {
            get => new global::FluentFin.Plugins.Jellyseer.Collection.CollectionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The discover property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.DiscoverRequestBuilder Discover
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.DiscoverRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The genres property</summary>
        public global::FluentFin.Plugins.Jellyseer.Genres.GenresRequestBuilder Genres
        {
            get => new global::FluentFin.Plugins.Jellyseer.Genres.GenresRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issue property</summary>
        public global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder Issue
        {
            get => new global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The issueComment property</summary>
        public global::FluentFin.Plugins.Jellyseer.IssueComment.IssueCommentRequestBuilder IssueComment
        {
            get => new global::FluentFin.Plugins.Jellyseer.IssueComment.IssueCommentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The keyword property</summary>
        public global::FluentFin.Plugins.Jellyseer.Keyword.KeywordRequestBuilder Keyword
        {
            get => new global::FluentFin.Plugins.Jellyseer.Keyword.KeywordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The languages property</summary>
        public global::FluentFin.Plugins.Jellyseer.Languages.LanguagesRequestBuilder Languages
        {
            get => new global::FluentFin.Plugins.Jellyseer.Languages.LanguagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The media property</summary>
        public global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder Media
        {
            get => new global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The movie property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.MovieRequestBuilder Movie
        {
            get => new global::FluentFin.Plugins.Jellyseer.Movie.MovieRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The network property</summary>
        public global::FluentFin.Plugins.Jellyseer.Network.NetworkRequestBuilder Network
        {
            get => new global::FluentFin.Plugins.Jellyseer.Network.NetworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The overrideRule property</summary>
        public global::FluentFin.Plugins.Jellyseer.OverrideRule.OverrideRuleRequestBuilder OverrideRule
        {
            get => new global::FluentFin.Plugins.Jellyseer.OverrideRule.OverrideRuleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The person property</summary>
        public global::FluentFin.Plugins.Jellyseer.Person.PersonRequestBuilder Person
        {
            get => new global::FluentFin.Plugins.Jellyseer.Person.PersonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The regions property</summary>
        public global::FluentFin.Plugins.Jellyseer.Regions.RegionsRequestBuilder Regions
        {
            get => new global::FluentFin.Plugins.Jellyseer.Regions.RegionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The request property</summary>
        public global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder Request
        {
            get => new global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The search property</summary>
        public global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder Search
        {
            get => new global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The service property</summary>
        public global::FluentFin.Plugins.Jellyseer.Service.ServiceRequestBuilder Service
        {
            get => new global::FluentFin.Plugins.Jellyseer.Service.ServiceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.SettingsRequestBuilder Settings
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The status property</summary>
        public global::FluentFin.Plugins.Jellyseer.Status.StatusRequestBuilder Status
        {
            get => new global::FluentFin.Plugins.Jellyseer.Status.StatusRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The studio property</summary>
        public global::FluentFin.Plugins.Jellyseer.Studio.StudioRequestBuilder Studio
        {
            get => new global::FluentFin.Plugins.Jellyseer.Studio.StudioRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tv property</summary>
        public global::FluentFin.Plugins.Jellyseer.Tv.TvRequestBuilder Tv
        {
            get => new global::FluentFin.Plugins.Jellyseer.Tv.TvRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The user property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder User
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watchlist property</summary>
        public global::FluentFin.Plugins.Jellyseer.Watchlist.WatchlistRequestBuilder Watchlist
        {
            get => new global::FluentFin.Plugins.Jellyseer.Watchlist.WatchlistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watchproviders property</summary>
        public global::FluentFin.Plugins.Jellyseer.Watchproviders.WatchprovidersRequestBuilder Watchproviders
        {
            get => new global::FluentFin.Plugins.Jellyseer.Watchproviders.WatchprovidersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.ApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "{server}/api/v1";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth
{
    /// <summary>
    /// Builds and executes requests for operations under \auth
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AuthRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The jellyfin property</summary>
        public global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinRequestBuilder Jellyfin
        {
            get => new global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The local property</summary>
        public global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalRequestBuilder Local
        {
            get => new global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logout property</summary>
        public global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutRequestBuilder Logout
        {
            get => new global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The me property</summary>
        public global::FluentFin.Plugins.Jellyseer.Auth.Me.MeRequestBuilder Me
        {
            get => new global::FluentFin.Plugins.Jellyseer.Auth.Me.MeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The plex property</summary>
        public global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexRequestBuilder Plex
        {
            get => new global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resetPassword property</summary>
        public global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordRequestBuilder ResetPassword
        {
            get => new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.AuthRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.AuthRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AuthRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Backdrops
{
    /// <summary>
    /// Builds and executes requests for operations under \backdrops
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BackdropsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Backdrops.BackdropsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BackdropsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/backdrops", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Backdrops.BackdropsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BackdropsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/backdrops", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of backdrop image paths in a JSON array.
        /// </summary>
        /// <returns>A List&lt;string&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<string>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<string>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendPrimitiveCollectionAsync<string>(requestInfo, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of backdrop image paths in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Backdrops.BackdropsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Backdrops.BackdropsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Backdrops.BackdropsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BackdropsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Blacklist
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BlacklistGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The pageInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo? PageInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo PageInfo { get; set; }
#endif
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse"/> and sets the default values.
        /// </summary>
        public BlacklistGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "pageInfo", n => { PageInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>(global::FluentFin.Plugins.Jellyseer.Models.PageInfo.CreateFromDiscriminatorValue); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results>(global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>("pageInfo", PageInfo);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Blacklist
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BlacklistGetResponse_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The mediaType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaType { get; set; }
#nullable restore
#else
        public string MediaType { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The tmdbId property</summary>
        public double? TmdbId { get; set; }
        /// <summary>The user property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.User? User { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.User User { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results"/> and sets the default values.
        /// </summary>
        public BlacklistGetResponse_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "mediaType", n => { MediaType = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "tmdbId", n => { TmdbId = n.GetDoubleValue(); } },
                { "user", n => { User = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("mediaType", MediaType);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("tmdbId", TmdbId);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>("user", User);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Blacklist
{
    /// <summary>
    /// Builds and executes requests for operations under \blacklist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BlacklistRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.blacklist.item collection</summary>
        /// <param name="position">tmdbId ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("tmdbId", position);
                return new global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BlacklistRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/blacklist{?filter*,search*,skip*,take*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BlacklistRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/blacklist{?filter*,search*,skip*,take*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of all blacklisted media
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse?> GetAsBlacklistGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder.BlacklistRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse> GetAsBlacklistGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder.BlacklistRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of all blacklisted media
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsBlacklistGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder.BlacklistRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder.BlacklistRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add media to blacklist
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.Blacklist body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.Blacklist body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of all blacklisted media
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder.BlacklistRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder.BlacklistRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Add media to blacklist
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.Blacklist body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.Blacklist body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns list of all blacklisted media
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BlacklistRequestBuilderGetQueryParameters 
        {
            [Obsolete("This property is deprecated, use FilterAsGetFilterQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            [QueryParameter("filter")]
            public global::FluentFin.Plugins.Jellyseer.Blacklist.GetFilterQueryParameterType? FilterAsGetFilterQueryParameterType { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            [QueryParameter("take")]
            public double? Take { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BlacklistRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistRequestBuilder.BlacklistRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BlacklistRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Blacklist
{
    [Obsolete("This class is obsolete. Use BlacklistGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class BlacklistResponse : global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Blacklist.BlacklistResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Blacklist
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetFilterQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "all")]
        #pragma warning disable CS1591
        All,
        #pragma warning restore CS1591
        [EnumMember(Value = "manual")]
        #pragma warning disable CS1591
        Manual,
        #pragma warning restore CS1591
        [EnumMember(Value = "blacklistedTags")]
        #pragma warning disable CS1591
        BlacklistedTags,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Certifications
{
    /// <summary>
    /// Builds and executes requests for operations under \certifications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CertificationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The movie property</summary>
        public global::FluentFin.Plugins.Jellyseer.Certifications.Movie.MovieRequestBuilder Movie
        {
            get => new global::FluentFin.Plugins.Jellyseer.Certifications.Movie.MovieRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tv property</summary>
        public global::FluentFin.Plugins.Jellyseer.Certifications.Tv.TvRequestBuilder Tv
        {
            get => new global::FluentFin.Plugins.Jellyseer.Certifications.Tv.TvRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.CertificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CertificationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/certifications", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.CertificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CertificationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/certifications", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Collection
{
    /// <summary>
    /// Builds and executes requests for operations under \collection
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CollectionRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.collection.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("collectionId", position);
                return new global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.collection.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("collectionId", position);
                return new global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Collection.CollectionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CollectionRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/collection", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Collection.CollectionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CollectionRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/collection", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover
{
    /// <summary>
    /// Builds and executes requests for operations under \discover
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DiscoverRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The genreslider property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.GenresliderRequestBuilder Genreslider
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.GenresliderRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The keyword property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Keyword.KeywordRequestBuilder Keyword
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.KeywordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The movies property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder Movies
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The trending property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder Trending
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tv property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder Tv
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watchlist property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder Watchlist
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.DiscoverRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DiscoverRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.DiscoverRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DiscoverRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Genres
{
    /// <summary>
    /// Builds and executes requests for operations under \genres
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GenresRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The movie property</summary>
        public global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder Movie
        {
            get => new global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tv property</summary>
        public global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder Tv
        {
            get => new global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.GenresRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenresRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/genres", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.GenresRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenresRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/genres", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Issue
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetFilterQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "all")]
        #pragma warning disable CS1591
        All,
        #pragma warning restore CS1591
        [EnumMember(Value = "open")]
        #pragma warning disable CS1591
        Open,
        #pragma warning restore CS1591
        [EnumMember(Value = "resolved")]
        #pragma warning disable CS1591
        Resolved,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Issue
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetSortQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "added")]
        #pragma warning disable CS1591
        Added,
        #pragma warning restore CS1591
        [EnumMember(Value = "modified")]
        #pragma warning disable CS1591
        Modified,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IssueGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The pageInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo? PageInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo PageInfo { get; set; }
#endif
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Issue>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Issue> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse"/> and sets the default values.
        /// </summary>
        public IssueGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "pageInfo", n => { PageInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>(global::FluentFin.Plugins.Jellyseer.Models.PageInfo.CreateFromDiscriminatorValue); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Issue>(global::FluentFin.Plugins.Jellyseer.Models.Issue.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>("pageInfo", PageInfo);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Issue>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IssuePostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The issueType property</summary>
        public double? IssueType { get; set; }
        /// <summary>The mediaId property</summary>
        public double? MediaId { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody"/> and sets the default values.
        /// </summary>
        public IssuePostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "issueType", n => { IssueType = n.GetDoubleValue(); } },
                { "mediaId", n => { MediaId = n.GetDoubleValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("issueType", IssueType);
            writer.WriteDoubleValue("mediaId", MediaId);
            writer.WriteStringValue("message", Message);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue
{
    /// <summary>
    /// Builds and executes requests for operations under \issue
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IssueRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The count property</summary>
        public global::FluentFin.Plugins.Jellyseer.Issue.Count.CountRequestBuilder Count
        {
            get => new global::FluentFin.Plugins.Jellyseer.Issue.Count.CountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.issue.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("issueId", position);
                return new global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.issue.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("issueId", position);
                return new global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IssueRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue{?filter*,requestedBy*,skip*,sort*,take*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IssueRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue{?filter*,requestedBy*,skip*,sort*,take*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of issues in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse?> GetAsIssueGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder.IssueRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse> GetAsIssueGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder.IssueRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of issues in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsIssueGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder.IssueRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder.IssueRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new issue
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Issue"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue?> PostAsync(global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue> PostAsync(global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Issue>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Issue.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of issues in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder.IssueRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder.IssueRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new issue
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Issue.IssuePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of issues in JSON format.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IssueRequestBuilderGetQueryParameters 
        {
            [Obsolete("This property is deprecated, use FilterAsGetFilterQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            [QueryParameter("filter")]
            public global::FluentFin.Plugins.Jellyseer.Issue.GetFilterQueryParameterType? FilterAsGetFilterQueryParameterType { get; set; }
            [QueryParameter("requestedBy")]
            public double? RequestedBy { get; set; }
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            [Obsolete("This property is deprecated, use SortAsGetSortQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            [QueryParameter("sort")]
            public global::FluentFin.Plugins.Jellyseer.Issue.GetSortQueryParameterType? SortAsGetSortQueryParameterType { get; set; }
            [QueryParameter("take")]
            public double? Take { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IssueRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Issue.IssueRequestBuilder.IssueRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class IssueRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue
{
    [Obsolete("This class is obsolete. Use IssueGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IssueResponse : global::FluentFin.Plugins.Jellyseer.Issue.IssueGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Issue.IssueResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.IssueComment
{
    /// <summary>
    /// Builds and executes requests for operations under \issueComment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IssueCommentRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.issueComment.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("commentId", position);
                return new global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.IssueCommentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IssueCommentRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issueComment", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.IssueCommentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public IssueCommentRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issueComment", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Keyword
{
    /// <summary>
    /// Builds and executes requests for operations under \keyword
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class KeywordRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.keyword.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("keywordId", position);
                return new global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.keyword.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("keywordId", position);
                return new global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Keyword.KeywordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public KeywordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/keyword", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Keyword.KeywordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public KeywordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/keyword", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Languages
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Languages : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The english_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnglishName { get; set; }
#nullable restore
#else
        public string EnglishName { get; set; }
#endif
        /// <summary>The iso_639_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso6391 { get; set; }
#nullable restore
#else
        public string Iso6391 { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Languages.Languages"/> and sets the default values.
        /// </summary>
        public Languages()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Languages.Languages"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Languages.Languages CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Languages.Languages();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "english_name", n => { EnglishName = n.GetStringValue(); } },
                { "iso_639_1", n => { Iso6391 = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("english_name", EnglishName);
            writer.WriteStringValue("iso_639_1", Iso6391);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Languages
{
    /// <summary>
    /// Builds and executes requests for operations under \languages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LanguagesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Languages.LanguagesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LanguagesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/languages", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Languages.LanguagesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LanguagesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/languages", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of languages in a JSON object.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Languages.Languages&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Languages.Languages>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Languages.Languages>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Languages.Languages>(requestInfo, global::FluentFin.Plugins.Jellyseer.Languages.Languages.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of languages in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Languages.LanguagesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Languages.LanguagesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Languages.LanguagesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LanguagesRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Media
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetFilterQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "all")]
        #pragma warning disable CS1591
        All,
        #pragma warning restore CS1591
        [EnumMember(Value = "available")]
        #pragma warning disable CS1591
        Available,
        #pragma warning restore CS1591
        [EnumMember(Value = "partial")]
        #pragma warning disable CS1591
        Partial,
        #pragma warning restore CS1591
        [EnumMember(Value = "allavailable")]
        #pragma warning disable CS1591
        Allavailable,
        #pragma warning restore CS1591
        [EnumMember(Value = "processing")]
        #pragma warning disable CS1591
        Processing,
        #pragma warning restore CS1591
        [EnumMember(Value = "pending")]
        #pragma warning disable CS1591
        Pending,
        #pragma warning restore CS1591
        [EnumMember(Value = "deleted")]
        #pragma warning disable CS1591
        Deleted,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Media
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetSortQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "added")]
        #pragma warning disable CS1591
        Added,
        #pragma warning restore CS1591
        [EnumMember(Value = "modified")]
        #pragma warning disable CS1591
        Modified,
        #pragma warning restore CS1591
        [EnumMember(Value = "mediaAdded")]
        #pragma warning disable CS1591
        MediaAdded,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MediaGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The pageInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo? PageInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo PageInfo { get; set; }
#endif
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse"/> and sets the default values.
        /// </summary>
        public MediaGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "pageInfo", n => { PageInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>(global::FluentFin.Plugins.Jellyseer.Models.PageInfo.CreateFromDiscriminatorValue); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>("pageInfo", PageInfo);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media
{
    /// <summary>
    /// Builds and executes requests for operations under \media
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MediaRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.media.item collection</summary>
        /// <param name="position">Media ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("mediaId", position);
                return new global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MediaRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media{?filter*,skip*,sort*,take*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MediaRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media{?filter*,skip*,sort*,take*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all media (can be filtered and limited) in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse?> GetAsMediaGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder.MediaRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse> GetAsMediaGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder.MediaRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all media (can be filtered and limited) in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsMediaGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.MediaResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder.MediaRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.MediaResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder.MediaRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Media.MediaResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Media.MediaResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all media (can be filtered and limited) in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder.MediaRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder.MediaRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all media (can be filtered and limited) in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MediaRequestBuilderGetQueryParameters 
        {
            [Obsolete("This property is deprecated, use FilterAsGetFilterQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            [QueryParameter("filter")]
            public global::FluentFin.Plugins.Jellyseer.Media.GetFilterQueryParameterType? FilterAsGetFilterQueryParameterType { get; set; }
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            [Obsolete("This property is deprecated, use SortAsGetSortQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            [QueryParameter("sort")]
            public global::FluentFin.Plugins.Jellyseer.Media.GetSortQueryParameterType? SortAsGetSortQueryParameterType { get; set; }
            [QueryParameter("take")]
            public double? Take { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MediaRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Media.MediaRequestBuilder.MediaRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media
{
    [Obsolete("This class is obsolete. Use MediaGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MediaResponse : global::FluentFin.Plugins.Jellyseer.Media.MediaGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.MediaResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Media.MediaResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Media.MediaResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Blacklist : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? Media { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo Media { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The tmdbId property</summary>
        public double? TmdbId { get; set; }
        /// <summary>The userId property</summary>
        public double? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Blacklist"/> and sets the default values.
        /// </summary>
        public Blacklist()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Blacklist"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Blacklist CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Blacklist();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "media", n => { Media = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "tmdbId", n => { TmdbId = n.GetDoubleValue(); } },
                { "userId", n => { UserId = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("media", Media);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("tmdbId", TmdbId);
            writer.WriteDoubleValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Cast : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The castId property</summary>
        public double? CastId { get; set; }
        /// <summary>The character property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Character { get; set; }
#nullable restore
#else
        public string Character { get; set; }
#endif
        /// <summary>The creditId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreditId { get; set; }
#nullable restore
#else
        public string CreditId { get; set; }
#endif
        /// <summary>The gender property</summary>
        public double? Gender { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The order property</summary>
        public double? Order { get; set; }
        /// <summary>The profilePath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePath { get; set; }
#nullable restore
#else
        public string ProfilePath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Cast"/> and sets the default values.
        /// </summary>
        public Cast()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Cast"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Cast CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Cast();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "castId", n => { CastId = n.GetDoubleValue(); } },
                { "character", n => { Character = n.GetStringValue(); } },
                { "creditId", n => { CreditId = n.GetStringValue(); } },
                { "gender", n => { Gender = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "order", n => { Order = n.GetDoubleValue(); } },
                { "profilePath", n => { ProfilePath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("castId", CastId);
            writer.WriteStringValue("character", Character);
            writer.WriteStringValue("creditId", CreditId);
            writer.WriteDoubleValue("gender", Gender);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("order", Order);
            writer.WriteStringValue("profilePath", ProfilePath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CertificationResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The certifications property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications? Certifications { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications Certifications { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse"/> and sets the default values.
        /// </summary>
        public CertificationResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "certifications", n => { Certifications = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications>(global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications>("certifications", Certifications);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CertificationResponse_certifications : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications"/> and sets the default values.
        /// </summary>
        public CertificationResponse_certifications()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse_certifications();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Collection : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The parts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Parts { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Parts { get; set; }
#endif
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Collection"/> and sets the default values.
        /// </summary>
        public Collection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Collection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Collection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Collection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "parts", n => { Parts = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("overview", Overview);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("parts", Parts);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Company : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The logo_path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoPath { get; set; }
#nullable restore
#else
        public string LogoPath { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Company"/> and sets the default values.
        /// </summary>
        public Company()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Company"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Company CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Company();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "logo_path", n => { LogoPath = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("logo_path", LogoPath);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CreditCast : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adult property</summary>
        public bool? Adult { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The character property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Character { get; set; }
#nullable restore
#else
        public string Character { get; set; }
#endif
        /// <summary>The creditId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreditId { get; set; }
#nullable restore
#else
        public string CreditId { get; set; }
#endif
        /// <summary>The episodeCount property</summary>
        public double? EpisodeCount { get; set; }
        /// <summary>The firstAirDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstAirDate { get; set; }
#nullable restore
#else
        public string FirstAirDate { get; set; }
#endif
        /// <summary>The genreIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? GenreIds { get; set; }
#nullable restore
#else
        public List<double?> GenreIds { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The mediaInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? MediaInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo MediaInfo { get; set; }
#endif
        /// <summary>The mediaType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaType { get; set; }
#nullable restore
#else
        public string MediaType { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The originalLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The originalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalName { get; set; }
#nullable restore
#else
        public string OriginalName { get; set; }
#endif
        /// <summary>The originalTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalTitle { get; set; }
#nullable restore
#else
        public string OriginalTitle { get; set; }
#endif
        /// <summary>The originCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OriginCountry { get; set; }
#nullable restore
#else
        public List<string> OriginCountry { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public double? Popularity { get; set; }
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The releaseDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The video property</summary>
        public bool? Video { get; set; }
        /// <summary>The voteAverage property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The voteCount property</summary>
        public double? VoteCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.CreditCast"/> and sets the default values.
        /// </summary>
        public CreditCast()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.CreditCast"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.CreditCast CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.CreditCast();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adult", n => { Adult = n.GetBoolValue(); } },
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "character", n => { Character = n.GetStringValue(); } },
                { "creditId", n => { CreditId = n.GetStringValue(); } },
                { "episodeCount", n => { EpisodeCount = n.GetDoubleValue(); } },
                { "firstAirDate", n => { FirstAirDate = n.GetStringValue(); } },
                { "genreIds", n => { GenreIds = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "mediaInfo", n => { MediaInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "mediaType", n => { MediaType = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originCountry", n => { OriginCountry = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "originalLanguage", n => { OriginalLanguage = n.GetStringValue(); } },
                { "originalName", n => { OriginalName = n.GetStringValue(); } },
                { "originalTitle", n => { OriginalTitle = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetDoubleValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
                { "releaseDate", n => { ReleaseDate = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "video", n => { Video = n.GetBoolValue(); } },
                { "voteAverage", n => { VoteAverage = n.GetDoubleValue(); } },
                { "voteCount", n => { VoteCount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("adult", Adult);
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteStringValue("character", Character);
            writer.WriteStringValue("creditId", CreditId);
            writer.WriteDoubleValue("episodeCount", EpisodeCount);
            writer.WriteStringValue("firstAirDate", FirstAirDate);
            writer.WriteCollectionOfPrimitiveValues<double?>("genreIds", GenreIds);
            writer.WriteDoubleValue("id", Id);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("mediaInfo", MediaInfo);
            writer.WriteStringValue("mediaType", MediaType);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("originalLanguage", OriginalLanguage);
            writer.WriteStringValue("originalName", OriginalName);
            writer.WriteStringValue("originalTitle", OriginalTitle);
            writer.WriteCollectionOfPrimitiveValues<string>("originCountry", OriginCountry);
            writer.WriteStringValue("overview", Overview);
            writer.WriteDoubleValue("popularity", Popularity);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteStringValue("releaseDate", ReleaseDate);
            writer.WriteStringValue("title", Title);
            writer.WriteBoolValue("video", Video);
            writer.WriteDoubleValue("voteAverage", VoteAverage);
            writer.WriteDoubleValue("voteCount", VoteCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CreditCrew : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adult property</summary>
        public bool? Adult { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The creditId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreditId { get; set; }
#nullable restore
#else
        public string CreditId { get; set; }
#endif
        /// <summary>The department property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Department { get; set; }
#nullable restore
#else
        public string Department { get; set; }
#endif
        /// <summary>The episodeCount property</summary>
        public double? EpisodeCount { get; set; }
        /// <summary>The firstAirDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstAirDate { get; set; }
#nullable restore
#else
        public string FirstAirDate { get; set; }
#endif
        /// <summary>The genreIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? GenreIds { get; set; }
#nullable restore
#else
        public List<double?> GenreIds { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The job property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Job { get; set; }
#nullable restore
#else
        public string Job { get; set; }
#endif
        /// <summary>The mediaInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? MediaInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo MediaInfo { get; set; }
#endif
        /// <summary>The mediaType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaType { get; set; }
#nullable restore
#else
        public string MediaType { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The originalLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The originalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalName { get; set; }
#nullable restore
#else
        public string OriginalName { get; set; }
#endif
        /// <summary>The originalTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalTitle { get; set; }
#nullable restore
#else
        public string OriginalTitle { get; set; }
#endif
        /// <summary>The originCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OriginCountry { get; set; }
#nullable restore
#else
        public List<string> OriginCountry { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public double? Popularity { get; set; }
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The releaseDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The video property</summary>
        public bool? Video { get; set; }
        /// <summary>The voteAverage property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The voteCount property</summary>
        public double? VoteCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.CreditCrew"/> and sets the default values.
        /// </summary>
        public CreditCrew()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.CreditCrew"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.CreditCrew CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.CreditCrew();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adult", n => { Adult = n.GetBoolValue(); } },
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "creditId", n => { CreditId = n.GetStringValue(); } },
                { "department", n => { Department = n.GetStringValue(); } },
                { "episodeCount", n => { EpisodeCount = n.GetDoubleValue(); } },
                { "firstAirDate", n => { FirstAirDate = n.GetStringValue(); } },
                { "genreIds", n => { GenreIds = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "job", n => { Job = n.GetStringValue(); } },
                { "mediaInfo", n => { MediaInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "mediaType", n => { MediaType = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originCountry", n => { OriginCountry = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "originalLanguage", n => { OriginalLanguage = n.GetStringValue(); } },
                { "originalName", n => { OriginalName = n.GetStringValue(); } },
                { "originalTitle", n => { OriginalTitle = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetDoubleValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
                { "releaseDate", n => { ReleaseDate = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "video", n => { Video = n.GetBoolValue(); } },
                { "voteAverage", n => { VoteAverage = n.GetDoubleValue(); } },
                { "voteCount", n => { VoteCount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("adult", Adult);
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteStringValue("creditId", CreditId);
            writer.WriteStringValue("department", Department);
            writer.WriteDoubleValue("episodeCount", EpisodeCount);
            writer.WriteStringValue("firstAirDate", FirstAirDate);
            writer.WriteCollectionOfPrimitiveValues<double?>("genreIds", GenreIds);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("job", Job);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("mediaInfo", MediaInfo);
            writer.WriteStringValue("mediaType", MediaType);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("originalLanguage", OriginalLanguage);
            writer.WriteStringValue("originalName", OriginalName);
            writer.WriteStringValue("originalTitle", OriginalTitle);
            writer.WriteCollectionOfPrimitiveValues<string>("originCountry", OriginCountry);
            writer.WriteStringValue("overview", Overview);
            writer.WriteDoubleValue("popularity", Popularity);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteStringValue("releaseDate", ReleaseDate);
            writer.WriteStringValue("title", Title);
            writer.WriteBoolValue("video", Video);
            writer.WriteDoubleValue("voteAverage", VoteAverage);
            writer.WriteDoubleValue("voteCount", VoteCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Crew : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The creditId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreditId { get; set; }
#nullable restore
#else
        public string CreditId { get; set; }
#endif
        /// <summary>The department property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Department { get; set; }
#nullable restore
#else
        public string Department { get; set; }
#endif
        /// <summary>The gender property</summary>
        public double? Gender { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The job property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Job { get; set; }
#nullable restore
#else
        public string Job { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The profilePath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePath { get; set; }
#nullable restore
#else
        public string ProfilePath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Crew"/> and sets the default values.
        /// </summary>
        public Crew()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Crew"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Crew CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Crew();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "creditId", n => { CreditId = n.GetStringValue(); } },
                { "department", n => { Department = n.GetStringValue(); } },
                { "gender", n => { Gender = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "job", n => { Job = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "profilePath", n => { ProfilePath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("creditId", CreditId);
            writer.WriteStringValue("department", Department);
            writer.WriteDoubleValue("gender", Gender);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("job", Job);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("profilePath", ProfilePath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DiscordSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings"/> and sets the default values.
        /// </summary>
        public DiscordSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DiscordSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The botAvatarUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BotAvatarUrl { get; set; }
#nullable restore
#else
        public string BotAvatarUrl { get; set; }
#endif
        /// <summary>The botUsername property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BotUsername { get; set; }
#nullable restore
#else
        public string BotUsername { get; set; }
#endif
        /// <summary>The enableMentions property</summary>
        public bool? EnableMentions { get; set; }
        /// <summary>The webhookRoleId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookRoleId { get; set; }
#nullable restore
#else
        public string WebhookRoleId { get; set; }
#endif
        /// <summary>The webhookUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookUrl { get; set; }
#nullable restore
#else
        public string WebhookUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options"/> and sets the default values.
        /// </summary>
        public DiscordSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "botAvatarUrl", n => { BotAvatarUrl = n.GetStringValue(); } },
                { "botUsername", n => { BotUsername = n.GetStringValue(); } },
                { "enableMentions", n => { EnableMentions = n.GetBoolValue(); } },
                { "webhookRoleId", n => { WebhookRoleId = n.GetStringValue(); } },
                { "webhookUrl", n => { WebhookUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("botAvatarUrl", BotAvatarUrl);
            writer.WriteStringValue("botUsername", BotUsername);
            writer.WriteBoolValue("enableMentions", EnableMentions);
            writer.WriteStringValue("webhookRoleId", WebhookRoleId);
            writer.WriteStringValue("webhookUrl", WebhookUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DiscoverSlider : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Data { get; set; }
#nullable restore
#else
        public string Data { get; set; }
#endif
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The isBuiltIn property</summary>
        public bool? IsBuiltIn { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The type property</summary>
        public double? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider"/> and sets the default values.
        /// </summary>
        public DiscoverSlider()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "data", n => { Data = n.GetStringValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "isBuiltIn", n => { IsBuiltIn = n.GetBoolValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "type", n => { Type = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("data", Data);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteDoubleValue("id", Id);
            writer.WriteBoolValue("isBuiltIn", IsBuiltIn);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Episode : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The airDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AirDate { get; set; }
#nullable restore
#else
        public string AirDate { get; set; }
#endif
        /// <summary>The episodeNumber property</summary>
        public double? EpisodeNumber { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The productionCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductionCode { get; set; }
#nullable restore
#else
        public string ProductionCode { get; set; }
#endif
        /// <summary>The seasonNumber property</summary>
        public double? SeasonNumber { get; set; }
        /// <summary>The showId property</summary>
        public double? ShowId { get; set; }
        /// <summary>The stillPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StillPath { get; set; }
#nullable restore
#else
        public string StillPath { get; set; }
#endif
        /// <summary>The voteAverage property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The voteCount property</summary>
        public double? VoteCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Episode"/> and sets the default values.
        /// </summary>
        public Episode()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Episode"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Episode CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Episode();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "airDate", n => { AirDate = n.GetStringValue(); } },
                { "episodeNumber", n => { EpisodeNumber = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "productionCode", n => { ProductionCode = n.GetStringValue(); } },
                { "seasonNumber", n => { SeasonNumber = n.GetDoubleValue(); } },
                { "showId", n => { ShowId = n.GetDoubleValue(); } },
                { "stillPath", n => { StillPath = n.GetStringValue(); } },
                { "voteAverage", n => { VoteAverage = n.GetDoubleValue(); } },
                { "voteCount", n => { VoteCount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("airDate", AirDate);
            writer.WriteDoubleValue("episodeNumber", EpisodeNumber);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("overview", Overview);
            writer.WriteStringValue("productionCode", ProductionCode);
            writer.WriteDoubleValue("seasonNumber", SeasonNumber);
            writer.WriteDoubleValue("showId", ShowId);
            writer.WriteStringValue("stillPath", StillPath);
            writer.WriteDoubleValue("voteAverage", VoteAverage);
            writer.WriteDoubleValue("voteCount", VoteCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ExternalIds : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The facebookId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FacebookId { get; set; }
#nullable restore
#else
        public string FacebookId { get; set; }
#endif
        /// <summary>The freebaseId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FreebaseId { get; set; }
#nullable restore
#else
        public string FreebaseId { get; set; }
#endif
        /// <summary>The freebaseMid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FreebaseMid { get; set; }
#nullable restore
#else
        public string FreebaseMid { get; set; }
#endif
        /// <summary>The imdbId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImdbId { get; set; }
#nullable restore
#else
        public string ImdbId { get; set; }
#endif
        /// <summary>The instagramId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InstagramId { get; set; }
#nullable restore
#else
        public string InstagramId { get; set; }
#endif
        /// <summary>The tvdbId property</summary>
        public double? TvdbId { get; set; }
        /// <summary>The tvrageId property</summary>
        public double? TvrageId { get; set; }
        /// <summary>The twitterId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TwitterId { get; set; }
#nullable restore
#else
        public string TwitterId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.ExternalIds"/> and sets the default values.
        /// </summary>
        public ExternalIds()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.ExternalIds"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.ExternalIds CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.ExternalIds();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "facebookId", n => { FacebookId = n.GetStringValue(); } },
                { "freebaseId", n => { FreebaseId = n.GetStringValue(); } },
                { "freebaseMid", n => { FreebaseMid = n.GetStringValue(); } },
                { "imdbId", n => { ImdbId = n.GetStringValue(); } },
                { "instagramId", n => { InstagramId = n.GetStringValue(); } },
                { "tvdbId", n => { TvdbId = n.GetDoubleValue(); } },
                { "tvrageId", n => { TvrageId = n.GetDoubleValue(); } },
                { "twitterId", n => { TwitterId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("facebookId", FacebookId);
            writer.WriteStringValue("freebaseId", FreebaseId);
            writer.WriteStringValue("freebaseMid", FreebaseMid);
            writer.WriteStringValue("imdbId", ImdbId);
            writer.WriteStringValue("instagramId", InstagramId);
            writer.WriteDoubleValue("tvdbId", TvdbId);
            writer.WriteDoubleValue("tvrageId", TvrageId);
            writer.WriteStringValue("twitterId", TwitterId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Genre : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Genre"/> and sets the default values.
        /// </summary>
        public Genre()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Genre"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Genre CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Genre();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GotifySettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.GotifySettings"/> and sets the default values.
        /// </summary>
        public GotifySettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.GotifySettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.GotifySettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.GotifySettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options>(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GotifySettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options"/> and sets the default values.
        /// </summary>
        public GotifySettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.GotifySettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "token", n => { Token = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Issue : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The comments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.IssueComment>? Comments { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.IssueComment> Comments { get; set; }
#endif
        /// <summary>The createdBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.User? CreatedBy { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.User CreatedBy { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The issueType property</summary>
        public double? IssueType { get; set; }
        /// <summary>The media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? Media { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo Media { get; set; }
#endif
        /// <summary>The modifiedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.User? ModifiedBy { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.User ModifiedBy { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Issue"/> and sets the default values.
        /// </summary>
        public Issue()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Issue"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Issue CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Issue();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "comments", n => { Comments = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.IssueComment>(global::FluentFin.Plugins.Jellyseer.Models.IssueComment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "issueType", n => { IssueType = n.GetDoubleValue(); } },
                { "media", n => { Media = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "modifiedBy", n => { ModifiedBy = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.IssueComment>("comments", Comments);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>("createdBy", CreatedBy);
            writer.WriteDoubleValue("id", Id);
            writer.WriteDoubleValue("issueType", IssueType);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("media", Media);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>("modifiedBy", ModifiedBy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class IssueComment : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The user property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.User? User { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.User User { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.IssueComment"/> and sets the default values.
        /// </summary>
        public IssueComment()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.IssueComment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.IssueComment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.IssueComment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "user", n => { User = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("message", Message);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>("user", User);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class JellyfinLibrary : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary"/> and sets the default values.
        /// </summary>
        public JellyfinLibrary()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class JellyfinSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adminPass property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdminPass { get; set; }
#nullable restore
#else
        public string AdminPass { get; set; }
#endif
        /// <summary>The adminUser property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AdminUser { get; set; }
#nullable restore
#else
        public string AdminUser { get; set; }
#endif
        /// <summary>The externalHostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalHostname { get; set; }
#nullable restore
#else
        public string ExternalHostname { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The jellyfinForgotPasswordUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JellyfinForgotPasswordUrl { get; set; }
#nullable restore
#else
        public string JellyfinForgotPasswordUrl { get; set; }
#endif
        /// <summary>The libraries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>? Libraries { get; private set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary> Libraries { get; private set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The serverID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServerID { get; private set; }
#nullable restore
#else
        public string ServerID { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings"/> and sets the default values.
        /// </summary>
        public JellyfinSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adminPass", n => { AdminPass = n.GetStringValue(); } },
                { "adminUser", n => { AdminUser = n.GetStringValue(); } },
                { "externalHostname", n => { ExternalHostname = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "jellyfinForgotPasswordUrl", n => { JellyfinForgotPasswordUrl = n.GetStringValue(); } },
                { "libraries", n => { Libraries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>(global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "serverID", n => { ServerID = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("adminPass", AdminPass);
            writer.WriteStringValue("adminUser", AdminUser);
            writer.WriteStringValue("externalHostname", ExternalHostname);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteStringValue("jellyfinForgotPasswordUrl", JellyfinForgotPasswordUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Job : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The interval property</summary>
        public global::FluentFin.Plugins.Jellyseer.Models.Job_interval? Interval { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nextExecutionTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextExecutionTime { get; set; }
#nullable restore
#else
        public string NextExecutionTime { get; set; }
#endif
        /// <summary>The running property</summary>
        public bool? Running { get; set; }
        /// <summary>The type property</summary>
        public global::FluentFin.Plugins.Jellyseer.Models.Job_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Job"/> and sets the default values.
        /// </summary>
        public Job()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Job"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Job CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Job();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "interval", n => { Interval = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Models.Job_interval>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nextExecutionTime", n => { NextExecutionTime = n.GetStringValue(); } },
                { "running", n => { Running = n.GetBoolValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Models.Job_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Models.Job_interval>("interval", Interval);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("nextExecutionTime", NextExecutionTime);
            writer.WriteBoolValue("running", Running);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Models.Job_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum Job_interval
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "short")]
        #pragma warning disable CS1591
        Short,
        #pragma warning restore CS1591
        [EnumMember(Value = "long")]
        #pragma warning disable CS1591
        Long,
        #pragma warning restore CS1591
        [EnumMember(Value = "fixed")]
        #pragma warning disable CS1591
        Fixed,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum Job_type
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "process")]
        #pragma warning disable CS1591
        Process,
        #pragma warning restore CS1591
        [EnumMember(Value = "command")]
        #pragma warning disable CS1591
        Command,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Keyword : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Keyword"/> and sets the default values.
        /// </summary>
        public Keyword()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Keyword"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Keyword CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Keyword();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LunaSeaSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings"/> and sets the default values.
        /// </summary>
        public LunaSeaSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LunaSeaSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The profileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfileName { get; set; }
#nullable restore
#else
        public string ProfileName { get; set; }
#endif
        /// <summary>The webhookUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookUrl { get; set; }
#nullable restore
#else
        public string WebhookUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options"/> and sets the default values.
        /// </summary>
        public LunaSeaSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "profileName", n => { ProfileName = n.GetStringValue(); } },
                { "webhookUrl", n => { WebhookUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("profileName", ProfileName);
            writer.WriteStringValue("webhookUrl", WebhookUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MainSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apiKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; private set; }
#nullable restore
#else
        public string ApiKey { get; private set; }
#endif
        /// <summary>The appLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppLanguage { get; set; }
#nullable restore
#else
        public string AppLanguage { get; set; }
#endif
        /// <summary>The applicationTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicationTitle { get; set; }
#nullable restore
#else
        public string ApplicationTitle { get; set; }
#endif
        /// <summary>The applicationUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicationUrl { get; set; }
#nullable restore
#else
        public string ApplicationUrl { get; set; }
#endif
        /// <summary>The defaultPermissions property</summary>
        public double? DefaultPermissions { get; set; }
        /// <summary>The enableSpecialEpisodes property</summary>
        public bool? EnableSpecialEpisodes { get; set; }
        /// <summary>The hideAvailable property</summary>
        public bool? HideAvailable { get; set; }
        /// <summary>The localLogin property</summary>
        public bool? LocalLogin { get; set; }
        /// <summary>The mediaServerType property</summary>
        public double? MediaServerType { get; set; }
        /// <summary>The newPlexLogin property</summary>
        public bool? NewPlexLogin { get; set; }
        /// <summary>The partialRequestsEnabled property</summary>
        public bool? PartialRequestsEnabled { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MainSettings"/> and sets the default values.
        /// </summary>
        public MainSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MainSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MainSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MainSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiKey", n => { ApiKey = n.GetStringValue(); } },
                { "appLanguage", n => { AppLanguage = n.GetStringValue(); } },
                { "applicationTitle", n => { ApplicationTitle = n.GetStringValue(); } },
                { "applicationUrl", n => { ApplicationUrl = n.GetStringValue(); } },
                { "defaultPermissions", n => { DefaultPermissions = n.GetDoubleValue(); } },
                { "enableSpecialEpisodes", n => { EnableSpecialEpisodes = n.GetBoolValue(); } },
                { "hideAvailable", n => { HideAvailable = n.GetBoolValue(); } },
                { "localLogin", n => { LocalLogin = n.GetBoolValue(); } },
                { "mediaServerType", n => { MediaServerType = n.GetDoubleValue(); } },
                { "newPlexLogin", n => { NewPlexLogin = n.GetBoolValue(); } },
                { "partialRequestsEnabled", n => { PartialRequestsEnabled = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("appLanguage", AppLanguage);
            writer.WriteStringValue("applicationTitle", ApplicationTitle);
            writer.WriteStringValue("applicationUrl", ApplicationUrl);
            writer.WriteDoubleValue("defaultPermissions", DefaultPermissions);
            writer.WriteBoolValue("enableSpecialEpisodes", EnableSpecialEpisodes);
            writer.WriteBoolValue("hideAvailable", HideAvailable);
            writer.WriteBoolValue("localLogin", LocalLogin);
            writer.WriteDoubleValue("mediaServerType", MediaServerType);
            writer.WriteBoolValue("newPlexLogin", NewPlexLogin);
            writer.WriteBoolValue("partialRequestsEnabled", PartialRequestsEnabled);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MediaInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; private set; }
#nullable restore
#else
        public string CreatedAt { get; private set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; private set; }
        /// <summary>The requests property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>? Requests { get; private set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> Requests { get; private set; }
#endif
        /// <summary>Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`, 6 = `DELETED`</summary>
        public double? Status { get; set; }
        /// <summary>The tmdbId property</summary>
        public double? TmdbId { get; private set; }
        /// <summary>The tvdbId property</summary>
        public double? TvdbId { get; private set; }
        /// <summary>The updatedAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; private set; }
#nullable restore
#else
        public string UpdatedAt { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaInfo"/> and sets the default values.
        /// </summary>
        public MediaInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MediaInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MediaInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "requests", n => { Requests = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
                { "tmdbId", n => { TmdbId = n.GetDoubleValue(); } },
                { "tvdbId", n => { TvdbId = n.GetDoubleValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MediaRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; private set; }
#nullable restore
#else
        public string CreatedAt { get; private set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; private set; }
        /// <summary>The is4k property</summary>
        public bool? Is4k { get; set; }
        /// <summary>The media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? Media { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo Media { get; set; }
#endif
        /// <summary>The modifiedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.User? ModifiedBy { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.User ModifiedBy { get; set; }
#endif
        /// <summary>The profileId property</summary>
        public double? ProfileId { get; set; }
        /// <summary>The requestedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.User? RequestedBy { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.User RequestedBy { get; set; }
#endif
        /// <summary>The rootFolder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RootFolder { get; set; }
#nullable restore
#else
        public string RootFolder { get; set; }
#endif
        /// <summary>The serverId property</summary>
        public double? ServerId { get; set; }
        /// <summary>Status of the request. 1 = PENDING APPROVAL, 2 = APPROVED, 3 = DECLINED</summary>
        public double? Status { get; private set; }
        /// <summary>The updatedAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; private set; }
#nullable restore
#else
        public string UpdatedAt { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaRequest"/> and sets the default values.
        /// </summary>
        public MediaRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MediaRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MediaRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "is4k", n => { Is4k = n.GetBoolValue(); } },
                { "media", n => { Media = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "modifiedBy", n => { ModifiedBy = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue); } },
                { "profileId", n => { ProfileId = n.GetDoubleValue(); } },
                { "requestedBy", n => { RequestedBy = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue); } },
                { "rootFolder", n => { RootFolder = n.GetStringValue(); } },
                { "serverId", n => { ServerId = n.GetDoubleValue(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("is4k", Is4k);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("media", Media);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>("modifiedBy", ModifiedBy);
            writer.WriteDoubleValue("profileId", ProfileId);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>("requestedBy", RequestedBy);
            writer.WriteStringValue("rootFolder", RootFolder);
            writer.WriteDoubleValue("serverId", ServerId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieDetails : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adult property</summary>
        public bool? Adult { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The budget property</summary>
        public double? Budget { get; set; }
        /// <summary>The collection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection? Collection { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection Collection { get; set; }
#endif
        /// <summary>The credits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits? Credits { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits Credits { get; set; }
#endif
        /// <summary>The externalIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.ExternalIds? ExternalIds { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.ExternalIds ExternalIds { get; set; }
#endif
        /// <summary>The genres property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Genre>? Genres { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Genre> Genres { get; set; }
#endif
        /// <summary>The homepage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Homepage { get; set; }
#nullable restore
#else
        public string Homepage { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; private set; }
        /// <summary>The imdbId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImdbId { get; set; }
#nullable restore
#else
        public string ImdbId { get; set; }
#endif
        /// <summary>The mediaInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? MediaInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo MediaInfo { get; set; }
#endif
        /// <summary>The originalLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The originalTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalTitle { get; set; }
#nullable restore
#else
        public string OriginalTitle { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public double? Popularity { get; set; }
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The productionCompanies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>? ProductionCompanies { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany> ProductionCompanies { get; set; }
#endif
        /// <summary>The productionCountries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries>? ProductionCountries { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries> ProductionCountries { get; set; }
#endif
        /// <summary>The relatedVideos property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo>? RelatedVideos { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo> RelatedVideos { get; set; }
#endif
        /// <summary>The releaseDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The releases property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases? Releases { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases Releases { get; set; }
#endif
        /// <summary>The revenue property</summary>
        public double? Revenue { get; set; }
        /// <summary>The runtime property</summary>
        public double? Runtime { get; set; }
        /// <summary>The spokenLanguages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>? SpokenLanguages { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage> SpokenLanguages { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The tagline property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tagline { get; set; }
#nullable restore
#else
        public string Tagline { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The video property</summary>
        public bool? Video { get; set; }
        /// <summary>The voteAverage property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The voteCount property</summary>
        public double? VoteCount { get; set; }
        /// <summary>The watchProviders property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? WatchProviders { get; set; }
#nullable restore
#else
        public UntypedNode WatchProviders { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails"/> and sets the default values.
        /// </summary>
        public MovieDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adult", n => { Adult = n.GetBoolValue(); } },
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "budget", n => { Budget = n.GetDoubleValue(); } },
                { "collection", n => { Collection = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection>(global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection.CreateFromDiscriminatorValue); } },
                { "credits", n => { Credits = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits>(global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits.CreateFromDiscriminatorValue); } },
                { "externalIds", n => { ExternalIds = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ExternalIds>(global::FluentFin.Plugins.Jellyseer.Models.ExternalIds.CreateFromDiscriminatorValue); } },
                { "genres", n => { Genres = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Genre>(global::FluentFin.Plugins.Jellyseer.Models.Genre.CreateFromDiscriminatorValue)?.AsList(); } },
                { "homepage", n => { Homepage = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "imdbId", n => { ImdbId = n.GetStringValue(); } },
                { "mediaInfo", n => { MediaInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "originalLanguage", n => { OriginalLanguage = n.GetStringValue(); } },
                { "originalTitle", n => { OriginalTitle = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetDoubleValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
                { "productionCompanies", n => { ProductionCompanies = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>(global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany.CreateFromDiscriminatorValue)?.AsList(); } },
                { "productionCountries", n => { ProductionCountries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries>(global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries.CreateFromDiscriminatorValue)?.AsList(); } },
                { "relatedVideos", n => { RelatedVideos = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo>(global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo.CreateFromDiscriminatorValue)?.AsList(); } },
                { "releaseDate", n => { ReleaseDate = n.GetStringValue(); } },
                { "releases", n => { Releases = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases>(global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases.CreateFromDiscriminatorValue); } },
                { "revenue", n => { Revenue = n.GetDoubleValue(); } },
                { "runtime", n => { Runtime = n.GetDoubleValue(); } },
                { "spokenLanguages", n => { SpokenLanguages = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>(global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "tagline", n => { Tagline = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "video", n => { Video = n.GetBoolValue(); } },
                { "voteAverage", n => { VoteAverage = n.GetDoubleValue(); } },
                { "voteCount", n => { VoteCount = n.GetDoubleValue(); } },
                { "watchProviders", n => { WatchProviders = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("adult", Adult);
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteDoubleValue("budget", Budget);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection>("collection", Collection);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits>("credits", Credits);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ExternalIds>("externalIds", ExternalIds);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Genre>("genres", Genres);
            writer.WriteStringValue("homepage", Homepage);
            writer.WriteStringValue("imdbId", ImdbId);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("mediaInfo", MediaInfo);
            writer.WriteStringValue("originalLanguage", OriginalLanguage);
            writer.WriteStringValue("originalTitle", OriginalTitle);
            writer.WriteStringValue("overview", Overview);
            writer.WriteDoubleValue("popularity", Popularity);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>("productionCompanies", ProductionCompanies);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries>("productionCountries", ProductionCountries);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo>("relatedVideos", RelatedVideos);
            writer.WriteStringValue("releaseDate", ReleaseDate);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases>("releases", Releases);
            writer.WriteDoubleValue("revenue", Revenue);
            writer.WriteDoubleValue("runtime", Runtime);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>("spokenLanguages", SpokenLanguages);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("tagline", Tagline);
            writer.WriteStringValue("title", Title);
            writer.WriteBoolValue("video", Video);
            writer.WriteDoubleValue("voteAverage", VoteAverage);
            writer.WriteDoubleValue("voteCount", VoteCount);
            writer.WriteObjectValue<UntypedNode>("watchProviders", WatchProviders);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieDetails_collection : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection"/> and sets the default values.
        /// </summary>
        public MovieDetails_collection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_collection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieDetails_credits : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cast property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Cast>? Cast { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Cast> Cast { get; set; }
#endif
        /// <summary>The crew property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Crew>? Crew { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Crew> Crew { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits"/> and sets the default values.
        /// </summary>
        public MovieDetails_credits()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_credits();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cast", n => { Cast = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Cast>(global::FluentFin.Plugins.Jellyseer.Models.Cast.CreateFromDiscriminatorValue)?.AsList(); } },
                { "crew", n => { Crew = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Crew>(global::FluentFin.Plugins.Jellyseer.Models.Crew.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Cast>("cast", Cast);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Crew>("crew", Crew);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieDetails_productionCountries : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The iso_3166_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso31661 { get; set; }
#nullable restore
#else
        public string Iso31661 { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries"/> and sets the default values.
        /// </summary>
        public MovieDetails_productionCountries()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_productionCountries();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "iso_3166_1", n => { Iso31661 = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("iso_3166_1", Iso31661);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieDetails_releases : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases"/> and sets the default values.
        /// </summary>
        public MovieDetails_releases()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results>(global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieDetails_releases_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The iso_3166_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso31661 { get; set; }
#nullable restore
#else
        public string Iso31661 { get; set; }
#endif
        /// <summary>The rating property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rating { get; set; }
#nullable restore
#else
        public string Rating { get; set; }
#endif
        /// <summary>The release_dates property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates>? ReleaseDates { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates> ReleaseDates { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results"/> and sets the default values.
        /// </summary>
        public MovieDetails_releases_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "iso_3166_1", n => { Iso31661 = n.GetStringValue(); } },
                { "rating", n => { Rating = n.GetStringValue(); } },
                { "release_dates", n => { ReleaseDates = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates>(global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("iso_3166_1", Iso31661);
            writer.WriteStringValue("rating", Rating);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates>("release_dates", ReleaseDates);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieDetails_releases_results_release_dates : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The certification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certification { get; set; }
#nullable restore
#else
        public string Certification { get; set; }
#endif
        /// <summary>The iso_639_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso6391 { get; set; }
#nullable restore
#else
        public string Iso6391 { get; set; }
#endif
        /// <summary>The note property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>The release_date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The type property</summary>
        public double? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates"/> and sets the default values.
        /// </summary>
        public MovieDetails_releases_results_release_dates()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieDetails_releases_results_release_dates();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "certification", n => { Certification = n.GetStringValue(); } },
                { "iso_639_1", n => { Iso6391 = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "release_date", n => { ReleaseDate = n.GetStringValue(); } },
                { "type", n => { Type = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("certification", Certification);
            writer.WriteStringValue("iso_639_1", Iso6391);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("release_date", ReleaseDate);
            writer.WriteDoubleValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MovieResult : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adult property</summary>
        public bool? Adult { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The genreIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? GenreIds { get; set; }
#nullable restore
#else
        public List<double?> GenreIds { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The mediaInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? MediaInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo MediaInfo { get; set; }
#endif
        /// <summary>The mediaType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaType { get; set; }
#nullable restore
#else
        public string MediaType { get; set; }
#endif
        /// <summary>The originalLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The originalTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalTitle { get; set; }
#nullable restore
#else
        public string OriginalTitle { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public double? Popularity { get; set; }
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The releaseDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReleaseDate { get; set; }
#nullable restore
#else
        public string ReleaseDate { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The video property</summary>
        public bool? Video { get; set; }
        /// <summary>The voteAverage property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The voteCount property</summary>
        public double? VoteCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/> and sets the default values.
        /// </summary>
        public MovieResult()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.MovieResult CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.MovieResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adult", n => { Adult = n.GetBoolValue(); } },
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "genreIds", n => { GenreIds = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "mediaInfo", n => { MediaInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "mediaType", n => { MediaType = n.GetStringValue(); } },
                { "originalLanguage", n => { OriginalLanguage = n.GetStringValue(); } },
                { "originalTitle", n => { OriginalTitle = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetDoubleValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
                { "releaseDate", n => { ReleaseDate = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "video", n => { Video = n.GetBoolValue(); } },
                { "voteAverage", n => { VoteAverage = n.GetDoubleValue(); } },
                { "voteCount", n => { VoteCount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("adult", Adult);
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteCollectionOfPrimitiveValues<double?>("genreIds", GenreIds);
            writer.WriteDoubleValue("id", Id);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("mediaInfo", MediaInfo);
            writer.WriteStringValue("mediaType", MediaType);
            writer.WriteStringValue("originalLanguage", OriginalLanguage);
            writer.WriteStringValue("originalTitle", OriginalTitle);
            writer.WriteStringValue("overview", Overview);
            writer.WriteDoubleValue("popularity", Popularity);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteStringValue("releaseDate", ReleaseDate);
            writer.WriteStringValue("title", Title);
            writer.WriteBoolValue("video", Video);
            writer.WriteDoubleValue("voteAverage", VoteAverage);
            writer.WriteDoubleValue("voteCount", VoteCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Network : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The logoPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoPath { get; set; }
#nullable restore
#else
        public string LogoPath { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The originCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginCountry { get; set; }
#nullable restore
#else
        public string OriginCountry { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Network"/> and sets the default values.
        /// </summary>
        public Network()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Network"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Network CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Network();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "logoPath", n => { LogoPath = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originCountry", n => { OriginCountry = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("logoPath", LogoPath);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("originCountry", OriginCountry);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NetworkSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The csrfProtection property</summary>
        public bool? CsrfProtection { get; set; }
        /// <summary>The trustProxy property</summary>
        public bool? TrustProxy { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings"/> and sets the default values.
        /// </summary>
        public NetworkSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "csrfProtection", n => { CsrfProtection = n.GetBoolValue(); } },
                { "trustProxy", n => { TrustProxy = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("csrfProtection", CsrfProtection);
            writer.WriteBoolValue("trustProxy", TrustProxy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NotificationAgentTypes : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The discord property</summary>
        public double? Discord { get; set; }
        /// <summary>The email property</summary>
        public double? Email { get; set; }
        /// <summary>The pushbullet property</summary>
        public double? Pushbullet { get; set; }
        /// <summary>The pushover property</summary>
        public double? Pushover { get; set; }
        /// <summary>The slack property</summary>
        public double? Slack { get; set; }
        /// <summary>The telegram property</summary>
        public double? Telegram { get; set; }
        /// <summary>The webhook property</summary>
        public double? Webhook { get; set; }
        /// <summary>The webpush property</summary>
        public double? Webpush { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes"/> and sets the default values.
        /// </summary>
        public NotificationAgentTypes()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "discord", n => { Discord = n.GetDoubleValue(); } },
                { "email", n => { Email = n.GetDoubleValue(); } },
                { "pushbullet", n => { Pushbullet = n.GetDoubleValue(); } },
                { "pushover", n => { Pushover = n.GetDoubleValue(); } },
                { "slack", n => { Slack = n.GetDoubleValue(); } },
                { "telegram", n => { Telegram = n.GetDoubleValue(); } },
                { "webhook", n => { Webhook = n.GetDoubleValue(); } },
                { "webpush", n => { Webpush = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("discord", Discord);
            writer.WriteDoubleValue("email", Email);
            writer.WriteDoubleValue("pushbullet", Pushbullet);
            writer.WriteDoubleValue("pushover", Pushover);
            writer.WriteDoubleValue("slack", Slack);
            writer.WriteDoubleValue("telegram", Telegram);
            writer.WriteDoubleValue("webhook", Webhook);
            writer.WriteDoubleValue("webpush", Webpush);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NotificationEmailSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings"/> and sets the default values.
        /// </summary>
        public NotificationEmailSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NotificationEmailSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allowSelfSigned property</summary>
        public bool? AllowSelfSigned { get; set; }
        /// <summary>The authPass property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthPass { get; set; }
#nullable restore
#else
        public string AuthPass { get; set; }
#endif
        /// <summary>The authUser property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthUser { get; set; }
#nullable restore
#else
        public string AuthUser { get; set; }
#endif
        /// <summary>The emailFrom property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailFrom { get; set; }
#nullable restore
#else
        public string EmailFrom { get; set; }
#endif
        /// <summary>The ignoreTls property</summary>
        public bool? IgnoreTls { get; set; }
        /// <summary>The requireTls property</summary>
        public bool? RequireTls { get; set; }
        /// <summary>The secure property</summary>
        public bool? Secure { get; set; }
        /// <summary>The senderName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderName { get; set; }
#nullable restore
#else
        public string SenderName { get; set; }
#endif
        /// <summary>The smtpHost property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SmtpHost { get; set; }
#nullable restore
#else
        public string SmtpHost { get; set; }
#endif
        /// <summary>The smtpPort property</summary>
        public double? SmtpPort { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options"/> and sets the default values.
        /// </summary>
        public NotificationEmailSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowSelfSigned", n => { AllowSelfSigned = n.GetBoolValue(); } },
                { "authPass", n => { AuthPass = n.GetStringValue(); } },
                { "authUser", n => { AuthUser = n.GetStringValue(); } },
                { "emailFrom", n => { EmailFrom = n.GetStringValue(); } },
                { "ignoreTls", n => { IgnoreTls = n.GetBoolValue(); } },
                { "requireTls", n => { RequireTls = n.GetBoolValue(); } },
                { "secure", n => { Secure = n.GetBoolValue(); } },
                { "senderName", n => { SenderName = n.GetStringValue(); } },
                { "smtpHost", n => { SmtpHost = n.GetStringValue(); } },
                { "smtpPort", n => { SmtpPort = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowSelfSigned", AllowSelfSigned);
            writer.WriteStringValue("authPass", AuthPass);
            writer.WriteStringValue("authUser", AuthUser);
            writer.WriteStringValue("emailFrom", EmailFrom);
            writer.WriteBoolValue("ignoreTls", IgnoreTls);
            writer.WriteBoolValue("requireTls", RequireTls);
            writer.WriteBoolValue("secure", Secure);
            writer.WriteStringValue("senderName", SenderName);
            writer.WriteStringValue("smtpHost", SmtpHost);
            writer.WriteDoubleValue("smtpPort", SmtpPort);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NtfySettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.NtfySettings"/> and sets the default values.
        /// </summary>
        public NtfySettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NtfySettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.NtfySettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.NtfySettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options>(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NtfySettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authMethodToken property</summary>
        public bool? AuthMethodToken { get; set; }
        /// <summary>The authMethodUsernamePassword property</summary>
        public bool? AuthMethodUsernamePassword { get; set; }
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The topic property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Topic { get; set; }
#nullable restore
#else
        public string Topic { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options"/> and sets the default values.
        /// </summary>
        public NtfySettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.NtfySettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authMethodToken", n => { AuthMethodToken = n.GetBoolValue(); } },
                { "authMethodUsernamePassword", n => { AuthMethodUsernamePassword = n.GetBoolValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "topic", n => { Topic = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("authMethodToken", AuthMethodToken);
            writer.WriteBoolValue("authMethodUsernamePassword", AuthMethodUsernamePassword);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("topic", Topic);
            writer.WriteStringValue("url", Url);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OverrideRule : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.OverrideRule"/> and sets the default values.
        /// </summary>
        public OverrideRule()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.OverrideRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.OverrideRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.OverrideRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PageInfo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The pages property</summary>
        public double? Pages { get; set; }
        /// <summary>The results property</summary>
        public double? Results { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PageInfo"/> and sets the default values.
        /// </summary>
        public PageInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PageInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PageInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PageInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "pages", n => { Pages = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteDoubleValue("pages", Pages);
            writer.WriteDoubleValue("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PersonDetails : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adult property</summary>
        public bool? Adult { get; set; }
        /// <summary>The alsoKnownAs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AlsoKnownAs { get; set; }
#nullable restore
#else
        public List<string> AlsoKnownAs { get; set; }
#endif
        /// <summary>The biography property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Biography { get; set; }
#nullable restore
#else
        public string Biography { get; set; }
#endif
        /// <summary>The deathday property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Deathday { get; set; }
#nullable restore
#else
        public string Deathday { get; set; }
#endif
        /// <summary>The gender property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Gender { get; set; }
#nullable restore
#else
        public string Gender { get; set; }
#endif
        /// <summary>The homepage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Homepage { get; set; }
#nullable restore
#else
        public string Homepage { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The imdbId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImdbId { get; set; }
#nullable restore
#else
        public string ImdbId { get; set; }
#endif
        /// <summary>The knownForDepartment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KnownForDepartment { get; set; }
#nullable restore
#else
        public string KnownForDepartment { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The placeOfBirth property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlaceOfBirth { get; set; }
#nullable restore
#else
        public string PlaceOfBirth { get; set; }
#endif
        /// <summary>The popularity property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Popularity { get; set; }
#nullable restore
#else
        public string Popularity { get; set; }
#endif
        /// <summary>The profilePath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePath { get; set; }
#nullable restore
#else
        public string ProfilePath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonDetails"/> and sets the default values.
        /// </summary>
        public PersonDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PersonDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PersonDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adult", n => { Adult = n.GetBoolValue(); } },
                { "alsoKnownAs", n => { AlsoKnownAs = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "biography", n => { Biography = n.GetStringValue(); } },
                { "deathday", n => { Deathday = n.GetStringValue(); } },
                { "gender", n => { Gender = n.GetStringValue(); } },
                { "homepage", n => { Homepage = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "imdbId", n => { ImdbId = n.GetStringValue(); } },
                { "knownForDepartment", n => { KnownForDepartment = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "placeOfBirth", n => { PlaceOfBirth = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetStringValue(); } },
                { "profilePath", n => { ProfilePath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("adult", Adult);
            writer.WriteCollectionOfPrimitiveValues<string>("alsoKnownAs", AlsoKnownAs);
            writer.WriteStringValue("biography", Biography);
            writer.WriteStringValue("deathday", Deathday);
            writer.WriteStringValue("gender", Gender);
            writer.WriteStringValue("homepage", Homepage);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("imdbId", ImdbId);
            writer.WriteStringValue("knownForDepartment", KnownForDepartment);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("placeOfBirth", PlaceOfBirth);
            writer.WriteStringValue("popularity", Popularity);
            writer.WriteStringValue("profilePath", ProfilePath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PersonResult : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The adult property</summary>
        public bool? Adult { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The knownFor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor>? KnownFor { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor> KnownFor { get; set; }
#endif
        /// <summary>The mediaType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaType { get; set; }
#nullable restore
#else
        public string MediaType { get; set; }
#endif
        /// <summary>The profilePath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePath { get; set; }
#nullable restore
#else
        public string ProfilePath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonResult"/> and sets the default values.
        /// </summary>
        public PersonResult()
        {
            AdditionalData = new Dictionary<string, object>();
            MediaType = "person";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PersonResult CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PersonResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adult", n => { Adult = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "knownFor", n => { KnownFor = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor>(global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mediaType", n => { MediaType = n.GetStringValue(); } },
                { "profilePath", n => { ProfilePath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("adult", Adult);
            writer.WriteDoubleValue("id", Id);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor>("knownFor", KnownFor);
            writer.WriteStringValue("mediaType", MediaType);
            writer.WriteStringValue("profilePath", ProfilePath);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/>, <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PersonResult_knownFor : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.MovieResult? MovieResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.MovieResult MovieResult { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.TvResult? TvResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.TvResult TvResult { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::FluentFin.Plugins.Jellyseer.Models.PersonResult.PersonResult_knownFor();
                if("MovieResult".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.MovieResult = new global::FluentFin.Plugins.Jellyseer.Models.MovieResult();
                }
                else if("TvResult".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.TvResult = new global::FluentFin.Plugins.Jellyseer.Models.TvResult();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(MovieResult != null)
                {
                    return MovieResult.GetFieldDeserializers();
                }
                else if(TvResult != null)
                {
                    return TvResult.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(MovieResult != null)
                {
                    writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(null, MovieResult);
                }
                else if(TvResult != null)
                {
                    writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(null, TvResult);
                }
            }
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlexConnection : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Address { get; set; }
#nullable restore
#else
        public string Address { get; set; }
#endif
        /// <summary>The local property</summary>
        public bool? Local { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The port property</summary>
        public double? Port { get; set; }
        /// <summary>The protocol property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Protocol { get; set; }
#nullable restore
#else
        public string Protocol { get; set; }
#endif
        /// <summary>The status property</summary>
        public double? Status { get; set; }
        /// <summary>The uri property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Uri { get; set; }
#nullable restore
#else
        public string Uri { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexConnection"/> and sets the default values.
        /// </summary>
        public PlexConnection()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexConnection"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PlexConnection CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PlexConnection();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "address", n => { Address = n.GetStringValue(); } },
                { "local", n => { Local = n.GetBoolValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "port", n => { Port = n.GetDoubleValue(); } },
                { "protocol", n => { Protocol = n.GetStringValue(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
                { "uri", n => { Uri = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("address", Address);
            writer.WriteBoolValue("local", Local);
            writer.WriteStringValue("message", Message);
            writer.WriteDoubleValue("port", Port);
            writer.WriteStringValue("protocol", Protocol);
            writer.WriteDoubleValue("status", Status);
            writer.WriteStringValue("uri", Uri);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlexDevice : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accessToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessToken { get; set; }
#nullable restore
#else
        public string AccessToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The clientIdentifier property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientIdentifier { get; set; }
#nullable restore
#else
        public string ClientIdentifier { get; set; }
#endif
        /// <summary>The connection property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexConnection>? Connection { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexConnection> Connection { get; set; }
#endif
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The device property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Device { get; set; }
#nullable restore
#else
        public string Device { get; set; }
#endif
        /// <summary>The dnsRebindingProtection property</summary>
        public bool? DnsRebindingProtection { get; set; }
        /// <summary>The home property</summary>
        public bool? Home { get; set; }
        /// <summary>The httpsRequired property</summary>
        public bool? HttpsRequired { get; set; }
        /// <summary>The lastSeenAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastSeenAt { get; set; }
#nullable restore
#else
        public string LastSeenAt { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The natLoopbackSupported property</summary>
        public bool? NatLoopbackSupported { get; set; }
        /// <summary>The owned property</summary>
        public bool? Owned { get; set; }
        /// <summary>The ownerID property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OwnerID { get; set; }
#nullable restore
#else
        public string OwnerID { get; set; }
#endif
        /// <summary>The platform property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Platform { get; set; }
#nullable restore
#else
        public string Platform { get; set; }
#endif
        /// <summary>The platformVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlatformVersion { get; set; }
#nullable restore
#else
        public string PlatformVersion { get; set; }
#endif
        /// <summary>The presence property</summary>
        public bool? Presence { get; set; }
        /// <summary>The product property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Product { get; set; }
#nullable restore
#else
        public string Product { get; set; }
#endif
        /// <summary>The productVersion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProductVersion { get; set; }
#nullable restore
#else
        public string ProductVersion { get; set; }
#endif
        /// <summary>The provides property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Provides { get; set; }
#nullable restore
#else
        public List<string> Provides { get; set; }
#endif
        /// <summary>The publicAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublicAddress { get; set; }
#nullable restore
#else
        public string PublicAddress { get; set; }
#endif
        /// <summary>The publicAddressMatches property</summary>
        public bool? PublicAddressMatches { get; set; }
        /// <summary>The relay property</summary>
        public bool? Relay { get; set; }
        /// <summary>The sourceTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceTitle { get; set; }
#nullable restore
#else
        public string SourceTitle { get; set; }
#endif
        /// <summary>The synced property</summary>
        public bool? Synced { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexDevice"/> and sets the default values.
        /// </summary>
        public PlexDevice()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexDevice"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PlexDevice CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PlexDevice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessToken", n => { AccessToken = n.GetStringValue(); } },
                { "clientIdentifier", n => { ClientIdentifier = n.GetStringValue(); } },
                { "connection", n => { Connection = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PlexConnection>(global::FluentFin.Plugins.Jellyseer.Models.PlexConnection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "device", n => { Device = n.GetStringValue(); } },
                { "dnsRebindingProtection", n => { DnsRebindingProtection = n.GetBoolValue(); } },
                { "home", n => { Home = n.GetBoolValue(); } },
                { "httpsRequired", n => { HttpsRequired = n.GetBoolValue(); } },
                { "lastSeenAt", n => { LastSeenAt = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "natLoopbackSupported", n => { NatLoopbackSupported = n.GetBoolValue(); } },
                { "owned", n => { Owned = n.GetBoolValue(); } },
                { "ownerID", n => { OwnerID = n.GetStringValue(); } },
                { "platform", n => { Platform = n.GetStringValue(); } },
                { "platformVersion", n => { PlatformVersion = n.GetStringValue(); } },
                { "presence", n => { Presence = n.GetBoolValue(); } },
                { "product", n => { Product = n.GetStringValue(); } },
                { "productVersion", n => { ProductVersion = n.GetStringValue(); } },
                { "provides", n => { Provides = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "publicAddress", n => { PublicAddress = n.GetStringValue(); } },
                { "publicAddressMatches", n => { PublicAddressMatches = n.GetBoolValue(); } },
                { "relay", n => { Relay = n.GetBoolValue(); } },
                { "sourceTitle", n => { SourceTitle = n.GetStringValue(); } },
                { "synced", n => { Synced = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accessToken", AccessToken);
            writer.WriteStringValue("clientIdentifier", ClientIdentifier);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PlexConnection>("connection", Connection);
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteStringValue("device", Device);
            writer.WriteBoolValue("dnsRebindingProtection", DnsRebindingProtection);
            writer.WriteBoolValue("home", Home);
            writer.WriteBoolValue("httpsRequired", HttpsRequired);
            writer.WriteStringValue("lastSeenAt", LastSeenAt);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("natLoopbackSupported", NatLoopbackSupported);
            writer.WriteBoolValue("owned", Owned);
            writer.WriteStringValue("ownerID", OwnerID);
            writer.WriteStringValue("platform", Platform);
            writer.WriteStringValue("platformVersion", PlatformVersion);
            writer.WriteBoolValue("presence", Presence);
            writer.WriteStringValue("product", Product);
            writer.WriteStringValue("productVersion", ProductVersion);
            writer.WriteCollectionOfPrimitiveValues<string>("provides", Provides);
            writer.WriteStringValue("publicAddress", PublicAddress);
            writer.WriteBoolValue("publicAddressMatches", PublicAddressMatches);
            writer.WriteBoolValue("relay", Relay);
            writer.WriteStringValue("sourceTitle", SourceTitle);
            writer.WriteBoolValue("synced", Synced);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlexLibrary : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary"/> and sets the default values.
        /// </summary>
        public PlexLibrary()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlexSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ip { get; set; }
#nullable restore
#else
        public string Ip { get; set; }
#endif
        /// <summary>The libraries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>? Libraries { get; private set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary> Libraries { get; private set; }
#endif
        /// <summary>The machineId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MachineId { get; private set; }
#nullable restore
#else
        public string MachineId { get; private set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The port property</summary>
        public double? Port { get; set; }
        /// <summary>The useSsl property</summary>
        public bool? UseSsl { get; set; }
        /// <summary>The webAppUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebAppUrl { get; set; }
#nullable restore
#else
        public string WebAppUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexSettings"/> and sets the default values.
        /// </summary>
        public PlexSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PlexSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PlexSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ip", n => { Ip = n.GetStringValue(); } },
                { "libraries", n => { Libraries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>(global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "machineId", n => { MachineId = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "port", n => { Port = n.GetDoubleValue(); } },
                { "useSsl", n => { UseSsl = n.GetBoolValue(); } },
                { "webAppUrl", n => { WebAppUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ip", Ip);
            writer.WriteDoubleValue("port", Port);
            writer.WriteBoolValue("useSsl", UseSsl);
            writer.WriteStringValue("webAppUrl", WebAppUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ProductionCompany : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The logoPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoPath { get; set; }
#nullable restore
#else
        public string LogoPath { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The originCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginCountry { get; set; }
#nullable restore
#else
        public string OriginCountry { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany"/> and sets the default values.
        /// </summary>
        public ProductionCompany()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "logoPath", n => { LogoPath = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originCountry", n => { OriginCountry = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("logoPath", LogoPath);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("originCountry", OriginCountry);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PublicSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The initialized property</summary>
        public bool? Initialized { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PublicSettings"/> and sets the default values.
        /// </summary>
        public PublicSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PublicSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PublicSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PublicSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "initialized", n => { Initialized = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("initialized", Initialized);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PushbulletSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings"/> and sets the default values.
        /// </summary>
        public PushbulletSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PushbulletSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accessToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessToken { get; set; }
#nullable restore
#else
        public string AccessToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The channelTag property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChannelTag { get; set; }
#nullable restore
#else
        public string ChannelTag { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options"/> and sets the default values.
        /// </summary>
        public PushbulletSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessToken", n => { AccessToken = n.GetStringValue(); } },
                { "channelTag", n => { ChannelTag = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accessToken", AccessToken);
            writer.WriteStringValue("channelTag", ChannelTag);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PushoverSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings"/> and sets the default values.
        /// </summary>
        public PushoverSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PushoverSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accessToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessToken { get; set; }
#nullable restore
#else
        public string AccessToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The sound property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Sound { get; set; }
#nullable restore
#else
        public string Sound { get; set; }
#endif
        /// <summary>The userToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options"/> and sets the default values.
        /// </summary>
        public PushoverSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessToken", n => { AccessToken = n.GetStringValue(); } },
                { "sound", n => { Sound = n.GetStringValue(); } },
                { "userToken", n => { UserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accessToken", AccessToken);
            writer.WriteStringValue("sound", Sound);
            writer.WriteStringValue("userToken", UserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RadarrSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activeDirectory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActiveDirectory { get; set; }
#nullable restore
#else
        public string ActiveDirectory { get; set; }
#endif
        /// <summary>The activeProfileId property</summary>
        public double? ActiveProfileId { get; set; }
        /// <summary>The activeProfileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActiveProfileName { get; set; }
#nullable restore
#else
        public string ActiveProfileName { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apiKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; set; }
#nullable restore
#else
        public string ApiKey { get; set; }
#endif
        /// <summary>The baseUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseUrl { get; set; }
#nullable restore
#else
        public string BaseUrl { get; set; }
#endif
        /// <summary>The externalUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalUrl { get; set; }
#nullable restore
#else
        public string ExternalUrl { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; private set; }
        /// <summary>The is4k property</summary>
        public bool? Is4k { get; set; }
        /// <summary>The isDefault property</summary>
        public bool? IsDefault { get; set; }
        /// <summary>The minimumAvailability property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MinimumAvailability { get; set; }
#nullable restore
#else
        public string MinimumAvailability { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The port property</summary>
        public double? Port { get; set; }
        /// <summary>The preventSearch property</summary>
        public bool? PreventSearch { get; set; }
        /// <summary>The syncEnabled property</summary>
        public bool? SyncEnabled { get; set; }
        /// <summary>The useSsl property</summary>
        public bool? UseSsl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings"/> and sets the default values.
        /// </summary>
        public RadarrSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activeDirectory", n => { ActiveDirectory = n.GetStringValue(); } },
                { "activeProfileId", n => { ActiveProfileId = n.GetDoubleValue(); } },
                { "activeProfileName", n => { ActiveProfileName = n.GetStringValue(); } },
                { "apiKey", n => { ApiKey = n.GetStringValue(); } },
                { "baseUrl", n => { BaseUrl = n.GetStringValue(); } },
                { "externalUrl", n => { ExternalUrl = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "is4k", n => { Is4k = n.GetBoolValue(); } },
                { "isDefault", n => { IsDefault = n.GetBoolValue(); } },
                { "minimumAvailability", n => { MinimumAvailability = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "port", n => { Port = n.GetDoubleValue(); } },
                { "preventSearch", n => { PreventSearch = n.GetBoolValue(); } },
                { "syncEnabled", n => { SyncEnabled = n.GetBoolValue(); } },
                { "useSsl", n => { UseSsl = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("activeDirectory", ActiveDirectory);
            writer.WriteDoubleValue("activeProfileId", ActiveProfileId);
            writer.WriteStringValue("activeProfileName", ActiveProfileName);
            writer.WriteStringValue("apiKey", ApiKey);
            writer.WriteStringValue("baseUrl", BaseUrl);
            writer.WriteStringValue("externalUrl", ExternalUrl);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteBoolValue("is4k", Is4k);
            writer.WriteBoolValue("isDefault", IsDefault);
            writer.WriteStringValue("minimumAvailability", MinimumAvailability);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("port", Port);
            writer.WriteBoolValue("preventSearch", PreventSearch);
            writer.WriteBoolValue("syncEnabled", SyncEnabled);
            writer.WriteBoolValue("useSsl", UseSsl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RelatedVideo : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The key property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The site property</summary>
        public global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo_site? Site { get; set; }
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>The type property</summary>
        public global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo_type? Type { get; set; }
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo"/> and sets the default values.
        /// </summary>
        public RelatedVideo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "key", n => { Key = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "site", n => { Site = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo_site>(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo_type>(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo_site>("site", Site);
            writer.WriteDoubleValue("size", Size);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Models.RelatedVideo_type>("type", Type);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RelatedVideo_site
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "YouTube")]
        #pragma warning disable CS1591
        YouTube,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RelatedVideo_type
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "Clip")]
        #pragma warning disable CS1591
        Clip,
        #pragma warning restore CS1591
        [EnumMember(Value = "Teaser")]
        #pragma warning disable CS1591
        Teaser,
        #pragma warning restore CS1591
        [EnumMember(Value = "Trailer")]
        #pragma warning disable CS1591
        Trailer,
        #pragma warning restore CS1591
        [EnumMember(Value = "Featurette")]
        #pragma warning disable CS1591
        Featurette,
        #pragma warning restore CS1591
        [EnumMember(Value = "Opening Credits")]
        #pragma warning disable CS1591
        OpeningCredits,
        #pragma warning restore CS1591
        [EnumMember(Value = "Behind the Scenes")]
        #pragma warning disable CS1591
        BehindTheScenes,
        #pragma warning restore CS1591
        [EnumMember(Value = "Bloopers")]
        #pragma warning disable CS1591
        Bloopers,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Season : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The airDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AirDate { get; set; }
#nullable restore
#else
        public string AirDate { get; set; }
#endif
        /// <summary>The episodeCount property</summary>
        public double? EpisodeCount { get; set; }
        /// <summary>The episodes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Episode>? Episodes { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Episode> Episodes { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The seasonNumber property</summary>
        public double? SeasonNumber { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Season"/> and sets the default values.
        /// </summary>
        public Season()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Season"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Season CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Season();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "airDate", n => { AirDate = n.GetStringValue(); } },
                { "episodeCount", n => { EpisodeCount = n.GetDoubleValue(); } },
                { "episodes", n => { Episodes = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Episode>(global::FluentFin.Plugins.Jellyseer.Models.Episode.CreateFromDiscriminatorValue)?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
                { "seasonNumber", n => { SeasonNumber = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("airDate", AirDate);
            writer.WriteDoubleValue("episodeCount", EpisodeCount);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Episode>("episodes", Episodes);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("overview", Overview);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteDoubleValue("seasonNumber", SeasonNumber);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ServiceProfile : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile"/> and sets the default values.
        /// </summary>
        public ServiceProfile()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SlackSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SlackSettings"/> and sets the default values.
        /// </summary>
        public SlackSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SlackSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SlackSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SlackSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SlackSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The webhookUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookUrl { get; set; }
#nullable restore
#else
        public string WebhookUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options"/> and sets the default values.
        /// </summary>
        public SlackSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SlackSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "webhookUrl", n => { WebhookUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("webhookUrl", WebhookUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SonarrSeries : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The added property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Added { get; set; }
#nullable restore
#else
        public string Added { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The addOptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions>? AddOptions { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions> AddOptions { get; set; }
#endif
        /// <summary>The airTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AirTime { get; set; }
#nullable restore
#else
        public string AirTime { get; set; }
#endif
        /// <summary>The certification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Certification { get; set; }
#nullable restore
#else
        public string Certification { get; set; }
#endif
        /// <summary>The cleanTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CleanTitle { get; set; }
#nullable restore
#else
        public string CleanTitle { get; set; }
#endif
        /// <summary>The firstAired property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstAired { get; set; }
#nullable restore
#else
        public string FirstAired { get; set; }
#endif
        /// <summary>The genres property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Genres { get; set; }
#nullable restore
#else
        public List<string> Genres { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The images property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images>? Images { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images> Images { get; set; }
#endif
        /// <summary>The imdbId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImdbId { get; set; }
#nullable restore
#else
        public string ImdbId { get; set; }
#endif
        /// <summary>The languageProfileId property</summary>
        public double? LanguageProfileId { get; set; }
        /// <summary>The lastInfoSync property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastInfoSync { get; set; }
#nullable restore
#else
        public string LastInfoSync { get; set; }
#endif
        /// <summary>The monitored property</summary>
        public bool? Monitored { get; set; }
        /// <summary>The network property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Network { get; set; }
#nullable restore
#else
        public string Network { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The path property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The profileId property</summary>
        public double? ProfileId { get; set; }
        /// <summary>The qualityProfileId property</summary>
        public double? QualityProfileId { get; set; }
        /// <summary>The ratings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings>? Ratings { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings> Ratings { get; set; }
#endif
        /// <summary>The remotePoster property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemotePoster { get; set; }
#nullable restore
#else
        public string RemotePoster { get; set; }
#endif
        /// <summary>The rootFolderPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RootFolderPath { get; set; }
#nullable restore
#else
        public string RootFolderPath { get; set; }
#endif
        /// <summary>The runtime property</summary>
        public double? Runtime { get; set; }
        /// <summary>The seasonCount property</summary>
        public double? SeasonCount { get; set; }
        /// <summary>The seasonFolder property</summary>
        public bool? SeasonFolder { get; set; }
        /// <summary>The seasons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons>? Seasons { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons> Seasons { get; set; }
#endif
        /// <summary>The seriesType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SeriesType { get; set; }
#nullable restore
#else
        public string SeriesType { get; set; }
#endif
        /// <summary>The sortTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SortTitle { get; set; }
#nullable restore
#else
        public string SortTitle { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Tags { get; set; }
#nullable restore
#else
        public List<string> Tags { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The titleSlug property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TitleSlug { get; set; }
#nullable restore
#else
        public string TitleSlug { get; set; }
#endif
        /// <summary>The tvdbId property</summary>
        public double? TvdbId { get; set; }
        /// <summary>The tvMazeId property</summary>
        public double? TvMazeId { get; set; }
        /// <summary>The tvRageId property</summary>
        public double? TvRageId { get; set; }
        /// <summary>The useSceneNumbering property</summary>
        public bool? UseSceneNumbering { get; set; }
        /// <summary>The year property</summary>
        public double? Year { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries"/> and sets the default values.
        /// </summary>
        public SonarrSeries()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "addOptions", n => { AddOptions = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions>(global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions.CreateFromDiscriminatorValue)?.AsList(); } },
                { "added", n => { Added = n.GetStringValue(); } },
                { "airTime", n => { AirTime = n.GetStringValue(); } },
                { "certification", n => { Certification = n.GetStringValue(); } },
                { "cleanTitle", n => { CleanTitle = n.GetStringValue(); } },
                { "firstAired", n => { FirstAired = n.GetStringValue(); } },
                { "genres", n => { Genres = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "images", n => { Images = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images>(global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images.CreateFromDiscriminatorValue)?.AsList(); } },
                { "imdbId", n => { ImdbId = n.GetStringValue(); } },
                { "languageProfileId", n => { LanguageProfileId = n.GetDoubleValue(); } },
                { "lastInfoSync", n => { LastInfoSync = n.GetStringValue(); } },
                { "monitored", n => { Monitored = n.GetBoolValue(); } },
                { "network", n => { Network = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "path", n => { Path = n.GetStringValue(); } },
                { "profileId", n => { ProfileId = n.GetDoubleValue(); } },
                { "qualityProfileId", n => { QualityProfileId = n.GetDoubleValue(); } },
                { "ratings", n => { Ratings = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings>(global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings.CreateFromDiscriminatorValue)?.AsList(); } },
                { "remotePoster", n => { RemotePoster = n.GetStringValue(); } },
                { "rootFolderPath", n => { RootFolderPath = n.GetStringValue(); } },
                { "runtime", n => { Runtime = n.GetDoubleValue(); } },
                { "seasonCount", n => { SeasonCount = n.GetDoubleValue(); } },
                { "seasonFolder", n => { SeasonFolder = n.GetBoolValue(); } },
                { "seasons", n => { Seasons = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons>(global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons.CreateFromDiscriminatorValue)?.AsList(); } },
                { "seriesType", n => { SeriesType = n.GetStringValue(); } },
                { "sortTitle", n => { SortTitle = n.GetStringValue(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "titleSlug", n => { TitleSlug = n.GetStringValue(); } },
                { "tvMazeId", n => { TvMazeId = n.GetDoubleValue(); } },
                { "tvRageId", n => { TvRageId = n.GetDoubleValue(); } },
                { "tvdbId", n => { TvdbId = n.GetDoubleValue(); } },
                { "useSceneNumbering", n => { UseSceneNumbering = n.GetBoolValue(); } },
                { "year", n => { Year = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("added", Added);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions>("addOptions", AddOptions);
            writer.WriteStringValue("airTime", AirTime);
            writer.WriteStringValue("certification", Certification);
            writer.WriteStringValue("cleanTitle", CleanTitle);
            writer.WriteStringValue("firstAired", FirstAired);
            writer.WriteCollectionOfPrimitiveValues<string>("genres", Genres);
            writer.WriteDoubleValue("id", Id);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images>("images", Images);
            writer.WriteStringValue("imdbId", ImdbId);
            writer.WriteDoubleValue("languageProfileId", LanguageProfileId);
            writer.WriteStringValue("lastInfoSync", LastInfoSync);
            writer.WriteBoolValue("monitored", Monitored);
            writer.WriteStringValue("network", Network);
            writer.WriteStringValue("overview", Overview);
            writer.WriteStringValue("path", Path);
            writer.WriteDoubleValue("profileId", ProfileId);
            writer.WriteDoubleValue("qualityProfileId", QualityProfileId);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings>("ratings", Ratings);
            writer.WriteStringValue("remotePoster", RemotePoster);
            writer.WriteStringValue("rootFolderPath", RootFolderPath);
            writer.WriteDoubleValue("runtime", Runtime);
            writer.WriteDoubleValue("seasonCount", SeasonCount);
            writer.WriteBoolValue("seasonFolder", SeasonFolder);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons>("seasons", Seasons);
            writer.WriteStringValue("seriesType", SeriesType);
            writer.WriteStringValue("sortTitle", SortTitle);
            writer.WriteStringValue("status", Status);
            writer.WriteCollectionOfPrimitiveValues<string>("tags", Tags);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("titleSlug", TitleSlug);
            writer.WriteDoubleValue("tvdbId", TvdbId);
            writer.WriteDoubleValue("tvMazeId", TvMazeId);
            writer.WriteDoubleValue("tvRageId", TvRageId);
            writer.WriteBoolValue("useSceneNumbering", UseSceneNumbering);
            writer.WriteDoubleValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SonarrSeries_addOptions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ignoreEpisodesWithFiles property</summary>
        public bool? IgnoreEpisodesWithFiles { get; set; }
        /// <summary>The ignoreEpisodesWithoutFiles property</summary>
        public bool? IgnoreEpisodesWithoutFiles { get; set; }
        /// <summary>The searchForMissingEpisodes property</summary>
        public bool? SearchForMissingEpisodes { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions"/> and sets the default values.
        /// </summary>
        public SonarrSeries_addOptions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_addOptions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ignoreEpisodesWithFiles", n => { IgnoreEpisodesWithFiles = n.GetBoolValue(); } },
                { "ignoreEpisodesWithoutFiles", n => { IgnoreEpisodesWithoutFiles = n.GetBoolValue(); } },
                { "searchForMissingEpisodes", n => { SearchForMissingEpisodes = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("ignoreEpisodesWithFiles", IgnoreEpisodesWithFiles);
            writer.WriteBoolValue("ignoreEpisodesWithoutFiles", IgnoreEpisodesWithoutFiles);
            writer.WriteBoolValue("searchForMissingEpisodes", SearchForMissingEpisodes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SonarrSeries_images : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The coverType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CoverType { get; set; }
#nullable restore
#else
        public string CoverType { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images"/> and sets the default values.
        /// </summary>
        public SonarrSeries_images()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_images();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "coverType", n => { CoverType = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("coverType", CoverType);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SonarrSeries_ratings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The value property</summary>
        public double? Value { get; set; }
        /// <summary>The votes property</summary>
        public double? Votes { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings"/> and sets the default values.
        /// </summary>
        public SonarrSeries_ratings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_ratings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "value", n => { Value = n.GetDoubleValue(); } },
                { "votes", n => { Votes = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("value", Value);
            writer.WriteDoubleValue("votes", Votes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SonarrSeries_seasons : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The monitored property</summary>
        public bool? Monitored { get; set; }
        /// <summary>The seasonNumber property</summary>
        public double? SeasonNumber { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons"/> and sets the default values.
        /// </summary>
        public SonarrSeries_seasons()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries_seasons();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "monitored", n => { Monitored = n.GetBoolValue(); } },
                { "seasonNumber", n => { SeasonNumber = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("monitored", Monitored);
            writer.WriteDoubleValue("seasonNumber", SeasonNumber);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SonarrSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activeAnimeDirectory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActiveAnimeDirectory { get; set; }
#nullable restore
#else
        public string ActiveAnimeDirectory { get; set; }
#endif
        /// <summary>The activeAnimeLanguageProfileId property</summary>
        public double? ActiveAnimeLanguageProfileId { get; set; }
        /// <summary>The activeAnimeProfileId property</summary>
        public double? ActiveAnimeProfileId { get; set; }
        /// <summary>The activeAnimeProfileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActiveAnimeProfileName { get; set; }
#nullable restore
#else
        public string ActiveAnimeProfileName { get; set; }
#endif
        /// <summary>The activeDirectory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActiveDirectory { get; set; }
#nullable restore
#else
        public string ActiveDirectory { get; set; }
#endif
        /// <summary>The activeLanguageProfileId property</summary>
        public double? ActiveLanguageProfileId { get; set; }
        /// <summary>The activeProfileId property</summary>
        public double? ActiveProfileId { get; set; }
        /// <summary>The activeProfileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ActiveProfileName { get; set; }
#nullable restore
#else
        public string ActiveProfileName { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apiKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; set; }
#nullable restore
#else
        public string ApiKey { get; set; }
#endif
        /// <summary>The baseUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseUrl { get; set; }
#nullable restore
#else
        public string BaseUrl { get; set; }
#endif
        /// <summary>The enableSeasonFolders property</summary>
        public bool? EnableSeasonFolders { get; set; }
        /// <summary>The externalUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalUrl { get; set; }
#nullable restore
#else
        public string ExternalUrl { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; private set; }
        /// <summary>The is4k property</summary>
        public bool? Is4k { get; set; }
        /// <summary>The isDefault property</summary>
        public bool? IsDefault { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The port property</summary>
        public double? Port { get; set; }
        /// <summary>The preventSearch property</summary>
        public bool? PreventSearch { get; set; }
        /// <summary>The syncEnabled property</summary>
        public bool? SyncEnabled { get; set; }
        /// <summary>The useSsl property</summary>
        public bool? UseSsl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings"/> and sets the default values.
        /// </summary>
        public SonarrSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activeAnimeDirectory", n => { ActiveAnimeDirectory = n.GetStringValue(); } },
                { "activeAnimeLanguageProfileId", n => { ActiveAnimeLanguageProfileId = n.GetDoubleValue(); } },
                { "activeAnimeProfileId", n => { ActiveAnimeProfileId = n.GetDoubleValue(); } },
                { "activeAnimeProfileName", n => { ActiveAnimeProfileName = n.GetStringValue(); } },
                { "activeDirectory", n => { ActiveDirectory = n.GetStringValue(); } },
                { "activeLanguageProfileId", n => { ActiveLanguageProfileId = n.GetDoubleValue(); } },
                { "activeProfileId", n => { ActiveProfileId = n.GetDoubleValue(); } },
                { "activeProfileName", n => { ActiveProfileName = n.GetStringValue(); } },
                { "apiKey", n => { ApiKey = n.GetStringValue(); } },
                { "baseUrl", n => { BaseUrl = n.GetStringValue(); } },
                { "enableSeasonFolders", n => { EnableSeasonFolders = n.GetBoolValue(); } },
                { "externalUrl", n => { ExternalUrl = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "is4k", n => { Is4k = n.GetBoolValue(); } },
                { "isDefault", n => { IsDefault = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "port", n => { Port = n.GetDoubleValue(); } },
                { "preventSearch", n => { PreventSearch = n.GetBoolValue(); } },
                { "syncEnabled", n => { SyncEnabled = n.GetBoolValue(); } },
                { "useSsl", n => { UseSsl = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("activeAnimeDirectory", ActiveAnimeDirectory);
            writer.WriteDoubleValue("activeAnimeLanguageProfileId", ActiveAnimeLanguageProfileId);
            writer.WriteDoubleValue("activeAnimeProfileId", ActiveAnimeProfileId);
            writer.WriteStringValue("activeAnimeProfileName", ActiveAnimeProfileName);
            writer.WriteStringValue("activeDirectory", ActiveDirectory);
            writer.WriteDoubleValue("activeLanguageProfileId", ActiveLanguageProfileId);
            writer.WriteDoubleValue("activeProfileId", ActiveProfileId);
            writer.WriteStringValue("activeProfileName", ActiveProfileName);
            writer.WriteStringValue("apiKey", ApiKey);
            writer.WriteStringValue("baseUrl", BaseUrl);
            writer.WriteBoolValue("enableSeasonFolders", EnableSeasonFolders);
            writer.WriteStringValue("externalUrl", ExternalUrl);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteBoolValue("is4k", Is4k);
            writer.WriteBoolValue("isDefault", IsDefault);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("port", Port);
            writer.WriteBoolValue("preventSearch", PreventSearch);
            writer.WriteBoolValue("syncEnabled", SyncEnabled);
            writer.WriteBoolValue("useSsl", UseSsl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SpokenLanguage : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The englishName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnglishName { get; set; }
#nullable restore
#else
        public string EnglishName { get; set; }
#endif
        /// <summary>The iso_639_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso6391 { get; set; }
#nullable restore
#else
        public string Iso6391 { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage"/> and sets the default values.
        /// </summary>
        public SpokenLanguage()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "englishName", n => { EnglishName = n.GetStringValue(); } },
                { "iso_639_1", n => { Iso6391 = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("englishName", EnglishName);
            writer.WriteStringValue("iso_639_1", Iso6391);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TautulliSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apiKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; set; }
#nullable restore
#else
        public string ApiKey { get; set; }
#endif
        /// <summary>The externalUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalUrl { get; set; }
#nullable restore
#else
        public string ExternalUrl { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The port property</summary>
        public double? Port { get; set; }
        /// <summary>The useSsl property</summary>
        public bool? UseSsl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings"/> and sets the default values.
        /// </summary>
        public TautulliSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiKey", n => { ApiKey = n.GetStringValue(); } },
                { "externalUrl", n => { ExternalUrl = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "port", n => { Port = n.GetDoubleValue(); } },
                { "useSsl", n => { UseSsl = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiKey", ApiKey);
            writer.WriteStringValue("externalUrl", ExternalUrl);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteDoubleValue("port", Port);
            writer.WriteBoolValue("useSsl", UseSsl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TelegramSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings"/> and sets the default values.
        /// </summary>
        public TelegramSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TelegramSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The botAPI property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BotAPI { get; set; }
#nullable restore
#else
        public string BotAPI { get; set; }
#endif
        /// <summary>The botUsername property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BotUsername { get; set; }
#nullable restore
#else
        public string BotUsername { get; set; }
#endif
        /// <summary>The chatId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChatId { get; set; }
#nullable restore
#else
        public string ChatId { get; set; }
#endif
        /// <summary>The messageThreadId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageThreadId { get; set; }
#nullable restore
#else
        public string MessageThreadId { get; set; }
#endif
        /// <summary>The sendSilently property</summary>
        public bool? SendSilently { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options"/> and sets the default values.
        /// </summary>
        public TelegramSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "botAPI", n => { BotAPI = n.GetStringValue(); } },
                { "botUsername", n => { BotUsername = n.GetStringValue(); } },
                { "chatId", n => { ChatId = n.GetStringValue(); } },
                { "messageThreadId", n => { MessageThreadId = n.GetStringValue(); } },
                { "sendSilently", n => { SendSilently = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("botAPI", BotAPI);
            writer.WriteStringValue("botUsername", BotUsername);
            writer.WriteStringValue("chatId", ChatId);
            writer.WriteStringValue("messageThreadId", MessageThreadId);
            writer.WriteBoolValue("sendSilently", SendSilently);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvDetails : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The contentRatings property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings? ContentRatings { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings ContentRatings { get; set; }
#endif
        /// <summary>The createdBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy>? CreatedBy { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy> CreatedBy { get; set; }
#endif
        /// <summary>The credits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits? Credits { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits Credits { get; set; }
#endif
        /// <summary>The episodeRunTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? EpisodeRunTime { get; set; }
#nullable restore
#else
        public List<double?> EpisodeRunTime { get; set; }
#endif
        /// <summary>The externalIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.ExternalIds? ExternalIds { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.ExternalIds ExternalIds { get; set; }
#endif
        /// <summary>The firstAirDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstAirDate { get; set; }
#nullable restore
#else
        public string FirstAirDate { get; set; }
#endif
        /// <summary>The genres property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Genre>? Genres { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Genre> Genres { get; set; }
#endif
        /// <summary>The homepage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Homepage { get; set; }
#nullable restore
#else
        public string Homepage { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The inProduction property</summary>
        public bool? InProduction { get; set; }
        /// <summary>The keywords property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Keyword>? Keywords { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Keyword> Keywords { get; set; }
#endif
        /// <summary>The languages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Languages { get; set; }
#nullable restore
#else
        public List<string> Languages { get; set; }
#endif
        /// <summary>The lastAirDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastAirDate { get; set; }
#nullable restore
#else
        public string LastAirDate { get; set; }
#endif
        /// <summary>The lastEpisodeToAir property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.Episode? LastEpisodeToAir { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.Episode LastEpisodeToAir { get; set; }
#endif
        /// <summary>The mediaInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? MediaInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo MediaInfo { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The networks property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>? Networks { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany> Networks { get; set; }
#endif
        /// <summary>The nextEpisodeToAir property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.Episode? NextEpisodeToAir { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.Episode NextEpisodeToAir { get; set; }
#endif
        /// <summary>The numberOfEpisodes property</summary>
        public double? NumberOfEpisodes { get; set; }
        /// <summary>The numberOfSeason property</summary>
        public double? NumberOfSeason { get; set; }
        /// <summary>The originalLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The originalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalName { get; set; }
#nullable restore
#else
        public string OriginalName { get; set; }
#endif
        /// <summary>The originCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OriginCountry { get; set; }
#nullable restore
#else
        public List<string> OriginCountry { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public double? Popularity { get; set; }
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The productionCompanies property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>? ProductionCompanies { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany> ProductionCompanies { get; set; }
#endif
        /// <summary>The productionCountries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries>? ProductionCountries { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries> ProductionCountries { get; set; }
#endif
        /// <summary>The seasons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Season>? Seasons { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Season> Seasons { get; set; }
#endif
        /// <summary>The spokenLanguages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>? SpokenLanguages { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage> SpokenLanguages { get; set; }
#endif
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The tagline property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tagline { get; set; }
#nullable restore
#else
        public string Tagline { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The voteAverage property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The voteCount property</summary>
        public double? VoteCount { get; set; }
        /// <summary>The watchProviders property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? WatchProviders { get; set; }
#nullable restore
#else
        public UntypedNode WatchProviders { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails"/> and sets the default values.
        /// </summary>
        public TvDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TvDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TvDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "contentRatings", n => { ContentRatings = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings>(global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings.CreateFromDiscriminatorValue); } },
                { "createdBy", n => { CreatedBy = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy>(global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "credits", n => { Credits = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits>(global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits.CreateFromDiscriminatorValue); } },
                { "episodeRunTime", n => { EpisodeRunTime = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "externalIds", n => { ExternalIds = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ExternalIds>(global::FluentFin.Plugins.Jellyseer.Models.ExternalIds.CreateFromDiscriminatorValue); } },
                { "firstAirDate", n => { FirstAirDate = n.GetStringValue(); } },
                { "genres", n => { Genres = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Genre>(global::FluentFin.Plugins.Jellyseer.Models.Genre.CreateFromDiscriminatorValue)?.AsList(); } },
                { "homepage", n => { Homepage = n.GetStringValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "inProduction", n => { InProduction = n.GetBoolValue(); } },
                { "keywords", n => { Keywords = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Keyword>(global::FluentFin.Plugins.Jellyseer.Models.Keyword.CreateFromDiscriminatorValue)?.AsList(); } },
                { "languages", n => { Languages = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "lastAirDate", n => { LastAirDate = n.GetStringValue(); } },
                { "lastEpisodeToAir", n => { LastEpisodeToAir = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Episode>(global::FluentFin.Plugins.Jellyseer.Models.Episode.CreateFromDiscriminatorValue); } },
                { "mediaInfo", n => { MediaInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "networks", n => { Networks = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>(global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany.CreateFromDiscriminatorValue)?.AsList(); } },
                { "nextEpisodeToAir", n => { NextEpisodeToAir = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Episode>(global::FluentFin.Plugins.Jellyseer.Models.Episode.CreateFromDiscriminatorValue); } },
                { "numberOfEpisodes", n => { NumberOfEpisodes = n.GetDoubleValue(); } },
                { "numberOfSeason", n => { NumberOfSeason = n.GetDoubleValue(); } },
                { "originCountry", n => { OriginCountry = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "originalLanguage", n => { OriginalLanguage = n.GetStringValue(); } },
                { "originalName", n => { OriginalName = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetDoubleValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
                { "productionCompanies", n => { ProductionCompanies = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>(global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany.CreateFromDiscriminatorValue)?.AsList(); } },
                { "productionCountries", n => { ProductionCountries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries>(global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries.CreateFromDiscriminatorValue)?.AsList(); } },
                { "seasons", n => { Seasons = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Season>(global::FluentFin.Plugins.Jellyseer.Models.Season.CreateFromDiscriminatorValue)?.AsList(); } },
                { "spokenLanguages", n => { SpokenLanguages = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>(global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetStringValue(); } },
                { "tagline", n => { Tagline = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "voteAverage", n => { VoteAverage = n.GetDoubleValue(); } },
                { "voteCount", n => { VoteCount = n.GetDoubleValue(); } },
                { "watchProviders", n => { WatchProviders = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings>("contentRatings", ContentRatings);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy>("createdBy", CreatedBy);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits>("credits", Credits);
            writer.WriteCollectionOfPrimitiveValues<double?>("episodeRunTime", EpisodeRunTime);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ExternalIds>("externalIds", ExternalIds);
            writer.WriteStringValue("firstAirDate", FirstAirDate);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Genre>("genres", Genres);
            writer.WriteStringValue("homepage", Homepage);
            writer.WriteDoubleValue("id", Id);
            writer.WriteBoolValue("inProduction", InProduction);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Keyword>("keywords", Keywords);
            writer.WriteCollectionOfPrimitiveValues<string>("languages", Languages);
            writer.WriteStringValue("lastAirDate", LastAirDate);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Episode>("lastEpisodeToAir", LastEpisodeToAir);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("mediaInfo", MediaInfo);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>("networks", Networks);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Episode>("nextEpisodeToAir", NextEpisodeToAir);
            writer.WriteDoubleValue("numberOfEpisodes", NumberOfEpisodes);
            writer.WriteDoubleValue("numberOfSeason", NumberOfSeason);
            writer.WriteStringValue("originalLanguage", OriginalLanguage);
            writer.WriteStringValue("originalName", OriginalName);
            writer.WriteCollectionOfPrimitiveValues<string>("originCountry", OriginCountry);
            writer.WriteStringValue("overview", Overview);
            writer.WriteDoubleValue("popularity", Popularity);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>("productionCompanies", ProductionCompanies);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries>("productionCountries", ProductionCountries);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Season>("seasons", Seasons);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>("spokenLanguages", SpokenLanguages);
            writer.WriteStringValue("status", Status);
            writer.WriteStringValue("tagline", Tagline);
            writer.WriteStringValue("type", Type);
            writer.WriteDoubleValue("voteAverage", VoteAverage);
            writer.WriteDoubleValue("voteCount", VoteCount);
            writer.WriteObjectValue<UntypedNode>("watchProviders", WatchProviders);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvDetails_contentRatings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings"/> and sets the default values.
        /// </summary>
        public TvDetails_contentRatings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results>(global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvDetails_contentRatings_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The iso_3166_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso31661 { get; set; }
#nullable restore
#else
        public string Iso31661 { get; set; }
#endif
        /// <summary>The rating property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rating { get; set; }
#nullable restore
#else
        public string Rating { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results"/> and sets the default values.
        /// </summary>
        public TvDetails_contentRatings_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TvDetails_contentRatings_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "iso_3166_1", n => { Iso31661 = n.GetStringValue(); } },
                { "rating", n => { Rating = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("iso_3166_1", Iso31661);
            writer.WriteStringValue("rating", Rating);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvDetails_createdBy : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The gender property</summary>
        public double? Gender { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The profilePath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProfilePath { get; set; }
#nullable restore
#else
        public string ProfilePath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy"/> and sets the default values.
        /// </summary>
        public TvDetails_createdBy()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TvDetails_createdBy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "gender", n => { Gender = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "profilePath", n => { ProfilePath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("gender", Gender);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("profilePath", ProfilePath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvDetails_credits : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cast property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Cast>? Cast { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Cast> Cast { get; set; }
#endif
        /// <summary>The crew property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Crew>? Crew { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Crew> Crew { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits"/> and sets the default values.
        /// </summary>
        public TvDetails_credits()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TvDetails_credits();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cast", n => { Cast = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Cast>(global::FluentFin.Plugins.Jellyseer.Models.Cast.CreateFromDiscriminatorValue)?.AsList(); } },
                { "crew", n => { Crew = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Crew>(global::FluentFin.Plugins.Jellyseer.Models.Crew.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Cast>("cast", Cast);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Crew>("crew", Crew);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvDetails_productionCountries : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The iso_3166_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso31661 { get; set; }
#nullable restore
#else
        public string Iso31661 { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries"/> and sets the default values.
        /// </summary>
        public TvDetails_productionCountries()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TvDetails_productionCountries();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "iso_3166_1", n => { Iso31661 = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("iso_3166_1", Iso31661);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvResult : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backdropPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BackdropPath { get; set; }
#nullable restore
#else
        public string BackdropPath { get; set; }
#endif
        /// <summary>The firstAirDate property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstAirDate { get; set; }
#nullable restore
#else
        public string FirstAirDate { get; set; }
#endif
        /// <summary>The genreIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? GenreIds { get; set; }
#nullable restore
#else
        public List<double?> GenreIds { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The mediaInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? MediaInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo MediaInfo { get; set; }
#endif
        /// <summary>The mediaType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaType { get; set; }
#nullable restore
#else
        public string MediaType { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The originalLanguage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalLanguage { get; set; }
#nullable restore
#else
        public string OriginalLanguage { get; set; }
#endif
        /// <summary>The originalName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalName { get; set; }
#nullable restore
#else
        public string OriginalName { get; set; }
#endif
        /// <summary>The originCountry property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? OriginCountry { get; set; }
#nullable restore
#else
        public List<string> OriginCountry { get; set; }
#endif
        /// <summary>The overview property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Overview { get; set; }
#nullable restore
#else
        public string Overview { get; set; }
#endif
        /// <summary>The popularity property</summary>
        public double? Popularity { get; set; }
        /// <summary>The posterPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PosterPath { get; set; }
#nullable restore
#else
        public string PosterPath { get; set; }
#endif
        /// <summary>The voteAverage property</summary>
        public double? VoteAverage { get; set; }
        /// <summary>The voteCount property</summary>
        public double? VoteCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/> and sets the default values.
        /// </summary>
        public TvResult()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.TvResult CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.TvResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backdropPath", n => { BackdropPath = n.GetStringValue(); } },
                { "firstAirDate", n => { FirstAirDate = n.GetStringValue(); } },
                { "genreIds", n => { GenreIds = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "mediaInfo", n => { MediaInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "mediaType", n => { MediaType = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "originCountry", n => { OriginCountry = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "originalLanguage", n => { OriginalLanguage = n.GetStringValue(); } },
                { "originalName", n => { OriginalName = n.GetStringValue(); } },
                { "overview", n => { Overview = n.GetStringValue(); } },
                { "popularity", n => { Popularity = n.GetDoubleValue(); } },
                { "posterPath", n => { PosterPath = n.GetStringValue(); } },
                { "voteAverage", n => { VoteAverage = n.GetDoubleValue(); } },
                { "voteCount", n => { VoteCount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("backdropPath", BackdropPath);
            writer.WriteStringValue("firstAirDate", FirstAirDate);
            writer.WriteCollectionOfPrimitiveValues<double?>("genreIds", GenreIds);
            writer.WriteDoubleValue("id", Id);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("mediaInfo", MediaInfo);
            writer.WriteStringValue("mediaType", MediaType);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("originalLanguage", OriginalLanguage);
            writer.WriteStringValue("originalName", OriginalName);
            writer.WriteCollectionOfPrimitiveValues<string>("originCountry", OriginCountry);
            writer.WriteStringValue("overview", Overview);
            writer.WriteDoubleValue("popularity", Popularity);
            writer.WriteStringValue("posterPath", PosterPath);
            writer.WriteDoubleValue("voteAverage", VoteAverage);
            writer.WriteDoubleValue("voteCount", VoteCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class User : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The avatar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Avatar { get; private set; }
#nullable restore
#else
        public string Avatar { get; private set; }
#endif
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; private set; }
#nullable restore
#else
        public string CreatedAt { get; private set; }
#endif
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; private set; }
#nullable restore
#else
        public string Email { get; private set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; private set; }
        /// <summary>The jellyfinAuthToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JellyfinAuthToken { get; private set; }
#nullable restore
#else
        public string JellyfinAuthToken { get; private set; }
#endif
        /// <summary>The permissions property</summary>
        public double? Permissions { get; set; }
        /// <summary>The plexToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlexToken { get; private set; }
#nullable restore
#else
        public string PlexToken { get; private set; }
#endif
        /// <summary>The plexUsername property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PlexUsername { get; private set; }
#nullable restore
#else
        public string PlexUsername { get; private set; }
#endif
        /// <summary>The requestCount property</summary>
        public double? RequestCount { get; private set; }
        /// <summary>The updatedAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; private set; }
#nullable restore
#else
        public string UpdatedAt { get; private set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>The userType property</summary>
        public int? UserType { get; private set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/> and sets the default values.
        /// </summary>
        public User()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.User CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.User();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "avatar", n => { Avatar = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "jellyfinAuthToken", n => { JellyfinAuthToken = n.GetStringValue(); } },
                { "permissions", n => { Permissions = n.GetDoubleValue(); } },
                { "plexToken", n => { PlexToken = n.GetStringValue(); } },
                { "plexUsername", n => { PlexUsername = n.GetStringValue(); } },
                { "requestCount", n => { RequestCount = n.GetDoubleValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetStringValue(); } },
                { "userType", n => { UserType = n.GetIntValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("permissions", Permissions);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserSettingsNotifications : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The discordEnabled property</summary>
        public bool? DiscordEnabled { get; set; }
        /// <summary>The discordEnabledTypes property</summary>
        public double? DiscordEnabledTypes { get; set; }
        /// <summary>The discordId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DiscordId { get; set; }
#nullable restore
#else
        public string DiscordId { get; set; }
#endif
        /// <summary>The emailEnabled property</summary>
        public bool? EmailEnabled { get; set; }
        /// <summary>The notificationTypes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes? NotificationTypes { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes NotificationTypes { get; set; }
#endif
        /// <summary>The pgpKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PgpKey { get; set; }
#nullable restore
#else
        public string PgpKey { get; set; }
#endif
        /// <summary>The pushbulletAccessToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PushbulletAccessToken { get; set; }
#nullable restore
#else
        public string PushbulletAccessToken { get; set; }
#endif
        /// <summary>The pushoverApplicationToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PushoverApplicationToken { get; set; }
#nullable restore
#else
        public string PushoverApplicationToken { get; set; }
#endif
        /// <summary>The pushoverSound property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PushoverSound { get; set; }
#nullable restore
#else
        public string PushoverSound { get; set; }
#endif
        /// <summary>The pushoverUserKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PushoverUserKey { get; set; }
#nullable restore
#else
        public string PushoverUserKey { get; set; }
#endif
        /// <summary>The telegramBotUsername property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TelegramBotUsername { get; set; }
#nullable restore
#else
        public string TelegramBotUsername { get; set; }
#endif
        /// <summary>The telegramChatId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TelegramChatId { get; set; }
#nullable restore
#else
        public string TelegramChatId { get; set; }
#endif
        /// <summary>The telegramEnabled property</summary>
        public bool? TelegramEnabled { get; set; }
        /// <summary>The telegramMessageThreadId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TelegramMessageThreadId { get; set; }
#nullable restore
#else
        public string TelegramMessageThreadId { get; set; }
#endif
        /// <summary>The telegramSendSilently property</summary>
        public bool? TelegramSendSilently { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications"/> and sets the default values.
        /// </summary>
        public UserSettingsNotifications()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "discordEnabled", n => { DiscordEnabled = n.GetBoolValue(); } },
                { "discordEnabledTypes", n => { DiscordEnabledTypes = n.GetDoubleValue(); } },
                { "discordId", n => { DiscordId = n.GetStringValue(); } },
                { "emailEnabled", n => { EmailEnabled = n.GetBoolValue(); } },
                { "notificationTypes", n => { NotificationTypes = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes>(global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes.CreateFromDiscriminatorValue); } },
                { "pgpKey", n => { PgpKey = n.GetStringValue(); } },
                { "pushbulletAccessToken", n => { PushbulletAccessToken = n.GetStringValue(); } },
                { "pushoverApplicationToken", n => { PushoverApplicationToken = n.GetStringValue(); } },
                { "pushoverSound", n => { PushoverSound = n.GetStringValue(); } },
                { "pushoverUserKey", n => { PushoverUserKey = n.GetStringValue(); } },
                { "telegramBotUsername", n => { TelegramBotUsername = n.GetStringValue(); } },
                { "telegramChatId", n => { TelegramChatId = n.GetStringValue(); } },
                { "telegramEnabled", n => { TelegramEnabled = n.GetBoolValue(); } },
                { "telegramMessageThreadId", n => { TelegramMessageThreadId = n.GetStringValue(); } },
                { "telegramSendSilently", n => { TelegramSendSilently = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("discordEnabled", DiscordEnabled);
            writer.WriteDoubleValue("discordEnabledTypes", DiscordEnabledTypes);
            writer.WriteStringValue("discordId", DiscordId);
            writer.WriteBoolValue("emailEnabled", EmailEnabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.NotificationAgentTypes>("notificationTypes", NotificationTypes);
            writer.WriteStringValue("pgpKey", PgpKey);
            writer.WriteStringValue("pushbulletAccessToken", PushbulletAccessToken);
            writer.WriteStringValue("pushoverApplicationToken", PushoverApplicationToken);
            writer.WriteStringValue("pushoverSound", PushoverSound);
            writer.WriteStringValue("pushoverUserKey", PushoverUserKey);
            writer.WriteStringValue("telegramBotUsername", TelegramBotUsername);
            writer.WriteStringValue("telegramChatId", TelegramChatId);
            writer.WriteBoolValue("telegramEnabled", TelegramEnabled);
            writer.WriteStringValue("telegramMessageThreadId", TelegramMessageThreadId);
            writer.WriteBoolValue("telegramSendSilently", TelegramSendSilently);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Watchlist : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; private set; }
#nullable restore
#else
        public string CreatedAt { get; private set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; private set; }
        /// <summary>The media property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo? Media { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.MediaInfo Media { get; set; }
#endif
        /// <summary>The ratingKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RatingKey { get; set; }
#nullable restore
#else
        public string RatingKey { get; set; }
#endif
        /// <summary>The requestedBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.User? RequestedBy { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.User RequestedBy { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The tmdbId property</summary>
        public double? TmdbId { get; set; }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The updatedAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdatedAt { get; private set; }
#nullable restore
#else
        public string UpdatedAt { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.Watchlist"/> and sets the default values.
        /// </summary>
        public Watchlist()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Watchlist"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.Watchlist CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.Watchlist();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAt", n => { CreatedAt = n.GetStringValue(); } },
                { "id", n => { Id = n.GetIntValue(); } },
                { "media", n => { Media = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue); } },
                { "ratingKey", n => { RatingKey = n.GetStringValue(); } },
                { "requestedBy", n => { RequestedBy = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "tmdbId", n => { TmdbId = n.GetDoubleValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("media", Media);
            writer.WriteStringValue("ratingKey", RatingKey);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.User>("requestedBy", RequestedBy);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("tmdbId", TmdbId);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchProviderDetails : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The displayPriority property</summary>
        public double? DisplayPriority { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The logoPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoPath { get; set; }
#nullable restore
#else
        public string LogoPath { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails"/> and sets the default values.
        /// </summary>
        public WatchProviderDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "displayPriority", n => { DisplayPriority = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "logoPath", n => { LogoPath = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("displayPriority", DisplayPriority);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("logoPath", LogoPath);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchProviderRegion : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The english_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnglishName { get; set; }
#nullable restore
#else
        public string EnglishName { get; set; }
#endif
        /// <summary>The iso_3166_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso31661 { get; set; }
#nullable restore
#else
        public string Iso31661 { get; set; }
#endif
        /// <summary>The native_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NativeName { get; set; }
#nullable restore
#else
        public string NativeName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion"/> and sets the default values.
        /// </summary>
        public WatchProviderRegion()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "english_name", n => { EnglishName = n.GetStringValue(); } },
                { "iso_3166_1", n => { Iso31661 = n.GetStringValue(); } },
                { "native_name", n => { NativeName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("english_name", EnglishName);
            writer.WriteStringValue("iso_3166_1", Iso31661);
            writer.WriteStringValue("native_name", NativeName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WebhookSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The options property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options? Options { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options Options { get; set; }
#endif
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings"/> and sets the default values.
        /// </summary>
        public WebhookSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "options", n => { Options = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options>(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options.CreateFromDiscriminatorValue); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options>("options", Options);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WebhookSettings_options : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authHeader property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthHeader { get; set; }
#nullable restore
#else
        public string AuthHeader { get; set; }
#endif
        /// <summary>The jsonPayload property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JsonPayload { get; set; }
#nullable restore
#else
        public string JsonPayload { get; set; }
#endif
        /// <summary>The webhookUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebhookUrl { get; set; }
#nullable restore
#else
        public string WebhookUrl { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options"/> and sets the default values.
        /// </summary>
        public WebhookSettings_options()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authHeader", n => { AuthHeader = n.GetStringValue(); } },
                { "jsonPayload", n => { JsonPayload = n.GetStringValue(); } },
                { "webhookUrl", n => { WebhookUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("authHeader", AuthHeader);
            writer.WriteStringValue("jsonPayload", JsonPayload);
            writer.WriteStringValue("webhookUrl", WebhookUrl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WebPushSettings : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The enabled property</summary>
        public bool? Enabled { get; set; }
        /// <summary>The types property</summary>
        public double? Types { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings"/> and sets the default values.
        /// </summary>
        public WebPushSettings()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "types", n => { Types = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteDoubleValue("types", Types);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie
{
    /// <summary>
    /// Builds and executes requests for operations under \movie
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MovieRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.movie.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("movieId", position);
                return new global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.movie.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("movieId", position);
                return new global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Network
{
    /// <summary>
    /// Builds and executes requests for operations under \network
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NetworkRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.network.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("networkId", position);
                return new global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.network.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("networkId", position);
                return new global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Network.NetworkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NetworkRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/network", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Network.NetworkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NetworkRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/network", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.OverrideRule
{
    /// <summary>
    /// Builds and executes requests for operations under \overrideRule
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OverrideRuleRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.overrideRule.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("ruleId", position);
                return new global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.overrideRule.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("ruleId", position);
                return new global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.OverrideRuleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OverrideRuleRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/overrideRule", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.OverrideRuleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public OverrideRuleRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/overrideRule", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all override rules with their conditions and settings
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.OverrideRule&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.OverrideRule.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates a new Override Rule from the request body.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.OverrideRule&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.OverrideRule.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of all override rules with their conditions and settings
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new Override Rule from the request body.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.OverrideRuleRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.OverrideRule.OverrideRuleRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.OverrideRule.OverrideRuleRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OverrideRuleRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class OverrideRuleRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Person
{
    /// <summary>
    /// Builds and executes requests for operations under \person
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PersonRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.person.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("personId", position);
                return new global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.person.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("personId", position);
                return new global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Person.PersonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PersonRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/person", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Person.PersonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PersonRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/person", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Regions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Regions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The english_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnglishName { get; set; }
#nullable restore
#else
        public string EnglishName { get; set; }
#endif
        /// <summary>The iso_3166_1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Iso31661 { get; set; }
#nullable restore
#else
        public string Iso31661 { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Regions.Regions"/> and sets the default values.
        /// </summary>
        public Regions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Regions.Regions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Regions.Regions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Regions.Regions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "english_name", n => { EnglishName = n.GetStringValue(); } },
                { "iso_3166_1", n => { Iso31661 = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("english_name", EnglishName);
            writer.WriteStringValue("iso_3166_1", Iso31661);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Regions
{
    /// <summary>
    /// Builds and executes requests for operations under \regions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RegionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Regions.RegionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/regions", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Regions.RegionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/regions", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of regions in a JSON object.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Regions.Regions&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Regions.Regions>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Regions.Regions>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Regions.Regions>(requestInfo, global::FluentFin.Plugins.Jellyseer.Regions.Regions.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of regions in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Regions.RegionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Regions.RegionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Regions.RegionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RegionsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Request
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetFilterQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "all")]
        #pragma warning disable CS1591
        All,
        #pragma warning restore CS1591
        [EnumMember(Value = "approved")]
        #pragma warning disable CS1591
        Approved,
        #pragma warning restore CS1591
        [EnumMember(Value = "available")]
        #pragma warning disable CS1591
        Available,
        #pragma warning restore CS1591
        [EnumMember(Value = "pending")]
        #pragma warning disable CS1591
        Pending,
        #pragma warning restore CS1591
        [EnumMember(Value = "processing")]
        #pragma warning disable CS1591
        Processing,
        #pragma warning restore CS1591
        [EnumMember(Value = "unavailable")]
        #pragma warning disable CS1591
        Unavailable,
        #pragma warning restore CS1591
        [EnumMember(Value = "failed")]
        #pragma warning disable CS1591
        Failed,
        #pragma warning restore CS1591
        [EnumMember(Value = "deleted")]
        #pragma warning disable CS1591
        Deleted,
        #pragma warning restore CS1591
        [EnumMember(Value = "completed")]
        #pragma warning disable CS1591
        Completed,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Request
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetSortDirectionQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "asc")]
        #pragma warning disable CS1591
        Asc,
        #pragma warning restore CS1591
        [EnumMember(Value = "desc")]
        #pragma warning disable CS1591
        Desc,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Request
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetSortQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "added")]
        #pragma warning disable CS1591
        Added,
        #pragma warning restore CS1591
        [EnumMember(Value = "modified")]
        #pragma warning disable CS1591
        Modified,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RequestGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The pageInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo? PageInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo PageInfo { get; set; }
#endif
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse"/> and sets the default values.
        /// </summary>
        public RequestGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "pageInfo", n => { PageInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>(global::FluentFin.Plugins.Jellyseer.Models.PageInfo.CreateFromDiscriminatorValue); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>("pageInfo", PageInfo);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RequestPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The is4k property</summary>
        public bool? Is4k { get; set; }
        /// <summary>The languageProfileId property</summary>
        public double? LanguageProfileId { get; set; }
        /// <summary>The mediaId property</summary>
        public double? MediaId { get; set; }
        /// <summary>The mediaType property</summary>
        public global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody_mediaType? MediaType { get; set; }
        /// <summary>The profileId property</summary>
        public double? ProfileId { get; set; }
        /// <summary>The rootFolder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RootFolder { get; set; }
#nullable restore
#else
        public string RootFolder { get; set; }
#endif
        /// <summary>The seasons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons? Seasons { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons Seasons { get; set; }
#endif
        /// <summary>The serverId property</summary>
        public double? ServerId { get; set; }
        /// <summary>The tvdbId property</summary>
        public double? TvdbId { get; set; }
        /// <summary>The userId property</summary>
        public double? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody"/> and sets the default values.
        /// </summary>
        public RequestPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "is4k", n => { Is4k = n.GetBoolValue(); } },
                { "languageProfileId", n => { LanguageProfileId = n.GetDoubleValue(); } },
                { "mediaId", n => { MediaId = n.GetDoubleValue(); } },
                { "mediaType", n => { MediaType = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody_mediaType>(); } },
                { "profileId", n => { ProfileId = n.GetDoubleValue(); } },
                { "rootFolder", n => { RootFolder = n.GetStringValue(); } },
                { "seasons", n => { Seasons = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons>(global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons.CreateFromDiscriminatorValue); } },
                { "serverId", n => { ServerId = n.GetDoubleValue(); } },
                { "tvdbId", n => { TvdbId = n.GetDoubleValue(); } },
                { "userId", n => { UserId = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("is4k", Is4k);
            writer.WriteDoubleValue("languageProfileId", LanguageProfileId);
            writer.WriteDoubleValue("mediaId", MediaId);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody_mediaType>("mediaType", MediaType);
            writer.WriteDoubleValue("profileId", ProfileId);
            writer.WriteStringValue("rootFolder", RootFolder);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons>("seasons", Seasons);
            writer.WriteDoubleValue("serverId", ServerId);
            writer.WriteDoubleValue("tvdbId", TvdbId);
            writer.WriteDoubleValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="string"/>, List&lt;double&gt;
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RequestPostRequestBody_seasons : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type List&lt;double&gt;</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public List<double?>? Double { get; set; }
#nullable restore
#else
            public List<double?> Double { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody.RequestPostRequestBody_seasons();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else if(parseNode.GetCollectionOfPrimitiveValues<double?>()?.AsList() is List<double> doubleValue)
                {
                    result.Double = doubleValue;
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else if(Double != null)
                {
                    writer.WriteCollectionOfPrimitiveValues<double?>(null, Double);
                }
            }
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Request
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RequestPostRequestBody_mediaType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "movie")]
        #pragma warning disable CS1591
        Movie,
        #pragma warning restore CS1591
        [EnumMember(Value = "tv")]
        #pragma warning disable CS1591
        Tv,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request
{
    /// <summary>
    /// Builds and executes requests for operations under \request
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RequestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The count property</summary>
        public global::FluentFin.Plugins.Jellyseer.Request.Count.CountRequestBuilder Count
        {
            get => new global::FluentFin.Plugins.Jellyseer.Request.Count.CountRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.request.item collection</summary>
        /// <param name="position">Request ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("requestId", position);
                return new global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RequestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request{?filter*,requestedBy*,skip*,sort*,sortDirection*,take*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RequestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request{?filter*,requestedBy*,skip*,sort*,sortDirection*,take*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all requests if the user has the `ADMIN` or `MANAGE_REQUESTS` permissions. Otherwise, only the logged-in user&apos;s requests are returned.If the `requestedBy` parameter is specified, only requests from that particular user ID will be returned.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse?> GetAsRequestGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder.RequestRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse> GetAsRequestGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder.RequestRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all requests if the user has the `ADMIN` or `MANAGE_REQUESTS` permissions. Otherwise, only the logged-in user&apos;s requests are returned.If the `requestedBy` parameter is specified, only requests from that particular user ID will be returned.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsRequestGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.RequestResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder.RequestRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.RequestResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder.RequestRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Request.RequestResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Request.RequestResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new request with the provided media ID and type. The `REQUEST` permission is required.If the user has the `ADMIN` or `AUTO_APPROVE` permissions, their request will be auomatically approved.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaRequest"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest?> PostAsync(global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> PostAsync(global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all requests if the user has the `ADMIN` or `MANAGE_REQUESTS` permissions. Otherwise, only the logged-in user&apos;s requests are returned.If the `requestedBy` parameter is specified, only requests from that particular user ID will be returned.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder.RequestRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder.RequestRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new request with the provided media ID and type. The `REQUEST` permission is required.If the user has the `ADMIN` or `AUTO_APPROVE` permissions, their request will be auomatically approved.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Request.RequestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all requests if the user has the `ADMIN` or `MANAGE_REQUESTS` permissions. Otherwise, only the logged-in user&apos;s requests are returned.If the `requestedBy` parameter is specified, only requests from that particular user ID will be returned.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RequestRequestBuilderGetQueryParameters 
        {
            [Obsolete("This property is deprecated, use FilterAsGetFilterQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            [QueryParameter("filter")]
            public global::FluentFin.Plugins.Jellyseer.Request.GetFilterQueryParameterType? FilterAsGetFilterQueryParameterType { get; set; }
            [QueryParameter("requestedBy")]
            public double? RequestedBy { get; set; }
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            [Obsolete("This property is deprecated, use SortAsGetSortQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            [QueryParameter("sort")]
            public global::FluentFin.Plugins.Jellyseer.Request.GetSortQueryParameterType? SortAsGetSortQueryParameterType { get; set; }
            [Obsolete("This property is deprecated, use SortDirectionAsGetSortDirectionQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortDirection")]
            public string? SortDirection { get; set; }
#nullable restore
#else
            [QueryParameter("sortDirection")]
            public string SortDirection { get; set; }
#endif
            [QueryParameter("sortDirection")]
            public global::FluentFin.Plugins.Jellyseer.Request.GetSortDirectionQueryParameterType? SortDirectionAsGetSortDirectionQueryParameterType { get; set; }
            [QueryParameter("take")]
            public double? Take { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RequestRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Request.RequestRequestBuilder.RequestRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RequestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request
{
    [Obsolete("This class is obsolete. Use RequestGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RequestResponse : global::FluentFin.Plugins.Jellyseer.Request.RequestGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.RequestResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Request.RequestResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Request.RequestResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SearchGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse"/> and sets the default values.
        /// </summary>
        public SearchGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results>(global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/>, <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonResult"/>, <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SearchGetResponse_results : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.MovieResult? MovieResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.MovieResult MovieResult { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.PersonResult? PersonResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.PersonResult PersonResult { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.TvResult? TvResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.TvResult TvResult { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.SearchGetResponse_results();
                result.MovieResult = new global::FluentFin.Plugins.Jellyseer.Models.MovieResult();
                result.PersonResult = new global::FluentFin.Plugins.Jellyseer.Models.PersonResult();
                result.TvResult = new global::FluentFin.Plugins.Jellyseer.Models.TvResult();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(MovieResult != null || PersonResult != null || TvResult != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(MovieResult, PersonResult, TvResult);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(null, MovieResult, PersonResult, TvResult);
            }
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search
{
    /// <summary>
    /// Builds and executes requests for operations under \search
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SearchRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The company property</summary>
        public global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder Company
        {
            get => new global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The keyword property</summary>
        public global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder Keyword
        {
            get => new global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search?query={query}{&language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SearchRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search?query={query}{&language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of movies, TV shows, or people a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse?> GetAsSearchGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse> GetAsSearchGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies, TV shows, or people a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsSearchGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.SearchResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.SearchResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Search.SearchResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Search.SearchResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies, TV shows, or people a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of movies, TV shows, or people a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SearchRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SearchRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.SearchRequestBuilder.SearchRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search
{
    [Obsolete("This class is obsolete. Use SearchGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SearchResponse : global::FluentFin.Plugins.Jellyseer.Search.SearchGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.SearchResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Search.SearchResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Search.SearchResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service
{
    /// <summary>
    /// Builds and executes requests for operations under \service
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ServiceRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The radarr property</summary>
        public global::FluentFin.Plugins.Jellyseer.Service.Radarr.RadarrRequestBuilder Radarr
        {
            get => new global::FluentFin.Plugins.Jellyseer.Service.Radarr.RadarrRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sonarr property</summary>
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.SonarrRequestBuilder Sonarr
        {
            get => new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.SonarrRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.ServiceRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ServiceRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.ServiceRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ServiceRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings
{
    /// <summary>
    /// Builds and executes requests for operations under \settings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SettingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The about property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.About.AboutRequestBuilder About
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.About.AboutRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cache property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheRequestBuilder Cache
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The discover property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.DiscoverRequestBuilder Discover
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Discover.DiscoverRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The initialize property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Initialize.InitializeRequestBuilder Initialize
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Initialize.InitializeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jellyfin property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.JellyfinRequestBuilder Jellyfin
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.JellyfinRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The jobs property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.JobsRequestBuilder Jobs
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.JobsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logs property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder Logs
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The main property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Main.MainRequestBuilder Main
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Main.MainRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The network property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Network.NetworkRequestBuilder Network
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Network.NetworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The notifications property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.NotificationsRequestBuilder Notifications
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.NotificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The plex property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.PlexRequestBuilder Plex
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Plex.PlexRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The public property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Public.PublicRequestBuilder Public
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Public.PublicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The radarr property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.RadarrRequestBuilder Radarr
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.RadarrRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sonarr property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.SonarrRequestBuilder Sonarr
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.SonarrRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tautulli property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Tautulli.TautulliRequestBuilder Tautulli
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Tautulli.TautulliRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.SettingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SettingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.SettingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SettingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Status
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class StatusGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The commitsBehind property</summary>
        public double? CommitsBehind { get; set; }
        /// <summary>The commitTag property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CommitTag { get; set; }
#nullable restore
#else
        public string CommitTag { get; set; }
#endif
        /// <summary>The restartRequired property</summary>
        public bool? RestartRequired { get; set; }
        /// <summary>The updateAvailable property</summary>
        public bool? UpdateAvailable { get; set; }
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse"/> and sets the default values.
        /// </summary>
        public StatusGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "commitTag", n => { CommitTag = n.GetStringValue(); } },
                { "commitsBehind", n => { CommitsBehind = n.GetDoubleValue(); } },
                { "restartRequired", n => { RestartRequired = n.GetBoolValue(); } },
                { "updateAvailable", n => { UpdateAvailable = n.GetBoolValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("commitsBehind", CommitsBehind);
            writer.WriteStringValue("commitTag", CommitTag);
            writer.WriteBoolValue("restartRequired", RestartRequired);
            writer.WriteBoolValue("updateAvailable", UpdateAvailable);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Status
{
    /// <summary>
    /// Builds and executes requests for operations under \status
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StatusRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The appdata property</summary>
        public global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataRequestBuilder Appdata
        {
            get => new global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatusRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/status", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatusRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/status", rawUrl)
        {
        }
        /// <summary>
        /// Returns the current Jellyseerr status in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse?> GetAsStatusGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse> GetAsStatusGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the current Jellyseerr status in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsStatusGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.StatusResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.StatusResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Status.StatusResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Status.StatusResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the current Jellyseerr status in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Status.StatusRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Status.StatusRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StatusRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Status
{
    [Obsolete("This class is obsolete. Use StatusGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class StatusResponse : global::FluentFin.Plugins.Jellyseer.Status.StatusGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.StatusResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Status.StatusResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Status.StatusResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Studio
{
    /// <summary>
    /// Builds and executes requests for operations under \studio
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StudioRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.studio.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("studioId", position);
                return new global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.studio.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("studioId", position);
                return new global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Studio.StudioRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StudioRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/studio", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Studio.StudioRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StudioRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/studio", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv
{
    /// <summary>
    /// Builds and executes requests for operations under \tv
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TvRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.tv.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("tvId", position);
                return new global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.tv.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("tvId", position);
                return new global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.User
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetSortQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "created")]
        #pragma warning disable CS1591
        Created,
        #pragma warning restore CS1591
        [EnumMember(Value = "updated")]
        #pragma warning disable CS1591
        Updated,
        #pragma warning restore CS1591
        [EnumMember(Value = "requests")]
        #pragma warning disable CS1591
        Requests,
        #pragma warning restore CS1591
        [EnumMember(Value = "displayname")]
        #pragma warning disable CS1591
        Displayname,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The pageInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo? PageInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo PageInfo { get; set; }
#endif
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.User>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.User> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.UserGetResponse"/> and sets the default values.
        /// </summary>
        public UserGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.UserGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.UserGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.UserGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "pageInfo", n => { PageInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>(global::FluentFin.Plugins.Jellyseer.Models.PageInfo.CreateFromDiscriminatorValue); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>("pageInfo", PageInfo);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.User>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The permissions property</summary>
        public double? Permissions { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody"/> and sets the default values.
        /// </summary>
        public UserPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "email", n => { Email = n.GetStringValue(); } },
                { "permissions", n => { Permissions = n.GetDoubleValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("email", Email);
            writer.WriteDoubleValue("permissions", Permissions);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserPutRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ids property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<int?>? Ids { get; set; }
#nullable restore
#else
        public List<int?> Ids { get; set; }
#endif
        /// <summary>The permissions property</summary>
        public int? Permissions { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody"/> and sets the default values.
        /// </summary>
        public UserPutRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ids", n => { Ids = n.GetCollectionOfPrimitiveValues<int?>()?.AsList(); } },
                { "permissions", n => { Permissions = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<int?>("ids", Ids);
            writer.WriteIntValue("permissions", Permissions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User
{
    /// <summary>
    /// Builds and executes requests for operations under \user
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UserRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The importFromJellyfin property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinRequestBuilder ImportFromJellyfin
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The importFromPlex property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexRequestBuilder ImportFromPlex
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The registerPushSubscription property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionRequestBuilder RegisterPushSubscription
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.user.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("userId", position);
                return new global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.user.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("userId", position);
                return new global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UserRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user{?includeIds*,q*,skip*,sort*,take*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UserRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user{?includeIds*,q*,skip*,sort*,take*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns all users in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.UserGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.UserGetResponse?> GetAsUserGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder.UserRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.UserGetResponse> GetAsUserGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder.UserRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.UserGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.UserGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all users in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.UserResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsUserGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.UserResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder.UserRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.UserResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder.UserRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.UserResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.UserResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a new user. Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> PostAsync(global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> PostAsync(global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update users with given IDs with provided values in request `body.settings`. You cannot update users&apos; Plex tokens through this request.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.User&gt;</returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.User>?> PutAsync(global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.User>> PutAsync(global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns all users in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder.UserRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder.UserRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new user. Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.UserPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Update users with given IDs with provided values in request `body.settings`. You cannot update users&apos; Plex tokens through this request.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.User.UserPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns all users in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UserRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("includeIds")]
            public string? IncludeIds { get; set; }
#nullable restore
#else
            [QueryParameter("includeIds")]
            public string IncludeIds { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("q")]
            public string? Q { get; set; }
#nullable restore
#else
            [QueryParameter("q")]
            public string Q { get; set; }
#endif
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            [Obsolete("This property is deprecated, use SortAsGetSortQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            [QueryParameter("sort")]
            public global::FluentFin.Plugins.Jellyseer.User.GetSortQueryParameterType? SortAsGetSortQueryParameterType { get; set; }
            [QueryParameter("take")]
            public double? Take { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UserRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.UserRequestBuilder.UserRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UserRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UserRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User
{
    [Obsolete("This class is obsolete. Use UserGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UserResponse : global::FluentFin.Plugins.Jellyseer.User.UserGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.UserResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.UserResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.UserResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Watchlist
{
    /// <summary>
    /// Builds and executes requests for operations under \watchlist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WatchlistRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.watchlist.item collection</summary>
        /// <param name="position">tmdbId ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("tmdbId", position);
                return new global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchlist.WatchlistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchlist", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchlist.WatchlistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchlist", rawUrl)
        {
        }
        /// <summary>
        /// Add media to watchlist
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Watchlist"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Watchlist?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.Watchlist body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Watchlist> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.Watchlist body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Watchlist>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Watchlist.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add media to watchlist
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.Watchlist body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.Watchlist body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Watchlist.WatchlistRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Watchlist.WatchlistRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Watchlist.WatchlistRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WatchlistRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Watchproviders
{
    /// <summary>
    /// Builds and executes requests for operations under \watchproviders
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WatchprovidersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The movies property</summary>
        public global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder Movies
        {
            get => new global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The regions property</summary>
        public global::FluentFin.Plugins.Jellyseer.Watchproviders.Regions.RegionsRequestBuilder Regions
        {
            get => new global::FluentFin.Plugins.Jellyseer.Watchproviders.Regions.RegionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tv property</summary>
        public global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder Tv
        {
            get => new global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.WatchprovidersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchprovidersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.WatchprovidersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchprovidersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Jellyfin
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class JellyfinPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The serverType property</summary>
        public double? ServerType { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody"/> and sets the default values.
        /// </summary>
        public JellyfinPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "email", n => { Email = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "serverType", n => { ServerType = n.GetDoubleValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteStringValue("password", Password);
            writer.WriteDoubleValue("serverType", ServerType);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Jellyfin
{
    /// <summary>
    /// Builds and executes requests for operations under \auth\jellyfin
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class JellyfinRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JellyfinRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/jellyfin", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JellyfinRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/jellyfin", rawUrl)
        {
        }
        /// <summary>
        /// Takes the user&apos;s username and password to log the user in. Generates a session cookie for use in further requests. If the user does not exist, and there are no other users, then a user will be created with full admin privileges. If a user logs in with access to the Jellyfin server, they will also have an account created, but without any permissions.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Takes the user&apos;s username and password to log the user in. Generates a session cookie for use in further requests. If the user does not exist, and there are no other users, then a user will be created with full admin privileges. If a user logs in with access to the Jellyfin server, they will also have an account created, but without any permissions.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Auth.Jellyfin.JellyfinRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class JellyfinRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Local
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LocalPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody"/> and sets the default values.
        /// </summary>
        public LocalPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "email", n => { Email = n.GetStringValue(); } },
                { "password", n => { Password = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("password", Password);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Local
{
    /// <summary>
    /// Builds and executes requests for operations under \auth\local
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LocalRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LocalRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/local", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LocalRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/local", rawUrl)
        {
        }
        /// <summary>
        /// Takes an `email` and a `password` to log the user in. Generates a session cookie for use in further requests.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Takes an `email` and a `password` to log the user in. Generates a session cookie for use in further requests.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Auth.Local.LocalRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LocalRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Logout
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LogoutPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse"/> and sets the default values.
        /// </summary>
        public LogoutPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "status", n => { Status = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Logout
{
    /// <summary>
    /// Builds and executes requests for operations under \auth\logout
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LogoutRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LogoutRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/logout", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LogoutRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/logout", rawUrl)
        {
        }
        /// <summary>
        /// Completely clear the session cookie and associated values, effectively signing the user out.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse?> PostAsLogoutPostResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse> PostAsLogoutPostResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Completely clear the session cookie and associated values, effectively signing the user out.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsLogoutPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Completely clear the session cookie and associated values, effectively signing the user out.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LogoutRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Logout
{
    [Obsolete("This class is obsolete. Use LogoutPostResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LogoutResponse : global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutPostResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.Logout.LogoutResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Me
{
    /// <summary>
    /// Builds and executes requests for operations under \auth\me
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Me.MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/me", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Me.MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/me", rawUrl)
        {
        }
        /// <summary>
        /// Returns the currently logged-in user.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the currently logged-in user.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Me.MeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Auth.Me.MeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Auth.Me.MeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Plex
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlexPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthToken { get; set; }
#nullable restore
#else
        public string AuthToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody"/> and sets the default values.
        /// </summary>
        public PlexPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authToken", n => { AuthToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("authToken", AuthToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.Plex
{
    /// <summary>
    /// Builds and executes requests for operations under \auth\plex
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PlexRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlexRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/plex", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlexRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/plex", rawUrl)
        {
        }
        /// <summary>
        /// Takes an `authToken` (Plex token) to log the user in. Generates a session cookie for use in further requests. If the user does not exist, and there are no other users, then a user will be created with full admin privileges. If a user logs in with access to the main Plex server, they will also have an account created, but without any permissions.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Takes an `authToken` (Plex token) to log the user in. Generates a session cookie for use in further requests. If the user does not exist, and there are no other users, then a user will be created with full admin privileges. If a user logs in with access to the main Plex server, they will also have an account created, but without any permissions.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Auth.Plex.PlexRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PlexRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ResetPasswordPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody"/> and sets the default values.
        /// </summary>
        public ResetPasswordPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "email", n => { Email = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("email", Email);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ResetPasswordPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse"/> and sets the default values.
        /// </summary>
        public ResetPasswordPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "status", n => { Status = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword
{
    /// <summary>
    /// Builds and executes requests for operations under \auth\reset-password
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ResetPasswordRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.auth.resetPassword.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("guid", position);
                return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResetPasswordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/reset-password", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResetPasswordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/reset-password", rawUrl)
        {
        }
        /// <summary>
        /// Sends a reset password email to the email if the user exists
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse?> PostAsResetPasswordPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse> PostAsResetPasswordPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a reset password email to the email if the user exists
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsResetPasswordPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a reset password email to the email if the user exists
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResetPasswordRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword
{
    [Obsolete("This class is obsolete. Use ResetPasswordPostResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ResetPasswordResponse : global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordPostResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.ResetPasswordResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Blacklist.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \blacklist\{tmdbId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTmdbItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTmdbItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/blacklist/{tmdbId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTmdbItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/blacklist/{tmdbId}", rawUrl)
        {
        }
        /// <summary>
        /// Remove media from blacklist
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get media from blacklist
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Remove media from blacklist
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Get media from blacklist
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Blacklist.Item.WithTmdbItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTmdbItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTmdbItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Certifications.Movie
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CertificationResponse500Error : ApiException, IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The primary error message.</summary>
        public override string Message { get => MessageEscaped ?? string.Empty; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageEscaped { get; set; }
#nullable restore
#else
        public string MessageEscaped { get; set; }
#endif
        /// <summary>The status property</summary>
        public double? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Movie.CertificationResponse500Error"/> and sets the default values.
        /// </summary>
        public CertificationResponse500Error()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Movie.CertificationResponse500Error"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Certifications.Movie.CertificationResponse500Error CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Certifications.Movie.CertificationResponse500Error();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "message", n => { MessageEscaped = n.GetStringValue(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("message", MessageEscaped);
            writer.WriteDoubleValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Certifications.Movie
{
    /// <summary>
    /// Builds and executes requests for operations under \certifications\movie
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MovieRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/certifications/movie", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/certifications/movie", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of movie certifications from TMDB.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::FluentFin.Plugins.Jellyseer.Certifications.Movie.CertificationResponse500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::FluentFin.Plugins.Jellyseer.Certifications.Movie.CertificationResponse500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of movie certifications from TMDB.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Movie.MovieRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Certifications.Movie.MovieRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Certifications.Movie.MovieRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MovieRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Certifications.Tv
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CertificationResponse500Error : ApiException, IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The primary error message.</summary>
        public override string Message { get => MessageEscaped ?? string.Empty; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageEscaped { get; set; }
#nullable restore
#else
        public string MessageEscaped { get; set; }
#endif
        /// <summary>The status property</summary>
        public double? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Tv.CertificationResponse500Error"/> and sets the default values.
        /// </summary>
        public CertificationResponse500Error()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Tv.CertificationResponse500Error"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Certifications.Tv.CertificationResponse500Error CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Certifications.Tv.CertificationResponse500Error();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "message", n => { MessageEscaped = n.GetStringValue(); } },
                { "status", n => { Status = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("message", MessageEscaped);
            writer.WriteDoubleValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Certifications.Tv
{
    /// <summary>
    /// Builds and executes requests for operations under \certifications\tv
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TvRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/certifications/tv", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/certifications/tv", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of TV show certifications from TMDB.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::FluentFin.Plugins.Jellyseer.Certifications.Tv.CertificationResponse500Error">When receiving a 500 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "500", global::FluentFin.Plugins.Jellyseer.Certifications.Tv.CertificationResponse500Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.CertificationResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of TV show certifications from TMDB.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Certifications.Tv.TvRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Certifications.Tv.TvRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Certifications.Tv.TvRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Collection.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \collection\{collectionId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithCollectionItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCollectionItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/collection/{collectionId}{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCollectionItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/collection/{collectionId}{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns full collection details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Collection"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Collection?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder.WithCollectionItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Collection> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder.WithCollectionItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Collection>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Collection.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns full collection details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder.WithCollectionItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder.WithCollectionItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns full collection details in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCollectionItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCollectionItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Collection.Item.WithCollectionItemRequestBuilder.WithCollectionItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Genreslider
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\genreslider
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GenresliderRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The movie property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder Movie
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tv property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder Tv
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.GenresliderRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenresliderRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/genreslider", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.GenresliderRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenresliderRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/genreslider", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Keyword
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\keyword
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class KeywordRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.keyword.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("keywordId", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.keyword.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("keywordId", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.KeywordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public KeywordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/keyword", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.KeywordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public KeywordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/keyword", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Discover.Movies
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetCertificationModeQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "exact")]
        #pragma warning disable CS1591
        Exact,
        #pragma warning restore CS1591
        [EnumMember(Value = "range")]
        #pragma warning disable CS1591
        Range,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MoviesGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse"/> and sets the default values.
        /// </summary>
        public MoviesGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MoviesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The genre property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.GenreRequestBuilder Genre
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.GenreRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The language property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.LanguageRequestBuilder Language
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.LanguageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The studio property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.StudioRequestBuilder Studio
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.StudioRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The upcoming property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder Upcoming
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies{?certification*,certificationCountry*,certificationGte*,certificationLte*,certificationMode*,genre*,keywords*,language*,page*,primaryReleaseDateGte*,primaryReleaseDateLte*,sortBy*,studio*,voteAverageGte*,voteAverageLte*,voteCountGte*,voteCountLte*,watchProviders*,watchRegion*,withRuntimeGte*,withRuntimeLte*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies{?certification*,certificationCountry*,certificationGte*,certificationLte*,certificationMode*,genre*,keywords*,language*,page*,primaryReleaseDateGte*,primaryReleaseDateLte*,sortBy*,studio*,voteAverageGte*,voteAverageLte*,voteCountGte*,voteCountLte*,watchProviders*,watchRegion*,withRuntimeGte*,withRuntimeLte*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse?> GetAsMoviesGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse> GetAsMoviesGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsMoviesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MoviesRequestBuilderGetQueryParameters 
        {
            /// <summary>Exact certification to filter by (used when certificationMode is &apos;exact&apos;)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certification")]
            public string? Certification { get; set; }
#nullable restore
#else
            [QueryParameter("certification")]
            public string Certification { get; set; }
#endif
            /// <summary>Country code for the certification system (e.g., US, GB, CA)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationCountry")]
            public string? CertificationCountry { get; set; }
#nullable restore
#else
            [QueryParameter("certificationCountry")]
            public string CertificationCountry { get; set; }
#endif
            /// <summary>Minimum certification to filter by (used when certificationMode is &apos;range&apos;)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationGte")]
            public string? CertificationGte { get; set; }
#nullable restore
#else
            [QueryParameter("certificationGte")]
            public string CertificationGte { get; set; }
#endif
            /// <summary>Maximum certification to filter by (used when certificationMode is &apos;range&apos;)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationLte")]
            public string? CertificationLte { get; set; }
#nullable restore
#else
            [QueryParameter("certificationLte")]
            public string CertificationLte { get; set; }
#endif
            /// <summary>Determines whether to use exact certification matching or a certification range (internal use only, not sent to TMDB API)</summary>
            [Obsolete("This property is deprecated, use CertificationModeAsGetCertificationModeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationMode")]
            public string? CertificationMode { get; set; }
#nullable restore
#else
            [QueryParameter("certificationMode")]
            public string CertificationMode { get; set; }
#endif
            /// <summary>Determines whether to use exact certification matching or a certification range (internal use only, not sent to TMDB API)</summary>
            [QueryParameter("certificationMode")]
            public global::FluentFin.Plugins.Jellyseer.Discover.Movies.GetCertificationModeQueryParameterType? CertificationModeAsGetCertificationModeQueryParameterType { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("genre")]
            public string? Genre { get; set; }
#nullable restore
#else
            [QueryParameter("genre")]
            public string Genre { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("keywords")]
            public string? Keywords { get; set; }
#nullable restore
#else
            [QueryParameter("keywords")]
            public string Keywords { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("primaryReleaseDateGte")]
            public string? PrimaryReleaseDateGte { get; set; }
#nullable restore
#else
            [QueryParameter("primaryReleaseDateGte")]
            public string PrimaryReleaseDateGte { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("primaryReleaseDateLte")]
            public string? PrimaryReleaseDateLte { get; set; }
#nullable restore
#else
            [QueryParameter("primaryReleaseDateLte")]
            public string PrimaryReleaseDateLte { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public string? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public string SortBy { get; set; }
#endif
            [QueryParameter("studio")]
            public double? Studio { get; set; }
            [QueryParameter("voteAverageGte")]
            public double? VoteAverageGte { get; set; }
            [QueryParameter("voteAverageLte")]
            public double? VoteAverageLte { get; set; }
            [QueryParameter("voteCountGte")]
            public double? VoteCountGte { get; set; }
            [QueryParameter("voteCountLte")]
            public double? VoteCountLte { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("watchProviders")]
            public string? WatchProviders { get; set; }
#nullable restore
#else
            [QueryParameter("watchProviders")]
            public string WatchProviders { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("watchRegion")]
            public string? WatchRegion { get; set; }
#nullable restore
#else
            [QueryParameter("watchRegion")]
            public string WatchRegion { get; set; }
#endif
            [QueryParameter("withRuntimeGte")]
            public double? WithRuntimeGte { get; set; }
            [QueryParameter("withRuntimeLte")]
            public double? WithRuntimeLte { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MoviesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies
{
    [Obsolete("This class is obsolete. Use MoviesGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MoviesResponse : global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.MoviesResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Trending
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TrendingGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse"/> and sets the default values.
        /// </summary>
        public TrendingGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results>(global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/>, <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonResult"/>, <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TrendingGetResponse_results : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.MovieResult? MovieResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.MovieResult MovieResult { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.PersonResult? PersonResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.PersonResult PersonResult { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvResult"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::FluentFin.Plugins.Jellyseer.Models.TvResult? TvResult { get; set; }
#nullable restore
#else
            public global::FluentFin.Plugins.Jellyseer.Models.TvResult TvResult { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.TrendingGetResponse_results();
                result.MovieResult = new global::FluentFin.Plugins.Jellyseer.Models.MovieResult();
                result.PersonResult = new global::FluentFin.Plugins.Jellyseer.Models.PersonResult();
                result.TvResult = new global::FluentFin.Plugins.Jellyseer.Models.TvResult();
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(MovieResult != null || PersonResult != null || TvResult != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(MovieResult, PersonResult, TvResult);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(null, MovieResult, PersonResult, TvResult);
            }
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Trending
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\trending
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TrendingRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TrendingRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/trending{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TrendingRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/trending{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of movies and TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse?> GetAsTrendingGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder.TrendingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse> GetAsTrendingGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder.TrendingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies and TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsTrendingGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder.TrendingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder.TrendingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies and TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder.TrendingRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder.TrendingRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of movies and TV shows in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TrendingRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TrendingRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingRequestBuilder.TrendingRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Trending
{
    [Obsolete("This class is obsolete. Use TrendingGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TrendingResponse : global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Trending.TrendingResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Discover.Tv
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetCertificationModeQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "exact")]
        #pragma warning disable CS1591
        Exact,
        #pragma warning restore CS1591
        [EnumMember(Value = "range")]
        #pragma warning disable CS1591
        Range,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse"/> and sets the default values.
        /// </summary>
        public TvGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(global::FluentFin.Plugins.Jellyseer.Models.TvResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TvRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The genre property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.GenreRequestBuilder Genre
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.GenreRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The language property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.LanguageRequestBuilder Language
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.LanguageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The network property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.NetworkRequestBuilder Network
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.NetworkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The upcoming property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder Upcoming
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv{?certification*,certificationCountry*,certificationGte*,certificationLte*,certificationMode*,firstAirDateGte*,firstAirDateLte*,genre*,keywords*,language*,network*,page*,sortBy*,status*,voteAverageGte*,voteAverageLte*,voteCountGte*,voteCountLte*,watchProviders*,watchRegion*,withRuntimeGte*,withRuntimeLte*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv{?certification*,certificationCountry*,certificationGte*,certificationLte*,certificationMode*,firstAirDateGte*,firstAirDateLte*,genre*,keywords*,language*,network*,page*,sortBy*,status*,voteAverageGte*,voteAverageLte*,voteCountGte*,voteCountLte*,watchProviders*,watchRegion*,withRuntimeGte*,withRuntimeLte*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse?> GetAsTvGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse> GetAsTvGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsTvGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of TV shows in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetQueryParameters 
        {
            /// <summary>Exact certification to filter by (used when certificationMode is &apos;exact&apos;)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certification")]
            public string? Certification { get; set; }
#nullable restore
#else
            [QueryParameter("certification")]
            public string Certification { get; set; }
#endif
            /// <summary>Country code for the certification system (e.g., US, GB, CA)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationCountry")]
            public string? CertificationCountry { get; set; }
#nullable restore
#else
            [QueryParameter("certificationCountry")]
            public string CertificationCountry { get; set; }
#endif
            /// <summary>Minimum certification to filter by (used when certificationMode is &apos;range&apos;)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationGte")]
            public string? CertificationGte { get; set; }
#nullable restore
#else
            [QueryParameter("certificationGte")]
            public string CertificationGte { get; set; }
#endif
            /// <summary>Maximum certification to filter by (used when certificationMode is &apos;range&apos;)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationLte")]
            public string? CertificationLte { get; set; }
#nullable restore
#else
            [QueryParameter("certificationLte")]
            public string CertificationLte { get; set; }
#endif
            /// <summary>Determines whether to use exact certification matching or a certification range (internal use only, not sent to TMDB API)</summary>
            [Obsolete("This property is deprecated, use CertificationModeAsGetCertificationModeQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("certificationMode")]
            public string? CertificationMode { get; set; }
#nullable restore
#else
            [QueryParameter("certificationMode")]
            public string CertificationMode { get; set; }
#endif
            /// <summary>Determines whether to use exact certification matching or a certification range (internal use only, not sent to TMDB API)</summary>
            [QueryParameter("certificationMode")]
            public global::FluentFin.Plugins.Jellyseer.Discover.Tv.GetCertificationModeQueryParameterType? CertificationModeAsGetCertificationModeQueryParameterType { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("firstAirDateGte")]
            public string? FirstAirDateGte { get; set; }
#nullable restore
#else
            [QueryParameter("firstAirDateGte")]
            public string FirstAirDateGte { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("firstAirDateLte")]
            public string? FirstAirDateLte { get; set; }
#nullable restore
#else
            [QueryParameter("firstAirDateLte")]
            public string FirstAirDateLte { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("genre")]
            public string? Genre { get; set; }
#nullable restore
#else
            [QueryParameter("genre")]
            public string Genre { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("keywords")]
            public string? Keywords { get; set; }
#nullable restore
#else
            [QueryParameter("keywords")]
            public string Keywords { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("network")]
            public double? Network { get; set; }
            [QueryParameter("page")]
            public double? Page { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sortBy")]
            public string? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sortBy")]
            public string SortBy { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public string? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public string Status { get; set; }
#endif
            [QueryParameter("voteAverageGte")]
            public double? VoteAverageGte { get; set; }
            [QueryParameter("voteAverageLte")]
            public double? VoteAverageLte { get; set; }
            [QueryParameter("voteCountGte")]
            public double? VoteCountGte { get; set; }
            [QueryParameter("voteCountLte")]
            public double? VoteCountLte { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("watchProviders")]
            public string? WatchProviders { get; set; }
#nullable restore
#else
            [QueryParameter("watchProviders")]
            public string WatchProviders { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("watchRegion")]
            public string? WatchRegion { get; set; }
#nullable restore
#else
            [QueryParameter("watchRegion")]
            public string WatchRegion { get; set; }
#endif
            [QueryParameter("withRuntimeGte")]
            public double? WithRuntimeGte { get; set; }
            [QueryParameter("withRuntimeLte")]
            public double? WithRuntimeLte { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv
{
    [Obsolete("This class is obsolete. Use TvGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TvResponse : global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.TvResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Watchlist
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchlistGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse"/> and sets the default values.
        /// </summary>
        public WatchlistGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results>(global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Watchlist
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchlistGetResponse_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ratingKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RatingKey { get; set; }
#nullable restore
#else
        public string RatingKey { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The tmdbId property</summary>
        public double? TmdbId { get; set; }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results"/> and sets the default values.
        /// </summary>
        public WatchlistGetResponse_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ratingKey", n => { RatingKey = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "tmdbId", n => { TmdbId = n.GetDoubleValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ratingKey", RatingKey);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("tmdbId", TmdbId);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Watchlist
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\watchlist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WatchlistRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/watchlist{?page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/watchlist{?page*}", rawUrl)
        {
        }
        /// <summary>
        /// Get the Plex watchlist.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse?> GetAsWatchlistGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse> GetAsWatchlistGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the Plex watchlist.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWatchlistGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the Plex watchlist.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get the Plex watchlist.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WatchlistRequestBuilderGetQueryParameters 
        {
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WatchlistRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Watchlist
{
    [Obsolete("This class is obsolete. Use WatchlistGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchlistResponse : global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Watchlist.WatchlistResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Genres.Movie
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Movie : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie"/> and sets the default values.
        /// </summary>
        public Movie()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Genres.Movie
{
    /// <summary>
    /// Builds and executes requests for operations under \genres\movie
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MovieRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/genres/movie{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/genres/movie{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of genres in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie>(requestInfo, global::FluentFin.Plugins.Jellyseer.Genres.Movie.Movie.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of genres in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of genres in a JSON array.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MovieRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MovieRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Genres.Tv
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tv : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv"/> and sets the default values.
        /// </summary>
        public Tv()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Genres.Tv
{
    /// <summary>
    /// Builds and executes requests for operations under \genres\tv
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TvRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/genres/tv{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/genres/tv{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of genres in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv>(requestInfo, global::FluentFin.Plugins.Jellyseer.Genres.Tv.Tv.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of genres in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of genres in a JSON array.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Genres.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue.Count
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CountGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The audio property</summary>
        public double? Audio { get; set; }
        /// <summary>The closed property</summary>
        public double? Closed { get; set; }
        /// <summary>The open property</summary>
        public double? Open { get; set; }
        /// <summary>The others property</summary>
        public double? Others { get; set; }
        /// <summary>The subtitles property</summary>
        public double? Subtitles { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>The video property</summary>
        public double? Video { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse"/> and sets the default values.
        /// </summary>
        public CountGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audio", n => { Audio = n.GetDoubleValue(); } },
                { "closed", n => { Closed = n.GetDoubleValue(); } },
                { "open", n => { Open = n.GetDoubleValue(); } },
                { "others", n => { Others = n.GetDoubleValue(); } },
                { "subtitles", n => { Subtitles = n.GetDoubleValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
                { "video", n => { Video = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("audio", Audio);
            writer.WriteDoubleValue("closed", Closed);
            writer.WriteDoubleValue("open", Open);
            writer.WriteDoubleValue("others", Others);
            writer.WriteDoubleValue("subtitles", Subtitles);
            writer.WriteDoubleValue("total", Total);
            writer.WriteDoubleValue("video", Video);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue.Count
{
    /// <summary>
    /// Builds and executes requests for operations under \issue\count
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CountRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CountRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/count", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CountRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/count", rawUrl)
        {
        }
        /// <summary>
        /// Returns the number of open and closed issues, as well as the number of issues of each type.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse?> GetAsCountGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse> GetAsCountGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the number of open and closed issues, as well as the number of issues of each type.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCountGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the number of open and closed issues, as well as the number of issues of each type.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Issue.Count.CountRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Issue.Count.CountRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CountRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue.Count
{
    [Obsolete("This class is obsolete. Use CountGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CountResponse : global::FluentFin.Plugins.Jellyseer.Issue.Count.CountGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Issue.Count.CountResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \issue\{issueId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithIssueItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The comment property</summary>
        public global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentRequestBuilder Comment
        {
            get => new global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.issue.item.item collection</summary>
        /// <param name="position">New status</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("status", position);
                return new global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithIssueItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/{issueId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithIssueItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/{issueId}", rawUrl)
        {
        }
        /// <summary>
        /// Removes an issue. If the user has the `MANAGE_ISSUES` permission, any issue can be removed. Otherwise, only a users own issues can be removed.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a single issue in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Issue"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Issue>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Issue.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes an issue. If the user has the `MANAGE_ISSUES` permission, any issue can be removed. Otherwise, only a users own issues can be removed.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a single issue in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Issue.Item.WithIssueItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithIssueItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithIssueItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.IssueComment.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \issueComment\{commentId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithCommentItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCommentItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issueComment/{commentId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCommentItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issueComment/{commentId}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes an issue comment. Only users with `MANAGE_ISSUES` or the user who created the comment can perform this action.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a single issue comment in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.IssueComment"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.IssueComment?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.IssueComment> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.IssueComment>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.IssueComment.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates and returns a single issue comment in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.IssueComment"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.IssueComment?> PutAsync(global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.IssueComment> PutAsync(global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.IssueComment>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.IssueComment.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an issue comment. Only users with `MANAGE_ISSUES` or the user who created the comment can perform this action.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a single issue comment in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates and returns a single issue comment in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCommentItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCommentItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithCommentItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.IssueComment.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithCommentPutRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody"/> and sets the default values.
        /// </summary>
        public WithCommentPutRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.IssueComment.Item.WithCommentPutRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "message", n => { Message = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("message", Message);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Keyword.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \keyword\{keywordId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithKeywordItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithKeywordItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/keyword/{keywordId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithKeywordItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/keyword/{keywordId}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a single keyword in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Keyword"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Keyword?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Keyword> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Keyword>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Keyword.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a single keyword in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Keyword.Item.WithKeywordItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithKeywordItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \media\{mediaId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithMediaItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The file property</summary>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace.FileRequestBuilder File
        {
            get => new global::FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace.FileRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watch_data property</summary>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataRequestBuilder Watch_data
        {
            get => new global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.media.item.item collection</summary>
        /// <param name="position">New status</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("status", position);
                return new global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMediaItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMediaItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}", rawUrl)
        {
        }
        /// <summary>
        /// Removes a media item. The `MANAGE_REQUESTS` permission is required to perform this action.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes a media item. The `MANAGE_REQUESTS` permission is required to perform this action.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.WithMediaItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithMediaItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \movie\{movieId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithMovieItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The ratings property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsRequestBuilder Ratings
        {
            get => new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ratingscombined property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedRequestBuilder Ratingscombined
        {
            get => new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recommendations property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder Recommendations
        {
            get => new global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The similar property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder Similar
        {
            get => new global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMovieItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithMovieItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns full movie details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MovieDetails"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder.WithMovieItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder.WithMovieItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MovieDetails>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MovieDetails.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns full movie details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder.WithMovieItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder.WithMovieItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns full movie details in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithMovieItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithMovieItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.WithMovieItemRequestBuilder.WithMovieItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Network.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \network\{networkId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithNetworkItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNetworkItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/network/{networkId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNetworkItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/network/{networkId}", rawUrl)
        {
        }
        /// <summary>
        /// Returns TV network details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns TV network details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Network.Item.WithNetworkItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithNetworkItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.OverrideRule.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \overrideRule\{ruleId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithRuleItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRuleItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/overrideRule/{ruleId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRuleItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/overrideRule/{ruleId}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes the override rule with the provided ruleId.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.OverrideRule"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.OverrideRule.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates an Override Rule from the request body.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.OverrideRule&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>?> PutAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>> PutAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPutRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.OverrideRule>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.OverrideRule.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Deletes the override rule with the provided ruleId.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates an Override Rule from the request body.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.OverrideRule.Item.WithRuleItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRuleItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRuleItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Person.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \person\{personId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithPersonItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The combined_credits property</summary>
        public global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder Combined_credits
        {
            get => new global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithPersonItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/person/{personId}{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithPersonItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/person/{personId}{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns person details based on provided personId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PersonDetails"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PersonDetails?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder.WithPersonItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PersonDetails> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder.WithPersonItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PersonDetails>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PersonDetails.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns person details based on provided personId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder.WithPersonItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder.WithPersonItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns person details based on provided personId in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithPersonItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithPersonItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.WithPersonItemRequestBuilder.WithPersonItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request.Count
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CountGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The approved property</summary>
        public double? Approved { get; set; }
        /// <summary>The available property</summary>
        public double? Available { get; set; }
        /// <summary>The declined property</summary>
        public double? Declined { get; set; }
        /// <summary>The movie property</summary>
        public double? Movie { get; set; }
        /// <summary>The pending property</summary>
        public double? Pending { get; set; }
        /// <summary>The processing property</summary>
        public double? Processing { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>The tv property</summary>
        public double? Tv { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse"/> and sets the default values.
        /// </summary>
        public CountGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "approved", n => { Approved = n.GetDoubleValue(); } },
                { "available", n => { Available = n.GetDoubleValue(); } },
                { "declined", n => { Declined = n.GetDoubleValue(); } },
                { "movie", n => { Movie = n.GetDoubleValue(); } },
                { "pending", n => { Pending = n.GetDoubleValue(); } },
                { "processing", n => { Processing = n.GetDoubleValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
                { "tv", n => { Tv = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("approved", Approved);
            writer.WriteDoubleValue("available", Available);
            writer.WriteDoubleValue("declined", Declined);
            writer.WriteDoubleValue("movie", Movie);
            writer.WriteDoubleValue("pending", Pending);
            writer.WriteDoubleValue("processing", Processing);
            writer.WriteDoubleValue("total", Total);
            writer.WriteDoubleValue("tv", Tv);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request.Count
{
    /// <summary>
    /// Builds and executes requests for operations under \request\count
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CountRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CountRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/count", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CountRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/count", rawUrl)
        {
        }
        /// <summary>
        /// Returns the number of pending and approved requests.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse?> GetAsCountGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse> GetAsCountGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the number of pending and approved requests.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCountGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the number of pending and approved requests.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Request.Count.CountRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Request.Count.CountRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CountRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request.Count
{
    [Obsolete("This class is obsolete. Use CountGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CountResponse : global::FluentFin.Plugins.Jellyseer.Request.Count.CountGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Request.Count.CountResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \request\{requestId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithRequestItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The retry property</summary>
        public global::FluentFin.Plugins.Jellyseer.Request.Item.Retry.RetryRequestBuilder Retry
        {
            get => new global::FluentFin.Plugins.Jellyseer.Request.Item.Retry.RetryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.request.item.item collection</summary>
        /// <param name="position">New status</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("status", position);
                return new global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRequestItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/{requestId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRequestItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/{requestId}", rawUrl)
        {
        }
        /// <summary>
        /// Removes a request. If the user has the `MANAGE_REQUESTS` permission, any request can be removed. Otherwise, only pending requests can be removed.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a specific MediaRequest in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaRequest"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates a specific media request and returns the request in a JSON object. Requires the `MANAGE_REQUESTS` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaRequest"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest?> PutAsync(global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> PutAsync(global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes a request. If the user has the `MANAGE_REQUESTS` permission, any request can be removed. Otherwise, only pending requests can be removed.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a specific MediaRequest in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates a specific media request and returns the request in a JSON object. Requires the `MANAGE_REQUESTS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRequestItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRequestItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRequestItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithRequestPutRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The is4k property</summary>
        public bool? Is4k { get; set; }
        /// <summary>The languageProfileId property</summary>
        public double? LanguageProfileId { get; set; }
        /// <summary>The mediaType property</summary>
        public global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody_mediaType? MediaType { get; set; }
        /// <summary>The profileId property</summary>
        public double? ProfileId { get; set; }
        /// <summary>The rootFolder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RootFolder { get; set; }
#nullable restore
#else
        public string RootFolder { get; set; }
#endif
        /// <summary>The seasons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<double?>? Seasons { get; set; }
#nullable restore
#else
        public List<double?> Seasons { get; set; }
#endif
        /// <summary>The serverId property</summary>
        public double? ServerId { get; set; }
        /// <summary>The userId property</summary>
        public double? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody"/> and sets the default values.
        /// </summary>
        public WithRequestPutRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "is4k", n => { Is4k = n.GetBoolValue(); } },
                { "languageProfileId", n => { LanguageProfileId = n.GetDoubleValue(); } },
                { "mediaType", n => { MediaType = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody_mediaType>(); } },
                { "profileId", n => { ProfileId = n.GetDoubleValue(); } },
                { "rootFolder", n => { RootFolder = n.GetStringValue(); } },
                { "seasons", n => { Seasons = n.GetCollectionOfPrimitiveValues<double?>()?.AsList(); } },
                { "serverId", n => { ServerId = n.GetDoubleValue(); } },
                { "userId", n => { UserId = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("is4k", Is4k);
            writer.WriteDoubleValue("languageProfileId", LanguageProfileId);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Request.Item.WithRequestPutRequestBody_mediaType>("mediaType", MediaType);
            writer.WriteDoubleValue("profileId", ProfileId);
            writer.WriteStringValue("rootFolder", RootFolder);
            writer.WriteCollectionOfPrimitiveValues<double?>("seasons", Seasons);
            writer.WriteDoubleValue("serverId", ServerId);
            writer.WriteDoubleValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Request.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum WithRequestPutRequestBody_mediaType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "movie")]
        #pragma warning disable CS1591
        Movie,
        #pragma warning restore CS1591
        [EnumMember(Value = "tv")]
        #pragma warning disable CS1591
        Tv,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search.Company
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CompanyGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Company>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Company> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse"/> and sets the default values.
        /// </summary>
        public CompanyGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Company>(global::FluentFin.Plugins.Jellyseer.Models.Company.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Company>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search.Company
{
    /// <summary>
    /// Builds and executes requests for operations under \search\company
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CompanyRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompanyRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search/company?query={query}{&page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompanyRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search/company?query={query}{&page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of TMDB companies matching the search query. (Will not return origin country)
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse?> GetAsCompanyGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder.CompanyRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse> GetAsCompanyGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder.CompanyRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TMDB companies matching the search query. (Will not return origin country)
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCompanyGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder.CompanyRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder.CompanyRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TMDB companies matching the search query. (Will not return origin country)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder.CompanyRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder.CompanyRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of TMDB companies matching the search query. (Will not return origin country)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompanyRequestBuilderGetQueryParameters 
        {
            [QueryParameter("page")]
            public double? Page { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompanyRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyRequestBuilder.CompanyRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search.Company
{
    [Obsolete("This class is obsolete. Use CompanyGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CompanyResponse : global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Search.Company.CompanyResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search.Keyword
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class KeywordGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.Keyword>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.Keyword> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse"/> and sets the default values.
        /// </summary>
        public KeywordGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Keyword>(global::FluentFin.Plugins.Jellyseer.Models.Keyword.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.Keyword>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search.Keyword
{
    /// <summary>
    /// Builds and executes requests for operations under \search\keyword
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class KeywordRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public KeywordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search/keyword?query={query}{&page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public KeywordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/search/keyword?query={query}{&page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of TMDB keywords matching the search query
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse?> GetAsKeywordGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder.KeywordRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse> GetAsKeywordGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder.KeywordRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TMDB keywords matching the search query
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsKeywordGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder.KeywordRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder.KeywordRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TMDB keywords matching the search query
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder.KeywordRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder.KeywordRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of TMDB keywords matching the search query
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class KeywordRequestBuilderGetQueryParameters 
        {
            [QueryParameter("page")]
            public double? Page { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("query")]
            public string? Query { get; set; }
#nullable restore
#else
            [QueryParameter("query")]
            public string Query { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class KeywordRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordRequestBuilder.KeywordRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Search.Keyword
{
    [Obsolete("This class is obsolete. Use KeywordGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class KeywordResponse : global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Search.Keyword.KeywordResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Radarr
{
    /// <summary>
    /// Builds and executes requests for operations under \service\radarr
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RadarrRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.service.radarr.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("radarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.service.radarr.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("radarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.RadarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RadarrRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/radarr", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.RadarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RadarrRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/radarr", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Radarr server IDs and names in a JSON object.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of Radarr server IDs and names in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.RadarrRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Service.Radarr.RadarrRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Service.Radarr.RadarrRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RadarrRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Sonarr
{
    /// <summary>
    /// Builds and executes requests for operations under \service\sonarr
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SonarrRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The lookup property</summary>
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.LookupRequestBuilder Lookup
        {
            get => new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.LookupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.service.sonarr.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("sonarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.service.sonarr.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("sonarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.SonarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SonarrRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.SonarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SonarrRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Sonarr server IDs and names in a JSON object.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of Sonarr server IDs and names in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.SonarrRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.SonarrRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.SonarrRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SonarrRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.About
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AboutGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The appDataPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppDataPath { get; set; }
#nullable restore
#else
        public string AppDataPath { get; set; }
#endif
        /// <summary>The totalMediaItems property</summary>
        public double? TotalMediaItems { get; set; }
        /// <summary>The totalRequests property</summary>
        public double? TotalRequests { get; set; }
        /// <summary>The tz property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tz { get; set; }
#nullable restore
#else
        public string Tz { get; set; }
#endif
        /// <summary>The version property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Version { get; set; }
#nullable restore
#else
        public string Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse"/> and sets the default values.
        /// </summary>
        public AboutGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "appDataPath", n => { AppDataPath = n.GetStringValue(); } },
                { "totalMediaItems", n => { TotalMediaItems = n.GetDoubleValue(); } },
                { "totalRequests", n => { TotalRequests = n.GetDoubleValue(); } },
                { "tz", n => { Tz = n.GetStringValue(); } },
                { "version", n => { Version = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("appDataPath", AppDataPath);
            writer.WriteDoubleValue("totalMediaItems", TotalMediaItems);
            writer.WriteDoubleValue("totalRequests", TotalRequests);
            writer.WriteStringValue("tz", Tz);
            writer.WriteStringValue("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.About
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\about
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AboutRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AboutRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/about", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AboutRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/about", rawUrl)
        {
        }
        /// <summary>
        /// Returns current server stats in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse?> GetAsAboutGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse> GetAsAboutGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current server stats in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsAboutGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current server stats in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.About.AboutRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.About.AboutRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AboutRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.About
{
    [Obsolete("This class is obsolete. Use AboutGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AboutResponse : global::FluentFin.Plugins.Jellyseer.Settings.About.AboutGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.About.AboutResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CacheGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apiCaches property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches>? ApiCaches { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches> ApiCaches { get; set; }
#endif
        /// <summary>The imageCache property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache? ImageCache { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache ImageCache { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse"/> and sets the default values.
        /// </summary>
        public CacheGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiCaches", n => { ApiCaches = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches>(global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches.CreateFromDiscriminatorValue)?.AsList(); } },
                { "imageCache", n => { ImageCache = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache>(global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches>("apiCaches", ApiCaches);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache>("imageCache", ImageCache);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CacheGetResponse_apiCaches : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The stats property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats? Stats { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats Stats { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches"/> and sets the default values.
        /// </summary>
        public CacheGetResponse_apiCaches()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "stats", n => { Stats = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats>(global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats>("stats", Stats);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CacheGetResponse_apiCaches_stats : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The hits property</summary>
        public double? Hits { get; set; }
        /// <summary>The keys property</summary>
        public double? Keys { get; set; }
        /// <summary>The ksize property</summary>
        public double? Ksize { get; set; }
        /// <summary>The misses property</summary>
        public double? Misses { get; set; }
        /// <summary>The vsize property</summary>
        public double? Vsize { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats"/> and sets the default values.
        /// </summary>
        public CacheGetResponse_apiCaches_stats()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_apiCaches_stats();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "hits", n => { Hits = n.GetDoubleValue(); } },
                { "keys", n => { Keys = n.GetDoubleValue(); } },
                { "ksize", n => { Ksize = n.GetDoubleValue(); } },
                { "misses", n => { Misses = n.GetDoubleValue(); } },
                { "vsize", n => { Vsize = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("hits", Hits);
            writer.WriteDoubleValue("keys", Keys);
            writer.WriteDoubleValue("ksize", Ksize);
            writer.WriteDoubleValue("misses", Misses);
            writer.WriteDoubleValue("vsize", Vsize);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CacheGetResponse_imageCache : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The avatar property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar? Avatar { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar Avatar { get; set; }
#endif
        /// <summary>The tmdb property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb? Tmdb { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb Tmdb { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache"/> and sets the default values.
        /// </summary>
        public CacheGetResponse_imageCache()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "avatar", n => { Avatar = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar>(global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar.CreateFromDiscriminatorValue); } },
                { "tmdb", n => { Tmdb = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb>(global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar>("avatar", Avatar);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb>("tmdb", Tmdb);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CacheGetResponse_imageCache_avatar : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The imageCount property</summary>
        public double? ImageCount { get; set; }
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar"/> and sets the default values.
        /// </summary>
        public CacheGetResponse_imageCache_avatar()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_avatar();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "imageCount", n => { ImageCount = n.GetDoubleValue(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("imageCount", ImageCount);
            writer.WriteDoubleValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CacheGetResponse_imageCache_tmdb : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The imageCount property</summary>
        public double? ImageCount { get; set; }
        /// <summary>The size property</summary>
        public double? Size { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb"/> and sets the default values.
        /// </summary>
        public CacheGetResponse_imageCache_tmdb()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse_imageCache_tmdb();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "imageCount", n => { ImageCount = n.GetDoubleValue(); } },
                { "size", n => { Size = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("imageCount", ImageCount);
            writer.WriteDoubleValue("size", Size);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\cache
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CacheRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.cache.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.WithCacheItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.WithCacheItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("cacheId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.WithCacheItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CacheRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/cache", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CacheRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/cache", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves a list of all active caches and their current stats.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse?> GetAsCacheGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse> GetAsCacheGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a list of all active caches and their current stats.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCacheGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a list of all active caches and their current stats.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CacheRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache
{
    [Obsolete("This class is obsolete. Use CacheGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CacheResponse : global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.CacheResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Discover
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\discover
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DiscoverRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The add property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddRequestBuilder Add
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The reset property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.Reset.ResetRequestBuilder Reset
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Reset.ResetRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.discover.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("sliderId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.discover.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("sliderId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.DiscoverRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DiscoverRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.DiscoverRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DiscoverRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover", rawUrl)
        {
        }
        /// <summary>
        /// Returns all discovery sliders. Built-in and custom made.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Batch update all sliders at once. Should also be used for creation. Will only update sliders providedand will not delete any sliders not present in the request. If a slider is missing a required field,it will be ignored. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider&gt;</returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>?> PostAsync(List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider> body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>> PostAsync(List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider> body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns all discovery sliders. Built-in and custom made.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Batch update all sliders at once. Should also be used for creation. Will only update sliders providedand will not delete any sliders not present in the request. If a slider is missing a required field,it will be ignored. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider> body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(List<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider> body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.DiscoverRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.DiscoverRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.DiscoverRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DiscoverRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DiscoverRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Initialize
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\initialize
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InitializeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Initialize.InitializeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InitializeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/initialize", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Initialize.InitializeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InitializeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/initialize", rawUrl)
        {
        }
        /// <summary>
        /// Sets the app as initialized, allowing the user to navigate to pages other than the setup page.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PublicSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PublicSettings?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PublicSettings> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PublicSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PublicSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sets the app as initialized, allowing the user to navigate to pages other than the setup page.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Initialize.InitializeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Initialize.InitializeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Initialize.InitializeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InitializeRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jellyfin
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class JellyfinRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The library property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder Library
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sync property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncRequestBuilder Sync
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.UsersRequestBuilder Users
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.JellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JellyfinRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.JellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JellyfinRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves current Jellyfin settings.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates Jellyfin settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves current Jellyfin settings.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates Jellyfin settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.JellyfinSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.JellyfinRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.JellyfinRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.JellyfinRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class JellyfinRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class JellyfinRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jobs
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jobs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class JobsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.jobs.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.WithJobItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.WithJobItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("jobId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.WithJobItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.JobsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JobsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.JobsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JobsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of all scheduled jobs and details about their next execution time in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.Job&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.Job>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.Job>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.Job>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Job.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns list of all scheduled jobs and details about their next execution time in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.JobsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.JobsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.JobsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class JobsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Settings.Logs
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum GetFilterQueryParameterType
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "debug")]
        #pragma warning disable CS1591
        Debug,
        #pragma warning restore CS1591
        [EnumMember(Value = "info")]
        #pragma warning disable CS1591
        Info,
        #pragma warning restore CS1591
        [EnumMember(Value = "warn")]
        #pragma warning disable CS1591
        Warn,
        #pragma warning restore CS1591
        [EnumMember(Value = "error")]
        #pragma warning disable CS1591
        Error,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Logs
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Logs : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The level property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Level { get; set; }
#nullable restore
#else
        public string Level { get; set; }
#endif
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The timestamp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Timestamp { get; set; }
#nullable restore
#else
        public string Timestamp { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs"/> and sets the default values.
        /// </summary>
        public Logs()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "label", n => { Label = n.GetStringValue(); } },
                { "level", n => { Level = n.GetStringValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "timestamp", n => { Timestamp = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("level", Level);
            writer.WriteStringValue("message", Message);
            writer.WriteStringValue("timestamp", Timestamp);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Logs
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\logs
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LogsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LogsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/logs{?filter*,search*,skip*,take*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LogsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/logs{?filter*,search*,skip*,take*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of all log items and details
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Logs.Logs.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns list of all log items and details
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns list of all log items and details
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LogsRequestBuilderGetQueryParameters 
        {
            [Obsolete("This property is deprecated, use FilterAsGetFilterQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("filter")]
            public string? Filter { get; set; }
#nullable restore
#else
            [QueryParameter("filter")]
            public string Filter { get; set; }
#endif
            [QueryParameter("filter")]
            public global::FluentFin.Plugins.Jellyseer.Settings.Logs.GetFilterQueryParameterType? FilterAsGetFilterQueryParameterType { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            [QueryParameter("take")]
            public double? Take { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LogsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Logs.LogsRequestBuilder.LogsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Main
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\main
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MainRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The regenerate property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate.RegenerateRequestBuilder Regenerate
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate.RegenerateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Main.MainRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MainRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/main", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Main.MainRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MainRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/main", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves all main settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MainSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MainSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MainSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates main settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MainSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.MainSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.MainSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MainSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MainSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves all main settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates main settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.MainSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.MainSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Main.MainRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Main.MainRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Main.MainRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MainRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MainRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Network
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\network
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NetworkRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Network.NetworkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NetworkRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/network", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Network.NetworkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NetworkRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/network", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves all network settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MainSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MainSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MainSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates network settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves all network settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates network settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NetworkSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Network.NetworkRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Network.NetworkRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Network.NetworkRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NetworkRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NetworkRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NotificationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The discord property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.DiscordRequestBuilder Discord
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.DiscordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The email property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.EmailRequestBuilder Email
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.EmailRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The gotify property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.GotifyRequestBuilder Gotify
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.GotifyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lunasea property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.LunaseaRequestBuilder Lunasea
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.LunaseaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ntfy property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.NtfyRequestBuilder Ntfy
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.NtfyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pushbullet property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.PushbulletRequestBuilder Pushbullet
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.PushbulletRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pushover property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.PushoverRequestBuilder Pushover
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.PushoverRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The slack property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.SlackRequestBuilder Slack
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.SlackRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The telegram property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.TelegramRequestBuilder Telegram
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.TelegramRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhook property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.WebhookRequestBuilder Webhook
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.WebhookRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webpush property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.WebpushRequestBuilder Webpush
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.WebpushRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\plex
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PlexRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The devices property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.DevicesRequestBuilder Devices
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.DevicesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The library property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder Library
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sync property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncRequestBuilder Sync
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.UsersRequestBuilder Users
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.PlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlexRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.PlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlexRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves current Plex settings.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PlexSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PlexSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PlexSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PlexSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates Plex settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PlexSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PlexSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PlexSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PlexSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PlexSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PlexSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PlexSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves current Plex settings.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates Plex settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PlexSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PlexSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.PlexRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.PlexRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.PlexRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PlexRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PlexRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Public
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\public
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PublicRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Public.PublicRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PublicRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/public", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Public.PublicRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PublicRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/public", rawUrl)
        {
        }
        /// <summary>
        /// Returns settings that are not protected or sensitive. Mainly used to determine if the application has been configured for the first time.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PublicSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PublicSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PublicSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PublicSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PublicSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns settings that are not protected or sensitive. Mainly used to determine if the application has been configured for the first time.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Public.PublicRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Public.PublicRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Public.PublicRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PublicRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Radarr
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\radarr
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RadarrRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.radarr.item collection</summary>
        /// <param name="position">Radarr instance ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("radarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.radarr.item collection</summary>
        /// <param name="position">Radarr instance ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("radarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.RadarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RadarrRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.RadarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RadarrRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr", rawUrl)
        {
        }
        /// <summary>
        /// Returns all Radarr settings in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates a new Radarr instance from the request body.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all Radarr settings in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new Radarr instance from the request body.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.RadarrRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.RadarrRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.RadarrRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RadarrRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RadarrRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Sonarr
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\sonarr
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SonarrRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.sonarr.item collection</summary>
        /// <param name="position">Sonarr instance ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("sonarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.settings.sonarr.item collection</summary>
        /// <param name="position">Sonarr instance ID</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("sonarrId", position);
                return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.SonarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SonarrRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/sonarr", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.SonarrRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SonarrRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/sonarr", rawUrl)
        {
        }
        /// <summary>
        /// Returns all Sonarr settings in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates a new Sonarr instance from the request body.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all Sonarr settings in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new Sonarr instance from the request body.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.SonarrRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.SonarrRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.SonarrRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SonarrRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SonarrRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Tautulli
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\tautulli
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TautulliRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Tautulli.TautulliRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TautulliRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/tautulli", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Tautulli.TautulliRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TautulliRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/tautulli", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves current Tautulli settings.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates Tautulli settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves current Tautulli settings.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates Tautulli settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.TautulliSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Tautulli.TautulliRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Tautulli.TautulliRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Tautulli.TautulliRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TautulliRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TautulliRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Status.Appdata
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AppdataGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The appData property</summary>
        public bool? AppData { get; set; }
        /// <summary>The appDataPath property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppDataPath { get; set; }
#nullable restore
#else
        public string AppDataPath { get; set; }
#endif
        /// <summary>The appDataPermissions property</summary>
        public bool? AppDataPermissions { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse"/> and sets the default values.
        /// </summary>
        public AppdataGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "appData", n => { AppData = n.GetBoolValue(); } },
                { "appDataPath", n => { AppDataPath = n.GetStringValue(); } },
                { "appDataPermissions", n => { AppDataPermissions = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("appData", AppData);
            writer.WriteStringValue("appDataPath", AppDataPath);
            writer.WriteBoolValue("appDataPermissions", AppDataPermissions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Status.Appdata
{
    /// <summary>
    /// Builds and executes requests for operations under \status\appdata
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AppdataRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AppdataRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/status/appdata", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AppdataRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/status/appdata", rawUrl)
        {
        }
        /// <summary>
        /// For Docker installs, returns whether or not the volume mount was configured properly. Always returns true for non-Docker installs.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse?> GetAsAppdataGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse> GetAsAppdataGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// For Docker installs, returns whether or not the volume mount was configured properly. Always returns true for non-Docker installs.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsAppdataGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// For Docker installs, returns whether or not the volume mount was configured properly. Always returns true for non-Docker installs.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AppdataRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Status.Appdata
{
    [Obsolete("This class is obsolete. Use AppdataGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AppdataResponse : global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Status.Appdata.AppdataResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Studio.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \studio\{studioId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithStudioItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStudioItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/studio/{studioId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStudioItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/studio/{studioId}", rawUrl)
        {
        }
        /// <summary>
        /// Returns movie studio details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns movie studio details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Studio.Item.WithStudioItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithStudioItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \tv\{tvId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTvItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The ratings property</summary>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsRequestBuilder Ratings
        {
            get => new global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recommendations property</summary>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder Recommendations
        {
            get => new global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The season property</summary>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.SeasonRequestBuilder Season
        {
            get => new global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.SeasonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The similar property</summary>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder Similar
        {
            get => new global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTvItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTvItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns full TV details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TvDetails"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TvDetails?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder.WithTvItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TvDetails> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder.WithTvItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.TvDetails>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.TvDetails.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns full TV details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder.WithTvItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder.WithTvItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns full TV details in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTvItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTvItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.WithTvItemRequestBuilder.WithTvItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ImportFromJellyfinPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The jellyfinUserIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? JellyfinUserIds { get; set; }
#nullable restore
#else
        public List<string> JellyfinUserIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody"/> and sets the default values.
        /// </summary>
        public ImportFromJellyfinPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "jellyfinUserIds", n => { JellyfinUserIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("jellyfinUserIds", JellyfinUserIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin
{
    /// <summary>
    /// Builds and executes requests for operations under \user\import-from-jellyfin
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ImportFromJellyfinRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ImportFromJellyfinRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/import-from-jellyfin", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ImportFromJellyfinRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/import-from-jellyfin", rawUrl)
        {
        }
        /// <summary>
        /// Fetches and imports users from the Jellyfin server.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.User&gt;</returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.User>?> PostAsync(global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.User>> PostAsync(global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Fetches and imports users from the Jellyfin server.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.ImportFromJellyfin.ImportFromJellyfinRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ImportFromJellyfinRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.ImportFromPlex
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ImportFromPlexPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The plexIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PlexIds { get; set; }
#nullable restore
#else
        public List<string> PlexIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody"/> and sets the default values.
        /// </summary>
        public ImportFromPlexPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "plexIds", n => { PlexIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("plexIds", PlexIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.ImportFromPlex
{
    /// <summary>
    /// Builds and executes requests for operations under \user\import-from-plex
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ImportFromPlexRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ImportFromPlexRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/import-from-plex", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ImportFromPlexRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/import-from-plex", rawUrl)
        {
        }
        /// <summary>
        /// Fetches and imports users from the Plex server. If a list of Plex IDs is provided in the request body, only the specified users will be imported. Otherwise, all users will be imported.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.User&gt;</returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.User>?> PostAsync(global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.User>> PostAsync(global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Fetches and imports users from the Plex server. If a list of Plex IDs is provided in the request body, only the specified users will be imported. Otherwise, all users will be imported.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.ImportFromPlex.ImportFromPlexRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ImportFromPlexRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithUserItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The pushSubscription property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.PushSubscriptionRequestBuilder PushSubscription
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.PushSubscriptionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pushSubscriptions property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsRequestBuilder PushSubscriptions
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The quota property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaRequestBuilder Quota
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The requests property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder Requests
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.SettingsRequestBuilder Settings
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watch_data property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataRequestBuilder Watch_data
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watchlist property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder Watchlist
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithUserItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithUserItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes the user with the provided userId. Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves user details in a JSON object. Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update a user with the provided values. You cannot update a user&apos;s Plex token through this request.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.User"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User?> PutAsync(global::FluentFin.Plugins.Jellyseer.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.User> PutAsync(global::FluentFin.Plugins.Jellyseer.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.User>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes the user with the provided userId. Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Retrieves user details in a JSON object. Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update a user with the provided values. You cannot update a user&apos;s Plex token through this request.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.User body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.WithUserItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithUserItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithUserItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithUserItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RegisterPushSubscriptionPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The auth property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Auth { get; set; }
#nullable restore
#else
        public string Auth { get; set; }
#endif
        /// <summary>The endpoint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Endpoint { get; set; }
#nullable restore
#else
        public string Endpoint { get; set; }
#endif
        /// <summary>The p256dh property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? P256dh { get; set; }
#nullable restore
#else
        public string P256dh { get; set; }
#endif
        /// <summary>The userAgent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAgent { get; set; }
#nullable restore
#else
        public string UserAgent { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody"/> and sets the default values.
        /// </summary>
        public RegisterPushSubscriptionPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auth", n => { Auth = n.GetStringValue(); } },
                { "endpoint", n => { Endpoint = n.GetStringValue(); } },
                { "p256dh", n => { P256dh = n.GetStringValue(); } },
                { "userAgent", n => { UserAgent = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("auth", Auth);
            writer.WriteStringValue("endpoint", Endpoint);
            writer.WriteStringValue("p256dh", P256dh);
            writer.WriteStringValue("userAgent", UserAgent);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription
{
    /// <summary>
    /// Builds and executes requests for operations under \user\registerPushSubscription
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RegisterPushSubscriptionRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegisterPushSubscriptionRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/registerPushSubscription", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegisterPushSubscriptionRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/registerPushSubscription", rawUrl)
        {
        }
        /// <summary>
        /// Registers a web push subscription for the logged-in user
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Registers a web push subscription for the logged-in user
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.RegisterPushSubscription.RegisterPushSubscriptionRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RegisterPushSubscriptionRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Watchlist.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \watchlist\{tmdbId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTmdbItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTmdbItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchlist/{tmdbId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTmdbItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchlist/{tmdbId}", rawUrl)
        {
        }
        /// <summary>
        /// Removes a watchlist item.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes a watchlist item.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Watchlist.Item.WithTmdbItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTmdbItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Watchproviders.Movies
{
    /// <summary>
    /// Builds and executes requests for operations under \watchproviders\movies
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MoviesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders/movies?watchRegion={watchRegion}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders/movies?watchRegion={watchRegion}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all available watch providers for movies.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of all available watch providers for movies.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of all available watch providers for movies.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MoviesRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("watchRegion")]
            public string? WatchRegion { get; set; }
#nullable restore
#else
            [QueryParameter("watchRegion")]
            public string WatchRegion { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MoviesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Watchproviders.Regions
{
    /// <summary>
    /// Builds and executes requests for operations under \watchproviders\regions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RegionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Regions.RegionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders/regions", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Regions.RegionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders/regions", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all available watch provider regions.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.WatchProviderRegion.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of all available watch provider regions.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Regions.RegionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Watchproviders.Regions.RegionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Watchproviders.Regions.RegionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RegionsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Watchproviders.Tv
{
    /// <summary>
    /// Builds and executes requests for operations under \watchproviders\tv
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TvRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders/tv?watchRegion={watchRegion}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/watchproviders/tv?watchRegion={watchRegion}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of all available watch providers for series.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.WatchProviderDetails.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of all available watch providers for series.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of all available watch providers for series.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("watchRegion")]
            public string? WatchRegion { get; set; }
#nullable restore
#else
            [QueryParameter("watchRegion")]
            public string WatchRegion { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Watchproviders.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \auth\reset-password\{guid}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithGuItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGuItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/reset-password/{guid}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGuItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/auth/reset-password/{guid}", rawUrl)
        {
        }
        /// <summary>
        /// Resets the password for a user if the given guid is connected to a user
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse?> PostAsWithGuPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse> PostAsWithGuPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Resets the password for a user if the given guid is connected to a user
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsWithGuPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Resets the password for a user if the given guid is connected to a user
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGuItemRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithGuPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody"/> and sets the default values.
        /// </summary>
        public WithGuPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "password", n => { Password = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("password", Password);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithGuPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse"/> and sets the default values.
        /// </summary>
        public WithGuPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "status", n => { Status = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item
{
    [Obsolete("This class is obsolete. Use WithGuPostResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithGuResponse : global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuPostResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Auth.ResetPassword.Item.WithGuResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Movie : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backdrops property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Backdrops { get; set; }
#nullable restore
#else
        public List<string> Backdrops { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie"/> and sets the default values.
        /// </summary>
        public Movie()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backdrops", n => { Backdrops = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("backdrops", Backdrops);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\genreslider\movie
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MovieRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/genreslider/movie{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MovieRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/genreslider/movie{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of genres with backdrops attached
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.Movie.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of genres with backdrops attached
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of genres with backdrops attached
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MovieRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MovieRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Movie.MovieRequestBuilder.MovieRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Tv : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The backdrops property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Backdrops { get; set; }
#nullable restore
#else
        public List<string> Backdrops { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv"/> and sets the default values.
        /// </summary>
        public Tv()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "backdrops", n => { Backdrops = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("backdrops", Backdrops);
            writer.WriteDoubleValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\genreslider\tv
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TvRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/genreslider/tv{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TvRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/genreslider/tv{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of genres with backdrops attached
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.Tv.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of genres with backdrops attached
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of genres with backdrops attached
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TvRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Genreslider.Tv.TvRequestBuilder.TvRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Keyword.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\keyword\{keywordId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithKeywordItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The movies property</summary>
        public global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder Movies
        {
            get => new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithKeywordItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/keyword/{keywordId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.WithKeywordItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithKeywordItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/keyword/{keywordId}", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Genre
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies\genre
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GenreRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.movies.genre.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("genreId", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.GenreRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenreRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/genre", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.GenreRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenreRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/genre", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Language
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies\language
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LanguageRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.movies.language.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("language", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.LanguageRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LanguageRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/language", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.LanguageRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LanguageRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/language", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Studio
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies\studio
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StudioRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.movies.studio.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("studioId", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.StudioRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StudioRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/studio", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.StudioRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StudioRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/studio", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpcomingGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse"/> and sets the default values.
        /// </summary>
        public UpcomingGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies\upcoming
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UpcomingRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UpcomingRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/upcoming{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UpcomingRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/upcoming{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse?> GetAsUpcomingGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse> GetAsUpcomingGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsUpcomingGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of movies in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UpcomingRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UpcomingRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming
{
    [Obsolete("This class is obsolete. Use UpcomingGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpcomingResponse : global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Upcoming.UpcomingResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Genre
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv\genre
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GenreRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.tv.genre.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("genreId", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.GenreRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenreRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/genre", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.GenreRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GenreRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/genre", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Language
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv\language
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LanguageRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.tv.language.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("language", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.LanguageRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LanguageRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/language", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.LanguageRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LanguageRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/language", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Network
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv\network
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NetworkRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.discover.tv.network.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("networkId", position);
                return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.NetworkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NetworkRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/network", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.NetworkRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NetworkRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/network", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpcomingGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse"/> and sets the default values.
        /// </summary>
        public UpcomingGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(global::FluentFin.Plugins.Jellyseer.Models.TvResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv\upcoming
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UpcomingRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UpcomingRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/upcoming{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UpcomingRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/upcoming{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of upcoming TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse?> GetAsUpcomingGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse> GetAsUpcomingGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of upcoming TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsUpcomingGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of upcoming TV shows in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of upcoming TV shows in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UpcomingRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UpcomingRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingRequestBuilder.UpcomingRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming
{
    [Obsolete("This class is obsolete. Use UpcomingGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpcomingResponse : global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Upcoming.UpcomingResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue.Item.Comment
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CommentPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody"/> and sets the default values.
        /// </summary>
        public CommentPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "message", n => { Message = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("message", Message);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue.Item.Comment
{
    /// <summary>
    /// Builds and executes requests for operations under \issue\{issueId}\comment
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CommentRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CommentRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/{issueId}/comment", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CommentRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/{issueId}/comment", rawUrl)
        {
        }
        /// <summary>
        /// Creates a comment and returns associated issue in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Issue"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue?> PostAsync(global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue> PostAsync(global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Issue>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Issue.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Creates a comment and returns associated issue in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Issue.Item.Comment.CommentRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CommentRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Issue.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \issue\{issueId}\{status}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithStatusItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStatusItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/{issueId}/{status}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStatusItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/issue/{issueId}/{status}", rawUrl)
        {
        }
        /// <summary>
        /// Updates an issue&apos;s status to approved or declined. Also returns the issue in a JSON object.Requires the `MANAGE_ISSUES` permission or `ADMIN`.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Issue"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Issue> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Issue>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Issue.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates an issue&apos;s status to approved or declined. Also returns the issue in a JSON object.Requires the `MANAGE_ISSUES` permission or `ADMIN`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Issue.Item.Item.WithStatusItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithStatusItemRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace
{
    /// <summary>
    /// Builds and executes requests for operations under \media\{mediaId}\file
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FileRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace.FileRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FileRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}/file", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace.FileRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FileRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}/file", rawUrl)
        {
        }
        /// <summary>
        /// Removes a media file from radarr/sonarr. The `ADMIN` permission is required to perform this action.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes a media file from radarr/sonarr. The `ADMIN` permission is required to perform this action.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace.FileRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace.FileRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.FileNamespace.FileRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FileRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \media\{mediaId}\{status}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithStatusItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStatusItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}/{status}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStatusItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}/{status}", rawUrl)
        {
        }
        /// <summary>
        /// Updates a media item&apos;s status and returns the media in JSON format
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaInfo"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo?> PostAsync(global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo> PostAsync(global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates a media item&apos;s status and returns the media in JSON format
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithStatusItemRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithStatusPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The is4k property</summary>
        public bool? Is4k { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody"/> and sets the default values.
        /// </summary>
        public WithStatusPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.Item.WithStatusPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "is4k", n => { Is4k = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("is4k", Is4k);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.Watch_data
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Watch_dataGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data? Data { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data Data { get; set; }
#endif
        /// <summary>The data4k property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k? Data4k { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k Data4k { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse"/> and sets the default values.
        /// </summary>
        public Watch_dataGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "data", n => { Data = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data>(global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data.CreateFromDiscriminatorValue); } },
                { "data4k", n => { Data4k = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k>(global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data>("data", Data);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k>("data4k", Data4k);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.Watch_data
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Watch_dataGetResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The playCount property</summary>
        public double? PlayCount { get; set; }
        /// <summary>The playCount30Days property</summary>
        public double? PlayCount30Days { get; set; }
        /// <summary>The playCount7Days property</summary>
        public double? PlayCount7Days { get; set; }
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.User>? Users { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.User> Users { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data"/> and sets the default values.
        /// </summary>
        public Watch_dataGetResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "playCount", n => { PlayCount = n.GetDoubleValue(); } },
                { "playCount30Days", n => { PlayCount30Days = n.GetDoubleValue(); } },
                { "playCount7Days", n => { PlayCount7Days = n.GetDoubleValue(); } },
                { "users", n => { Users = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("playCount", PlayCount);
            writer.WriteDoubleValue("playCount30Days", PlayCount30Days);
            writer.WriteDoubleValue("playCount7Days", PlayCount7Days);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.User>("users", Users);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.Watch_data
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Watch_dataGetResponse_data4k : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The playCount property</summary>
        public double? PlayCount { get; set; }
        /// <summary>The playCount30Days property</summary>
        public double? PlayCount30Days { get; set; }
        /// <summary>The playCount7Days property</summary>
        public double? PlayCount7Days { get; set; }
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.User>? Users { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.User> Users { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k"/> and sets the default values.
        /// </summary>
        public Watch_dataGetResponse_data4k()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse_data4k();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "playCount", n => { PlayCount = n.GetDoubleValue(); } },
                { "playCount30Days", n => { PlayCount30Days = n.GetDoubleValue(); } },
                { "playCount7Days", n => { PlayCount7Days = n.GetDoubleValue(); } },
                { "users", n => { Users = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.User>(global::FluentFin.Plugins.Jellyseer.Models.User.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("playCount", PlayCount);
            writer.WriteDoubleValue("playCount30Days", PlayCount30Days);
            writer.WriteDoubleValue("playCount7Days", PlayCount7Days);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.User>("users", Users);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.Watch_data
{
    /// <summary>
    /// Builds and executes requests for operations under \media\{mediaId}\watch_data
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Watch_dataRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Watch_dataRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}/watch_data", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Watch_dataRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/media/{mediaId}/watch_data", rawUrl)
        {
        }
        /// <summary>
        /// Returns play count, play duration, and users who have watched the media.Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse?> GetAsWatch_dataGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse> GetAsWatch_dataGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns play count, play duration, and users who have watched the media.Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWatch_dataGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns play count, play duration, and users who have watched the media.Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Watch_dataRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Media.Item.Watch_data
{
    [Obsolete("This class is obsolete. Use Watch_dataGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Watch_dataResponse : global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Media.Item.Watch_data.Watch_dataResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The audienceRating property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse_audienceRating? AudienceRating { get; set; }
        /// <summary>The audienceScore property</summary>
        public double? AudienceScore { get; set; }
        /// <summary>The criticsRating property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse_criticsRating? CriticsRating { get; set; }
        /// <summary>The criticsScore property</summary>
        public double? CriticsScore { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The year property</summary>
        public double? Year { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse"/> and sets the default values.
        /// </summary>
        public RatingsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audienceRating", n => { AudienceRating = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse_audienceRating>(); } },
                { "audienceScore", n => { AudienceScore = n.GetDoubleValue(); } },
                { "criticsRating", n => { CriticsRating = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse_criticsRating>(); } },
                { "criticsScore", n => { CriticsScore = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "year", n => { Year = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse_audienceRating>("audienceRating", AudienceRating);
            writer.WriteDoubleValue("audienceScore", AudienceScore);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse_criticsRating>("criticsRating", CriticsRating);
            writer.WriteDoubleValue("criticsScore", CriticsScore);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("url", Url);
            writer.WriteDoubleValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RatingsGetResponse_audienceRating
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "Spilled")]
        #pragma warning disable CS1591
        Spilled,
        #pragma warning restore CS1591
        [EnumMember(Value = "Upright")]
        #pragma warning disable CS1591
        Upright,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RatingsGetResponse_criticsRating
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "Rotten")]
        #pragma warning disable CS1591
        Rotten,
        #pragma warning restore CS1591
        [EnumMember(Value = "Fresh")]
        #pragma warning disable CS1591
        Fresh,
        #pragma warning restore CS1591
        [EnumMember(Value = "Certified Fresh")]
        #pragma warning disable CS1591
        CertifiedFresh,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratings
{
    /// <summary>
    /// Builds and executes requests for operations under \movie\{movieId}\ratings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RatingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RatingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/ratings", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RatingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/ratings", rawUrl)
        {
        }
        /// <summary>
        /// Returns ratings based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse?> GetAsRatingsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse> GetAsRatingsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns ratings based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsRatingsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns ratings based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RatingsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratings
{
    [Obsolete("This class is obsolete. Use RatingsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingsResponse : global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratings.RatingsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingscombinedGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The imdb property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb? Imdb { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb Imdb { get; set; }
#endif
        /// <summary>The rt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt? Rt { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt Rt { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse"/> and sets the default values.
        /// </summary>
        public RatingscombinedGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "imdb", n => { Imdb = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb>(global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb.CreateFromDiscriminatorValue); } },
                { "rt", n => { Rt = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt>(global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb>("imdb", Imdb);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt>("rt", Rt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingscombinedGetResponse_imdb : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The criticsScore property</summary>
        public double? CriticsScore { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb"/> and sets the default values.
        /// </summary>
        public RatingscombinedGetResponse_imdb()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_imdb();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "criticsScore", n => { CriticsScore = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("criticsScore", CriticsScore);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("url", Url);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingscombinedGetResponse_rt : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The audienceRating property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt_audienceRating? AudienceRating { get; set; }
        /// <summary>The audienceScore property</summary>
        public double? AudienceScore { get; set; }
        /// <summary>The criticsRating property</summary>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt_criticsRating? CriticsRating { get; set; }
        /// <summary>The criticsScore property</summary>
        public double? CriticsScore { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The year property</summary>
        public double? Year { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt"/> and sets the default values.
        /// </summary>
        public RatingscombinedGetResponse_rt()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "audienceRating", n => { AudienceRating = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt_audienceRating>(); } },
                { "audienceScore", n => { AudienceScore = n.GetDoubleValue(); } },
                { "criticsRating", n => { CriticsRating = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt_criticsRating>(); } },
                { "criticsScore", n => { CriticsScore = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "year", n => { Year = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt_audienceRating>("audienceRating", AudienceRating);
            writer.WriteDoubleValue("audienceScore", AudienceScore);
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse_rt_criticsRating>("criticsRating", CriticsRating);
            writer.WriteDoubleValue("criticsScore", CriticsScore);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("url", Url);
            writer.WriteDoubleValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RatingscombinedGetResponse_rt_audienceRating
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "Spilled")]
        #pragma warning disable CS1591
        Spilled,
        #pragma warning restore CS1591
        [EnumMember(Value = "Upright")]
        #pragma warning disable CS1591
        Upright,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RatingscombinedGetResponse_rt_criticsRating
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "Rotten")]
        #pragma warning disable CS1591
        Rotten,
        #pragma warning restore CS1591
        [EnumMember(Value = "Fresh")]
        #pragma warning disable CS1591
        Fresh,
        #pragma warning restore CS1591
        [EnumMember(Value = "Certified Fresh")]
        #pragma warning disable CS1591
        CertifiedFresh,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined
{
    /// <summary>
    /// Builds and executes requests for operations under \movie\{movieId}\ratingscombined
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RatingscombinedRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RatingscombinedRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/ratingscombined", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RatingscombinedRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/ratingscombined", rawUrl)
        {
        }
        /// <summary>
        /// Returns ratings from RottenTomatoes and IMDB based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse?> GetAsRatingscombinedGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse> GetAsRatingscombinedGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns ratings from RottenTomatoes and IMDB based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsRatingscombinedGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns ratings from RottenTomatoes and IMDB based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RatingscombinedRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined
{
    [Obsolete("This class is obsolete. Use RatingscombinedGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingscombinedResponse : global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Ratingscombined.RatingscombinedResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RecommendationsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse"/> and sets the default values.
        /// </summary>
        public RecommendationsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations
{
    /// <summary>
    /// Builds and executes requests for operations under \movie\{movieId}\recommendations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RecommendationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecommendationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/recommendations{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecommendationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/recommendations{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of recommended movies based on provided movie ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse?> GetAsRecommendationsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse> GetAsRecommendationsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of recommended movies based on provided movie ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsRecommendationsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of recommended movies based on provided movie ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns list of recommended movies based on provided movie ID in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RecommendationsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RecommendationsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations
{
    [Obsolete("This class is obsolete. Use RecommendationsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RecommendationsResponse : global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Recommendations.RecommendationsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Similar
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SimilarGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse"/> and sets the default values.
        /// </summary>
        public SimilarGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Similar
{
    /// <summary>
    /// Builds and executes requests for operations under \movie\{movieId}\similar
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SimilarRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SimilarRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/similar{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SimilarRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/movie/{movieId}/similar{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of similar movies based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse?> GetAsSimilarGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse> GetAsSimilarGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of similar movies based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsSimilarGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of similar movies based on the provided movieId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns list of similar movies based on the provided movieId in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SimilarRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SimilarRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Movie.Item.Similar
{
    [Obsolete("This class is obsolete. Use SimilarGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SimilarResponse : global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Movie.Item.Similar.SimilarResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Combined_creditsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cast property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.CreditCast>? Cast { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.CreditCast> Cast { get; set; }
#endif
        /// <summary>The crew property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.CreditCrew>? Crew { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.CreditCrew> Crew { get; set; }
#endif
        /// <summary>The id property</summary>
        public double? Id { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse"/> and sets the default values.
        /// </summary>
        public Combined_creditsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cast", n => { Cast = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.CreditCast>(global::FluentFin.Plugins.Jellyseer.Models.CreditCast.CreateFromDiscriminatorValue)?.AsList(); } },
                { "crew", n => { Crew = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.CreditCrew>(global::FluentFin.Plugins.Jellyseer.Models.CreditCrew.CreateFromDiscriminatorValue)?.AsList(); } },
                { "id", n => { Id = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.CreditCast>("cast", Cast);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.CreditCrew>("crew", Crew);
            writer.WriteDoubleValue("id", Id);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits
{
    /// <summary>
    /// Builds and executes requests for operations under \person\{personId}\combined_credits
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Combined_creditsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Combined_creditsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/person/{personId}/combined_credits{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Combined_creditsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/person/{personId}/combined_credits{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns the person&apos;s combined credits based on the provided personId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse?> GetAsCombined_creditsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder.Combined_creditsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse> GetAsCombined_creditsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder.Combined_creditsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the person&apos;s combined credits based on the provided personId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsCombined_creditsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder.Combined_creditsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder.Combined_creditsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the person&apos;s combined credits based on the provided personId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder.Combined_creditsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder.Combined_creditsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns the person&apos;s combined credits based on the provided personId in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Combined_creditsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Combined_creditsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsRequestBuilder.Combined_creditsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits
{
    [Obsolete("This class is obsolete. Use Combined_creditsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Combined_creditsResponse : global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Person.Item.Combined_credits.Combined_creditsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request.Item.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \request\{requestId}\{status}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithStatusItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStatusItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/{requestId}/{status}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStatusItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/{requestId}/{status}", rawUrl)
        {
        }
        /// <summary>
        /// Updates a request&apos;s status to approved or declined. Also returns the request in a JSON object.Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaRequest"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates a request&apos;s status to approved or declined. Also returns the request in a JSON object.Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Request.Item.Item.WithStatusItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithStatusItemRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Request.Item.Retry
{
    /// <summary>
    /// Builds and executes requests for operations under \request\{requestId}\retry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RetryRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.Retry.RetryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RetryRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/{requestId}/retry", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.Retry.RetryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RetryRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/request/{requestId}/retry", rawUrl)
        {
        }
        /// <summary>
        /// Retries a request by resending requests to Sonarr or Radarr.Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MediaRequest"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retries a request by resending requests to Sonarr or Radarr.Requires the `MANAGE_REQUESTS` permission or `ADMIN`.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Request.Item.Retry.RetryRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Request.Item.Retry.RetryRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Request.Item.Retry.RetryRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RetryRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Radarr.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithRadarrGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The profiles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile? Profiles { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile Profiles { get; set; }
#endif
        /// <summary>The server property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings? Server { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings Server { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse"/> and sets the default values.
        /// </summary>
        public WithRadarrGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "profiles", n => { Profiles = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>(global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile.CreateFromDiscriminatorValue); } },
                { "server", n => { Server = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>("profiles", Profiles);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>("server", Server);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Radarr.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \service\radarr\{radarrId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithRadarrItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRadarrItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/radarr/{radarrId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRadarrItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/radarr/{radarrId}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a Radarr server&apos;s quality profile and root folder details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse?> GetAsWithRadarrGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse> GetAsWithRadarrGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a Radarr server&apos;s quality profile and root folder details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithRadarrGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a Radarr server&apos;s quality profile and root folder details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRadarrItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Radarr.Item
{
    [Obsolete("This class is obsolete. Use WithRadarrGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithRadarrResponse : global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Service.Radarr.Item.WithRadarrResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Sonarr.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithSonarrGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The profiles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile? Profiles { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile Profiles { get; set; }
#endif
        /// <summary>The server property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings? Server { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings Server { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse"/> and sets the default values.
        /// </summary>
        public WithSonarrGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "profiles", n => { Profiles = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>(global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile.CreateFromDiscriminatorValue); } },
                { "server", n => { Server = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>("profiles", Profiles);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>("server", Server);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Sonarr.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \service\sonarr\{sonarrId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithSonarrItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSonarrItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr/{sonarrId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSonarrItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr/{sonarrId}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a Sonarr server&apos;s quality profile and root folder details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse?> GetAsWithSonarrGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse> GetAsWithSonarrGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a Sonarr server&apos;s quality profile and root folder details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithSonarrGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a Sonarr server&apos;s quality profile and root folder details in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSonarrItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Sonarr.Item
{
    [Obsolete("This class is obsolete. Use WithSonarrGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithSonarrResponse : global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Item.WithSonarrResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup
{
    /// <summary>
    /// Builds and executes requests for operations under \service\sonarr\lookup
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LookupRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.service.sonarr.lookup.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("tmdbId", position);
                return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.service.sonarr.lookup.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("tmdbId", position);
                return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.LookupRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LookupRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr/lookup", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.LookupRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LookupRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr/lookup", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\cache\{cacheId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithCacheItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The flush property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush.FlushRequestBuilder Flush
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush.FlushRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.WithCacheItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCacheItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/cache/{cacheId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.WithCacheItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithCacheItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/cache/{cacheId}", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Discover.Add
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AddPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Data { get; set; }
#nullable restore
#else
        public string Data { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The type property</summary>
        public double? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody"/> and sets the default values.
        /// </summary>
        public AddPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "data", n => { Data = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "type", n => { Type = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("data", Data);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Discover.Add
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\discover\add
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AddRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AddRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover/add", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AddRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover/add", rawUrl)
        {
        }
        /// <summary>
        /// Add a single slider and return the newly created slider. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider?> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add a single slider and return the newly created slider. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Add.AddRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AddRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Discover.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\discover\{sliderId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithSliderItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSliderItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover/{sliderId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSliderItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover/{sliderId}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes the slider with the provided sliderId. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates a single slider and return the newly updated slider. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider?> PutAsync(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider> PutAsync(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.DiscoverSlider.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes the slider with the provided sliderId. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates a single slider and return the newly updated slider. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSliderItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSliderItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Discover.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithSliderPutRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Data { get; set; }
#nullable restore
#else
        public string Data { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The type property</summary>
        public double? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody"/> and sets the default values.
        /// </summary>
        public WithSliderPutRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Item.WithSliderPutRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "data", n => { Data = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "type", n => { Type = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("data", Data);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Discover.Reset
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\discover\reset
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ResetRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Reset.ResetRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResetRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover/reset", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Reset.ResetRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResetRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/discover/reset", rawUrl)
        {
        }
        /// <summary>
        /// Resets all discovery sliders to the default values. Requires the `ADMIN` permission.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Resets all discovery sliders to the default values. Requires the `ADMIN` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Discover.Reset.ResetRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Discover.Reset.ResetRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Discover.Reset.ResetRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ResetRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jellyfin\library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LibraryRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LibraryRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin/library{?enable,sync*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LibraryRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin/library{?enable,sync*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Jellyfin libraries in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of Jellyfin libraries in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of Jellyfin libraries in a JSON array.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LibraryRequestBuilderGetQueryParameters 
        {
            /// <summary>Comma separated list of libraries to enable. Any libraries not passed will be disabled!</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("enable")]
            public string? Enable { get; set; }
#nullable restore
#else
            [QueryParameter("enable")]
            public string Enable { get; set; }
#endif
            /// <summary>Syncs the current libraries with the current Jellyfin server</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sync")]
            public string? Sync { get; set; }
#nullable restore
#else
            [QueryParameter("sync")]
            public string Sync { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LibraryRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The currentLibrary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary? CurrentLibrary { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary CurrentLibrary { get; set; }
#endif
        /// <summary>The libraries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>? Libraries { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary> Libraries { get; set; }
#endif
        /// <summary>The progress property</summary>
        public double? Progress { get; set; }
        /// <summary>The running property</summary>
        public bool? Running { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse"/> and sets the default values.
        /// </summary>
        public SyncGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currentLibrary", n => { CurrentLibrary = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>(global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary.CreateFromDiscriminatorValue); } },
                { "libraries", n => { Libraries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>(global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "progress", n => { Progress = n.GetDoubleValue(); } },
                { "running", n => { Running = n.GetBoolValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>("currentLibrary", CurrentLibrary);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>("libraries", Libraries);
            writer.WriteDoubleValue("progress", Progress);
            writer.WriteBoolValue("running", Running);
            writer.WriteDoubleValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cancel property</summary>
        public bool? Cancel { get; set; }
        /// <summary>The start property</summary>
        public bool? Start { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody"/> and sets the default values.
        /// </summary>
        public SyncPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cancel", n => { Cancel = n.GetBoolValue(); } },
                { "start", n => { Start = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("cancel", Cancel);
            writer.WriteBoolValue("start", Start);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The currentLibrary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary? CurrentLibrary { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary CurrentLibrary { get; set; }
#endif
        /// <summary>The libraries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>? Libraries { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary> Libraries { get; set; }
#endif
        /// <summary>The progress property</summary>
        public double? Progress { get; set; }
        /// <summary>The running property</summary>
        public bool? Running { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse"/> and sets the default values.
        /// </summary>
        public SyncPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currentLibrary", n => { CurrentLibrary = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>(global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary.CreateFromDiscriminatorValue); } },
                { "libraries", n => { Libraries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>(global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "progress", n => { Progress = n.GetDoubleValue(); } },
                { "running", n => { Running = n.GetBoolValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>("currentLibrary", CurrentLibrary);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.JellyfinLibrary>("libraries", Libraries);
            writer.WriteDoubleValue("progress", Progress);
            writer.WriteBoolValue("running", Running);
            writer.WriteDoubleValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jellyfin\sync
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SyncRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SyncRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin/sync", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SyncRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin/sync", rawUrl)
        {
        }
        /// <summary>
        /// Returns sync progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse?> GetAsSyncGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse> GetAsSyncGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns sync progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsSyncGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Runs a full Jellyfin library sync and returns the progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse?> PostAsSyncPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse> PostAsSyncPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Runs a full Jellyfin library sync and returns the progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsSyncPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns sync progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Runs a full Jellyfin library sync and returns the progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SyncRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SyncRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync
{
    [Obsolete("This class is obsolete. Use SyncGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncResponse : global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Sync.SyncResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Users : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The userId property</summary>
        public int? UserId { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users"/> and sets the default values.
        /// </summary>
        public Users()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "userId", n => { UserId = n.GetIntValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("userId", UserId);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jellyfin\users
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UsersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin/users", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jellyfin/users", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Jellyfin Users in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.Users.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of Jellyfin Users in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.UsersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.UsersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jellyfin.Users.UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jobs.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jobs\{jobId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithJobItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The cancel property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel.CancelRequestBuilder Cancel
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel.CancelRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The run property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run.RunRequestBuilder Run
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run.RunRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The schedule property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.ScheduleRequestBuilder Schedule
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.ScheduleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.WithJobItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithJobItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.WithJobItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithJobItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\main\regenerate
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RegenerateRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate.RegenerateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegenerateRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/main/regenerate", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate.RegenerateRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RegenerateRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/main/regenerate", rawUrl)
        {
        }
        /// <summary>
        /// Returns main settings in a JSON object, using the new API key.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.MainSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.MainSettings> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.MainSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.MainSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns main settings in a JSON object, using the new API key.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate.RegenerateRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate.RegenerateRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Main.Regenerate.RegenerateRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RegenerateRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\discord
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DiscordRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.DiscordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DiscordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/discord", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.DiscordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DiscordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/discord", rawUrl)
        {
        }
        /// <summary>
        /// Returns current Discord notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates Discord notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current Discord notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates Discord notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.DiscordRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.DiscordRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.DiscordRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DiscordRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DiscordRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Email
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\email
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EmailRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.EmailRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmailRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/email", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.EmailRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EmailRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/email", rawUrl)
        {
        }
        /// <summary>
        /// Returns current email notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates email notification settings with provided values
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current email notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates email notification settings with provided values
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.EmailRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.EmailRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.EmailRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EmailRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EmailRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\gotify
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GotifyRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.GotifyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GotifyRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/gotify", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.GotifyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public GotifyRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/gotify", rawUrl)
        {
        }
        /// <summary>
        /// Returns current Gotify notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.GotifySettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.GotifySettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update Gotify notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.GotifySettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.GotifySettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.GotifySettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current Gotify notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update Gotify notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.GotifyRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.GotifyRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.GotifyRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class GotifyRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class GotifyRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\lunasea
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LunaseaRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.LunaseaRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LunaseaRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/lunasea", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.LunaseaRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LunaseaRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/lunasea", rawUrl)
        {
        }
        /// <summary>
        /// Returns current LunaSea notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates LunaSea notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current LunaSea notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates LunaSea notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.LunaseaRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.LunaseaRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.LunaseaRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LunaseaRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LunaseaRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\ntfy
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NtfyRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.NtfyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NtfyRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/ntfy", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.NtfyRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NtfyRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/ntfy", rawUrl)
        {
        }
        /// <summary>
        /// Returns current ntfy.sh notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NtfySettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.NtfySettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update ntfy.sh notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.NtfySettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.NtfySettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.NtfySettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current ntfy.sh notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update ntfy.sh notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.NtfyRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.NtfyRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.NtfyRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NtfyRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NtfyRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\pushbullet
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PushbulletRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.PushbulletRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushbulletRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushbullet", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.PushbulletRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushbulletRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushbullet", rawUrl)
        {
        }
        /// <summary>
        /// Returns current Pushbullet notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update Pushbullet notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current Pushbullet notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update Pushbullet notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.PushbulletRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.PushbulletRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.PushbulletRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PushbulletRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PushbulletRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\pushover
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PushoverRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The sounds property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder Sounds
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.PushoverRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushoverRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushover", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.PushoverRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushoverRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushover", rawUrl)
        {
        }
        /// <summary>
        /// Returns current Pushover notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update Pushover notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current Pushover notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update Pushover notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.PushoverRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.PushoverRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.PushoverRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PushoverRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PushoverRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\slack
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SlackRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.SlackRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SlackRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/slack", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.SlackRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SlackRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/slack", rawUrl)
        {
        }
        /// <summary>
        /// Returns current Slack notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SlackSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SlackSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates Slack notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SlackSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.SlackSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SlackSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current Slack notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates Slack notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.SlackRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.SlackRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.SlackRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SlackRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SlackRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\telegram
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TelegramRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.TelegramRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TelegramRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/telegram", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.TelegramRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TelegramRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/telegram", rawUrl)
        {
        }
        /// <summary>
        /// Returns current Telegram notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update Telegram notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current Telegram notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update Telegram notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.TelegramRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.TelegramRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.TelegramRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TelegramRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TelegramRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\webhook
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WebhookRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.WebhookRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebhookRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webhook", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.WebhookRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebhookRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webhook", rawUrl)
        {
        }
        /// <summary>
        /// Returns current webhook notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates webhook notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current webhook notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates webhook notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.WebhookRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.WebhookRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.WebhookRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WebhookRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WebhookRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\webpush
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WebpushRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The test property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test.TestRequestBuilder Test
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test.TestRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.WebpushRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebpushRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webpush", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.WebpushRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WebpushRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webpush", rawUrl)
        {
        }
        /// <summary>
        /// Returns current Web Push notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates Web Push notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns current Web Push notification settings in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates Web Push notification settings with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.WebpushRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.WebpushRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.WebpushRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WebpushRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WebpushRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Devices
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\plex\devices
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DevicesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The servers property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers.ServersRequestBuilder Servers
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers.ServersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.DevicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DevicesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/devices", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.DevicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DevicesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/devices", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Library
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\plex\library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LibraryRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LibraryRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/library{?enable,sync*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LibraryRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/library{?enable,sync*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Plex libraries in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of Plex libraries in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of Plex libraries in a JSON array.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LibraryRequestBuilderGetQueryParameters 
        {
            /// <summary>Comma separated list of libraries to enable. Any libraries not passed will be disabled!</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("enable")]
            public string? Enable { get; set; }
#nullable restore
#else
            [QueryParameter("enable")]
            public string Enable { get; set; }
#endif
            /// <summary>Syncs the current libraries with the current Plex server</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sync")]
            public string? Sync { get; set; }
#nullable restore
#else
            [QueryParameter("sync")]
            public string Sync { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LibraryRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Library.LibraryRequestBuilder.LibraryRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Sync
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The currentLibrary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary? CurrentLibrary { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary CurrentLibrary { get; set; }
#endif
        /// <summary>The libraries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>? Libraries { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary> Libraries { get; set; }
#endif
        /// <summary>The progress property</summary>
        public double? Progress { get; set; }
        /// <summary>The running property</summary>
        public bool? Running { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse"/> and sets the default values.
        /// </summary>
        public SyncGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currentLibrary", n => { CurrentLibrary = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>(global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary.CreateFromDiscriminatorValue); } },
                { "libraries", n => { Libraries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>(global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "progress", n => { Progress = n.GetDoubleValue(); } },
                { "running", n => { Running = n.GetBoolValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>("currentLibrary", CurrentLibrary);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>("libraries", Libraries);
            writer.WriteDoubleValue("progress", Progress);
            writer.WriteBoolValue("running", Running);
            writer.WriteDoubleValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Sync
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cancel property</summary>
        public bool? Cancel { get; set; }
        /// <summary>The start property</summary>
        public bool? Start { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody"/> and sets the default values.
        /// </summary>
        public SyncPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cancel", n => { Cancel = n.GetBoolValue(); } },
                { "start", n => { Start = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("cancel", Cancel);
            writer.WriteBoolValue("start", Start);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Sync
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The currentLibrary property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary? CurrentLibrary { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary CurrentLibrary { get; set; }
#endif
        /// <summary>The libraries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>? Libraries { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary> Libraries { get; set; }
#endif
        /// <summary>The progress property</summary>
        public double? Progress { get; set; }
        /// <summary>The running property</summary>
        public bool? Running { get; set; }
        /// <summary>The total property</summary>
        public double? Total { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse"/> and sets the default values.
        /// </summary>
        public SyncPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currentLibrary", n => { CurrentLibrary = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>(global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary.CreateFromDiscriminatorValue); } },
                { "libraries", n => { Libraries = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>(global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "progress", n => { Progress = n.GetDoubleValue(); } },
                { "running", n => { Running = n.GetBoolValue(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>("currentLibrary", CurrentLibrary);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.PlexLibrary>("libraries", Libraries);
            writer.WriteDoubleValue("progress", Progress);
            writer.WriteBoolValue("running", Running);
            writer.WriteDoubleValue("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Sync
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\plex\sync
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SyncRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SyncRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/sync", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SyncRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/sync", rawUrl)
        {
        }
        /// <summary>
        /// Returns scan progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse?> GetAsSyncGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse> GetAsSyncGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns scan progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsSyncGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Runs a full Plex library scan and returns the progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse?> PostAsSyncPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse> PostAsSyncPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Runs a full Plex library scan and returns the progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsSyncPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns scan progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Runs a full Plex library scan and returns the progress in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SyncRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SyncRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Sync
{
    [Obsolete("This class is obsolete. Use SyncGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SyncResponse : global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Sync.SyncResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Users
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Users : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The thumb property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Thumb { get; set; }
#nullable restore
#else
        public string Thumb { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users"/> and sets the default values.
        /// </summary>
        public Users()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "email", n => { Email = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "thumb", n => { Thumb = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("email", Email);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("thumb", Thumb);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Users
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\plex\users
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UsersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/users", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/users", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of Plex users in a JSON array.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.Users.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of Plex users in a JSON array.Requires the `MANAGE_USERS` permission.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.UsersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.UsersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Users.UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Radarr.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\radarr\{radarrId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithRadarrItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The profiles property</summary>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles.ProfilesRequestBuilder Profiles
        {
            get => new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles.ProfilesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRadarrItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr/{radarrId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithRadarrItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr/{radarrId}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes an existing Radarr instance based on the radarrId parameter.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates an existing Radarr instance with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings?> PutAsync(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings> PutAsync(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an existing Radarr instance based on the radarrId parameter.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates an existing Radarr instance with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.RadarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.WithRadarrItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRadarrItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithRadarrItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Radarr.Test
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TestPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apiKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; set; }
#nullable restore
#else
        public string ApiKey { get; set; }
#endif
        /// <summary>The baseUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseUrl { get; set; }
#nullable restore
#else
        public string BaseUrl { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The port property</summary>
        public double? Port { get; set; }
        /// <summary>The useSsl property</summary>
        public bool? UseSsl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody"/> and sets the default values.
        /// </summary>
        public TestPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiKey", n => { ApiKey = n.GetStringValue(); } },
                { "baseUrl", n => { BaseUrl = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "port", n => { Port = n.GetDoubleValue(); } },
                { "useSsl", n => { UseSsl = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiKey", ApiKey);
            writer.WriteStringValue("baseUrl", BaseUrl);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteDoubleValue("port", Port);
            writer.WriteBoolValue("useSsl", UseSsl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Radarr.Test
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TestPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The profiles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>? Profiles { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile> Profiles { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse"/> and sets the default values.
        /// </summary>
        public TestPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "profiles", n => { Profiles = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>(global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>("profiles", Profiles);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Radarr.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\radarr\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr/test", rawUrl)
        {
        }
        /// <summary>
        /// Tests if the Radarr configuration is valid. Returns profiles and root folders on success.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse?> PostAsTestPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse> PostAsTestPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Tests if the Radarr configuration is valid. Returns profiles and root folders on success.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsTestPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Tests if the Radarr configuration is valid. Returns profiles and root folders on success.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Radarr.Test
{
    [Obsolete("This class is obsolete. Use TestPostResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TestResponse : global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestPostResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Test.TestResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\sonarr\{sonarrId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithSonarrItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSonarrItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/sonarr/{sonarrId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSonarrItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/sonarr/{sonarrId}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes an existing Sonarr instance based on the sonarrId parameter.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings?> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings> DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates an existing Sonarr instance with the provided values.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings?> PutAsync(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings> PutAsync(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an existing Sonarr instance based on the sonarrId parameter.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates an existing Sonarr instance with the provided values.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SonarrSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Item.WithSonarrItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSonarrItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSonarrItemRequestBuilderPutRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TestPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The apiKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApiKey { get; set; }
#nullable restore
#else
        public string ApiKey { get; set; }
#endif
        /// <summary>The baseUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BaseUrl { get; set; }
#nullable restore
#else
        public string BaseUrl { get; set; }
#endif
        /// <summary>The hostname property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Hostname { get; set; }
#nullable restore
#else
        public string Hostname { get; set; }
#endif
        /// <summary>The port property</summary>
        public double? Port { get; set; }
        /// <summary>The useSsl property</summary>
        public bool? UseSsl { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody"/> and sets the default values.
        /// </summary>
        public TestPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "apiKey", n => { ApiKey = n.GetStringValue(); } },
                { "baseUrl", n => { BaseUrl = n.GetStringValue(); } },
                { "hostname", n => { Hostname = n.GetStringValue(); } },
                { "port", n => { Port = n.GetDoubleValue(); } },
                { "useSsl", n => { UseSsl = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("apiKey", ApiKey);
            writer.WriteStringValue("baseUrl", BaseUrl);
            writer.WriteStringValue("hostname", Hostname);
            writer.WriteDoubleValue("port", Port);
            writer.WriteBoolValue("useSsl", UseSsl);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TestPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The profiles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>? Profiles { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile> Profiles { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse"/> and sets the default values.
        /// </summary>
        public TestPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "profiles", n => { Profiles = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>(global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>("profiles", Profiles);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\sonarr\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/sonarr/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/sonarr/test", rawUrl)
        {
        }
        /// <summary>
        /// Tests if the Sonarr configuration is valid. Returns profiles and root folders on success.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse?> PostAsTestPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse> PostAsTestPostResponseAsync(global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Tests if the Sonarr configuration is valid. Returns profiles and root folders on success.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsTestPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Tests if the Sonarr configuration is valid. Returns profiles and root folders on success.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test
{
    [Obsolete("This class is obsolete. Use TestPostResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TestResponse : global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestPostResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Sonarr.Test.TestResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Ratings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The criticsRating property</summary>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse_criticsRating? CriticsRating { get; set; }
        /// <summary>The criticsScore property</summary>
        public double? CriticsScore { get; set; }
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The url property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The year property</summary>
        public double? Year { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse"/> and sets the default values.
        /// </summary>
        public RatingsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "criticsRating", n => { CriticsRating = n.GetEnumValue<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse_criticsRating>(); } },
                { "criticsScore", n => { CriticsScore = n.GetDoubleValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "year", n => { Year = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse_criticsRating>("criticsRating", CriticsRating);
            writer.WriteDoubleValue("criticsScore", CriticsScore);
            writer.WriteStringValue("title", Title);
            writer.WriteStringValue("url", Url);
            writer.WriteDoubleValue("year", Year);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Ratings
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public enum RatingsGetResponse_criticsRating
    #pragma warning restore CS1591
    {
        [EnumMember(Value = "Rotten")]
        #pragma warning disable CS1591
        Rotten,
        #pragma warning restore CS1591
        [EnumMember(Value = "Fresh")]
        #pragma warning disable CS1591
        Fresh,
        #pragma warning restore CS1591
    }
}

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Ratings
{
    /// <summary>
    /// Builds and executes requests for operations under \tv\{tvId}\ratings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RatingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RatingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/ratings", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RatingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/ratings", rawUrl)
        {
        }
        /// <summary>
        /// Returns ratings based on provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse?> GetAsRatingsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse> GetAsRatingsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns ratings based on provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsRatingsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns ratings based on provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RatingsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Ratings
{
    [Obsolete("This class is obsolete. Use RatingsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RatingsResponse : global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Ratings.RatingsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RecommendationsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse"/> and sets the default values.
        /// </summary>
        public RecommendationsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(global::FluentFin.Plugins.Jellyseer.Models.TvResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations
{
    /// <summary>
    /// Builds and executes requests for operations under \tv\{tvId}\recommendations
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RecommendationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecommendationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/recommendations{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RecommendationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/recommendations{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of recommended TV series based on the provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse?> GetAsRecommendationsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse> GetAsRecommendationsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of recommended TV series based on the provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsRecommendationsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of recommended TV series based on the provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns list of recommended TV series based on the provided tvId in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RecommendationsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RecommendationsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsRequestBuilder.RecommendationsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations
{
    [Obsolete("This class is obsolete. Use RecommendationsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RecommendationsResponse : global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Recommendations.RecommendationsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Season
{
    /// <summary>
    /// Builds and executes requests for operations under \tv\{tvId}\season
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SeasonRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.tv.item.season.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder this[double position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("seasonId", position);
                return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.tv.item.season.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("seasonId", position);
                return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.SeasonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SeasonRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/season", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.SeasonRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SeasonRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/season", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Similar
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SimilarGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse"/> and sets the default values.
        /// </summary>
        public SimilarGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(global::FluentFin.Plugins.Jellyseer.Models.TvResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Similar
{
    /// <summary>
    /// Builds and executes requests for operations under \tv\{tvId}\similar
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SimilarRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SimilarRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/similar{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SimilarRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/similar{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of similar TV series based on the provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse?> GetAsSimilarGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse> GetAsSimilarGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of similar TV series based on the provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsSimilarGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of similar TV series based on the provided tvId in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns list of similar TV series based on the provided tvId in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SimilarRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SimilarRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarRequestBuilder.SimilarRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Similar
{
    [Obsolete("This class is obsolete. Use SimilarGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SimilarResponse : global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Similar.SimilarResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.PushSubscription
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\pushSubscription
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PushSubscriptionRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the FluentFin.Plugins.Jellyseer.user.item.pushSubscription.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder"/></returns>
        public global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("key", position);
                return new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.PushSubscriptionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushSubscriptionRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/pushSubscription", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.PushSubscriptionRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushSubscriptionRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/pushSubscription", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PushSubscriptionsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The auth property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Auth { get; set; }
#nullable restore
#else
        public string Auth { get; set; }
#endif
        /// <summary>The endpoint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Endpoint { get; set; }
#nullable restore
#else
        public string Endpoint { get; set; }
#endif
        /// <summary>The p256dh property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? P256dh { get; set; }
#nullable restore
#else
        public string P256dh { get; set; }
#endif
        /// <summary>The userAgent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAgent { get; set; }
#nullable restore
#else
        public string UserAgent { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse"/> and sets the default values.
        /// </summary>
        public PushSubscriptionsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auth", n => { Auth = n.GetStringValue(); } },
                { "endpoint", n => { Endpoint = n.GetStringValue(); } },
                { "p256dh", n => { P256dh = n.GetStringValue(); } },
                { "userAgent", n => { UserAgent = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("auth", Auth);
            writer.WriteStringValue("endpoint", Endpoint);
            writer.WriteStringValue("p256dh", P256dh);
            writer.WriteStringValue("userAgent", UserAgent);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\pushSubscriptions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PushSubscriptionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushSubscriptionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/pushSubscriptions", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PushSubscriptionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/pushSubscriptions", rawUrl)
        {
        }
        /// <summary>
        /// Returns all web push notification settings for a user in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse?> GetAsPushSubscriptionsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse> GetAsPushSubscriptionsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all web push notification settings for a user in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsPushSubscriptionsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns all web push notification settings for a user in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PushSubscriptionsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions
{
    [Obsolete("This class is obsolete. Use PushSubscriptionsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PushSubscriptionsResponse : global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscriptions.PushSubscriptionsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Quota
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class QuotaGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The movie property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie? Movie { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie Movie { get; set; }
#endif
        /// <summary>The tv property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv? Tv { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv Tv { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse"/> and sets the default values.
        /// </summary>
        public QuotaGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "movie", n => { Movie = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie>(global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie.CreateFromDiscriminatorValue); } },
                { "tv", n => { Tv = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv>(global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie>("movie", Movie);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv>("tv", Tv);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Quota
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class QuotaGetResponse_movie : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The days property</summary>
        public double? Days { get; set; }
        /// <summary>The limit property</summary>
        public double? Limit { get; set; }
        /// <summary>The remaining property</summary>
        public double? Remaining { get; set; }
        /// <summary>The restricted property</summary>
        public bool? Restricted { get; set; }
        /// <summary>The used property</summary>
        public double? Used { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie"/> and sets the default values.
        /// </summary>
        public QuotaGetResponse_movie()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_movie();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "days", n => { Days = n.GetDoubleValue(); } },
                { "limit", n => { Limit = n.GetDoubleValue(); } },
                { "remaining", n => { Remaining = n.GetDoubleValue(); } },
                { "restricted", n => { Restricted = n.GetBoolValue(); } },
                { "used", n => { Used = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("days", Days);
            writer.WriteDoubleValue("limit", Limit);
            writer.WriteDoubleValue("remaining", Remaining);
            writer.WriteBoolValue("restricted", Restricted);
            writer.WriteDoubleValue("used", Used);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Quota
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class QuotaGetResponse_tv : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The days property</summary>
        public double? Days { get; set; }
        /// <summary>The limit property</summary>
        public double? Limit { get; set; }
        /// <summary>The remaining property</summary>
        public double? Remaining { get; set; }
        /// <summary>The restricted property</summary>
        public bool? Restricted { get; set; }
        /// <summary>The used property</summary>
        public double? Used { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv"/> and sets the default values.
        /// </summary>
        public QuotaGetResponse_tv()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse_tv();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "days", n => { Days = n.GetDoubleValue(); } },
                { "limit", n => { Limit = n.GetDoubleValue(); } },
                { "remaining", n => { Remaining = n.GetDoubleValue(); } },
                { "restricted", n => { Restricted = n.GetBoolValue(); } },
                { "used", n => { Used = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("days", Days);
            writer.WriteDoubleValue("limit", Limit);
            writer.WriteDoubleValue("remaining", Remaining);
            writer.WriteBoolValue("restricted", Restricted);
            writer.WriteDoubleValue("used", Used);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Quota
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\quota
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class QuotaRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public QuotaRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/quota", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public QuotaRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/quota", rawUrl)
        {
        }
        /// <summary>
        /// Returns quota details for a user in a JSON object. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse?> GetAsQuotaGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse> GetAsQuotaGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns quota details for a user in a JSON object. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsQuotaGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns quota details for a user in a JSON object. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class QuotaRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Quota
{
    [Obsolete("This class is obsolete. Use QuotaGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class QuotaResponse : global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Quota.QuotaResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Requests
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RequestsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The pageInfo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo? PageInfo { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.PageInfo PageInfo { get; set; }
#endif
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest> Results { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse"/> and sets the default values.
        /// </summary>
        public RequestsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "pageInfo", n => { PageInfo = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>(global::FluentFin.Plugins.Jellyseer.Models.PageInfo.CreateFromDiscriminatorValue); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>(global::FluentFin.Plugins.Jellyseer.Models.MediaRequest.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.PageInfo>("pageInfo", PageInfo);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaRequest>("results", Results);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Requests
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\requests
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RequestsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RequestsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/requests{?skip*,take*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RequestsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/requests{?skip*,take*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves a user&apos;s requests in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse?> GetAsRequestsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse> GetAsRequestsGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a user&apos;s requests in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsRequestsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a user&apos;s requests in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves a user&apos;s requests in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RequestsRequestBuilderGetQueryParameters 
        {
            [QueryParameter("skip")]
            public double? Skip { get; set; }
            [QueryParameter("take")]
            public double? Take { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RequestsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsRequestBuilder.RequestsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Requests
{
    [Obsolete("This class is obsolete. Use RequestsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RequestsResponse : global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Requests.RequestsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SettingsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The linkedAccounts property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.LinkedAccountsRequestBuilder LinkedAccounts
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.LinkedAccountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The main property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainRequestBuilder Main
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The notifications property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications.NotificationsRequestBuilder Notifications
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications.NotificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The password property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordRequestBuilder Password
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The permissions property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsRequestBuilder Permissions
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.SettingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SettingsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.SettingsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SettingsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Watchlist
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchlistGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse"/> and sets the default values.
        /// </summary>
        public WatchlistGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results>(global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Watchlist
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchlistGetResponse_results : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ratingKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RatingKey { get; set; }
#nullable restore
#else
        public string RatingKey { get; set; }
#endif
        /// <summary>The title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>The tmdbId property</summary>
        public double? TmdbId { get; set; }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results"/> and sets the default values.
        /// </summary>
        public WatchlistGetResponse_results()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse_results();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "ratingKey", n => { RatingKey = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "tmdbId", n => { TmdbId = n.GetDoubleValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("ratingKey", RatingKey);
            writer.WriteStringValue("title", Title);
            writer.WriteDoubleValue("tmdbId", TmdbId);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Watchlist
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\watchlist
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WatchlistRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/watchlist{?page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WatchlistRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/watchlist{?page*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieves a user&apos;s Plex Watchlist in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse?> GetAsWatchlistGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse> GetAsWatchlistGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a user&apos;s Plex Watchlist in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWatchlistGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieves a user&apos;s Plex Watchlist in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieves a user&apos;s Plex Watchlist in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WatchlistRequestBuilderGetQueryParameters 
        {
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WatchlistRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistRequestBuilder.WatchlistRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Watchlist
{
    [Obsolete("This class is obsolete. Use WatchlistGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WatchlistResponse : global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Watchlist.WatchlistResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Watch_data
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Watch_dataGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The playCount property</summary>
        public double? PlayCount { get; set; }
        /// <summary>The recentlyWatched property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>? RecentlyWatched { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo> RecentlyWatched { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse"/> and sets the default values.
        /// </summary>
        public Watch_dataGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "playCount", n => { PlayCount = n.GetDoubleValue(); } },
                { "recentlyWatched", n => { RecentlyWatched = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>(global::FluentFin.Plugins.Jellyseer.Models.MediaInfo.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("playCount", PlayCount);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MediaInfo>("recentlyWatched", RecentlyWatched);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Watch_data
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\watch_data
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Watch_dataRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Watch_dataRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/watch_data", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public Watch_dataRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/watch_data", rawUrl)
        {
        }
        /// <summary>
        /// Returns play count, play duration, and recently watched media.Requires the `ADMIN` permission to fetch results for other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse?> GetAsWatch_dataGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse> GetAsWatch_dataGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns play count, play duration, and recently watched media.Requires the `ADMIN` permission to fetch results for other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWatch_dataGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns play count, play duration, and recently watched media.Requires the `ADMIN` permission to fetch results for other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class Watch_dataRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Watch_data
{
    [Obsolete("This class is obsolete. Use Watch_dataGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Watch_dataResponse : global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Watch_data.Watch_dataResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MoviesGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse"/> and sets the default values.
        /// </summary>
        public MoviesGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\keyword\{keywordId}\movies
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MoviesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/keyword/{keywordId}/movies{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MoviesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/keyword/{keywordId}/movies{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns list of movies based on the provided keyword ID a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse?> GetAsMoviesGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse> GetAsMoviesGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of movies based on the provided keyword ID a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsMoviesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns list of movies based on the provided keyword ID a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns list of movies based on the provided keyword ID a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MoviesRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MoviesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesRequestBuilder.MoviesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies
{
    [Obsolete("This class is obsolete. Use MoviesGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MoviesResponse : global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Keyword.Item.Movies.MoviesResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithGenreGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The genre property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.Genre? Genre { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.Genre Genre { get; set; }
#endif
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse"/> and sets the default values.
        /// </summary>
        public WithGenreGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "genre", n => { Genre = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Genre>(global::FluentFin.Plugins.Jellyseer.Models.Genre.CreateFromDiscriminatorValue); } },
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Genre>("genre", Genre);
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies\genre\{genreId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithGenreItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGenreItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/genre/{genreId}{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGenreItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/genre/{genreId}{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of movies based on the provided genre ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse?> GetAsWithGenreGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse> GetAsWithGenreGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies based on the provided genre ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithGenreGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies based on the provided genre ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of movies based on the provided genre ID in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGenreItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGenreItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item
{
    [Obsolete("This class is obsolete. Use WithGenreGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithGenreResponse : global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Genre.Item.WithGenreResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithLanguageGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage? Language { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage Language { get; set; }
#endif
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse"/> and sets the default values.
        /// </summary>
        public WithLanguageGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "language", n => { Language = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>(global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage.CreateFromDiscriminatorValue); } },
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>("language", Language);
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies\language\{language}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithLanguageItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLanguageItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/language/{language}{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLanguageItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/language/{language}{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse?> GetAsWithLanguageGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse> GetAsWithLanguageGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithLanguageGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of movies based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLanguageItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLanguageItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item
{
    [Obsolete("This class is obsolete. Use WithLanguageGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithLanguageResponse : global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Language.Item.WithLanguageResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithStudioGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.MovieResult> Results { get; set; }
#endif
        /// <summary>The studio property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany? Studio { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany Studio { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse"/> and sets the default values.
        /// </summary>
        public WithStudioGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>(global::FluentFin.Plugins.Jellyseer.Models.MovieResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "studio", n => { Studio = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>(global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany.CreateFromDiscriminatorValue); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.MovieResult>("results", Results);
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.ProductionCompany>("studio", Studio);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\movies\studio\{studioId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithStudioItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStudioItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/studio/{studioId}{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithStudioItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/movies/studio/{studioId}{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of movies based on the provided studio ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse?> GetAsWithStudioGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder.WithStudioItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse> GetAsWithStudioGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder.WithStudioItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies based on the provided studio ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithStudioGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder.WithStudioItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder.WithStudioItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of movies based on the provided studio ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder.WithStudioItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder.WithStudioItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of movies based on the provided studio ID in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithStudioItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithStudioItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioItemRequestBuilder.WithStudioItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item
{
    [Obsolete("This class is obsolete. Use WithStudioGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithStudioResponse : global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Movies.Studio.Item.WithStudioResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithGenreGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The genre property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.Genre? Genre { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.Genre Genre { get; set; }
#endif
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse"/> and sets the default values.
        /// </summary>
        public WithGenreGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "genre", n => { Genre = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Genre>(global::FluentFin.Plugins.Jellyseer.Models.Genre.CreateFromDiscriminatorValue); } },
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(global::FluentFin.Plugins.Jellyseer.Models.TvResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Genre>("genre", Genre);
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv\genre\{genreId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithGenreItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGenreItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/genre/{genreId}{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithGenreItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/genre/{genreId}{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided genre ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse?> GetAsWithGenreGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse> GetAsWithGenreGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided genre ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithGenreGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided genre ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided genre ID in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGenreItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithGenreItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreItemRequestBuilder.WithGenreItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item
{
    [Obsolete("This class is obsolete. Use WithGenreGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithGenreResponse : global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Genre.Item.WithGenreResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithLanguageGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The language property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage? Language { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage Language { get; set; }
#endif
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse"/> and sets the default values.
        /// </summary>
        public WithLanguageGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "language", n => { Language = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>(global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage.CreateFromDiscriminatorValue); } },
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(global::FluentFin.Plugins.Jellyseer.Models.TvResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.SpokenLanguage>("language", Language);
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv\language\{language}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithLanguageItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLanguageItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/language/{language}{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithLanguageItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/language/{language}{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse?> GetAsWithLanguageGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse> GetAsWithLanguageGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithLanguageGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided ISO 639-1 language code in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLanguageItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithLanguageItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageItemRequestBuilder.WithLanguageItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item
{
    [Obsolete("This class is obsolete. Use WithLanguageGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithLanguageResponse : global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Language.Item.WithLanguageResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithNetworkGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The network property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::FluentFin.Plugins.Jellyseer.Models.Network? Network { get; set; }
#nullable restore
#else
        public global::FluentFin.Plugins.Jellyseer.Models.Network Network { get; set; }
#endif
        /// <summary>The page property</summary>
        public double? Page { get; set; }
        /// <summary>The results property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult>? Results { get; set; }
#nullable restore
#else
        public List<global::FluentFin.Plugins.Jellyseer.Models.TvResult> Results { get; set; }
#endif
        /// <summary>The totalPages property</summary>
        public double? TotalPages { get; set; }
        /// <summary>The totalResults property</summary>
        public double? TotalResults { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse"/> and sets the default values.
        /// </summary>
        public WithNetworkGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "network", n => { Network = n.GetObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Network>(global::FluentFin.Plugins.Jellyseer.Models.Network.CreateFromDiscriminatorValue); } },
                { "page", n => { Page = n.GetDoubleValue(); } },
                { "results", n => { Results = n.GetCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>(global::FluentFin.Plugins.Jellyseer.Models.TvResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalPages", n => { TotalPages = n.GetDoubleValue(); } },
                { "totalResults", n => { TotalResults = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::FluentFin.Plugins.Jellyseer.Models.Network>("network", Network);
            writer.WriteDoubleValue("page", Page);
            writer.WriteCollectionOfObjectValues<global::FluentFin.Plugins.Jellyseer.Models.TvResult>("results", Results);
            writer.WriteDoubleValue("totalPages", TotalPages);
            writer.WriteDoubleValue("totalResults", TotalResults);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \discover\tv\network\{networkId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithNetworkItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNetworkItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/network/{networkId}{?language*,page*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithNetworkItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/discover/tv/network/{networkId}{?language*,page*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided network ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse?> GetAsWithNetworkGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder.WithNetworkItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse> GetAsWithNetworkGetResponseAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder.WithNetworkItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided network ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithNetworkGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder.WithNetworkItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder.WithNetworkItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided network ID in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder.WithNetworkItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder.WithNetworkItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a list of TV shows based on the provided network ID in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithNetworkItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
            [QueryParameter("page")]
            public double? Page { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithNetworkItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkItemRequestBuilder.WithNetworkItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item
{
    [Obsolete("This class is obsolete. Use WithNetworkGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithNetworkResponse : global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Discover.Tv.Network.Item.WithNetworkResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \service\sonarr\lookup\{tmdbId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTmdbItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTmdbItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr/lookup/{tmdbId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTmdbItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/service/sonarr/lookup/{tmdbId}", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of series returned by searching for the name in Sonarr.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.SonarrSeries.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of series returned by searching for the name in Sonarr.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Service.Sonarr.Lookup.Item.WithTmdbItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTmdbItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\cache\{cacheId}\flush
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FlushRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush.FlushRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FlushRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/cache/{cacheId}/flush", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush.FlushRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FlushRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/cache/{cacheId}/flush", rawUrl)
        {
        }
        /// <summary>
        /// Flushes all data from the cache ID provided
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Flushes all data from the cache ID provided
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush.FlushRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush.FlushRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Cache.Item.Flush.FlushRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class FlushRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jobs\{jobId}\cancel
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CancelRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel.CancelRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CancelRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}/cancel", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel.CancelRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CancelRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}/cancel", rawUrl)
        {
        }
        /// <summary>
        /// Cancels a specific job. Will return the new job status in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Job"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Job?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Job> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Job>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Job.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Cancels a specific job. Will return the new job status in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel.CancelRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel.CancelRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Cancel.CancelRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CancelRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jobs\{jobId}\run
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class RunRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run.RunRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RunRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}/run", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run.RunRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RunRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}/run", rawUrl)
        {
        }
        /// <summary>
        /// Invokes a specific job to run. Will return the new job status in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Job"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Job?> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Job> PostAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Job>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Job.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Invokes a specific job to run. Will return the new job status in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run.RunRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run.RunRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Run.RunRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class RunRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SchedulePostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The schedule property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Schedule { get; set; }
#nullable restore
#else
        public string Schedule { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody"/> and sets the default values.
        /// </summary>
        public SchedulePostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "schedule", n => { Schedule = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("schedule", Schedule);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\jobs\{jobId}\schedule
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ScheduleRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.ScheduleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ScheduleRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}/schedule", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.ScheduleRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ScheduleRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/jobs/{jobId}/schedule", rawUrl)
        {
        }
        /// <summary>
        /// Re-registers the job with the schedule specified. Will return the job in JSON format.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Job"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Job?> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Job> PostAsync(global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Job>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Job.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Re-registers the job with the schedule specified. Will return the job in JSON format.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.SchedulePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.ScheduleRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.ScheduleRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Jobs.Item.Schedule.ScheduleRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ScheduleRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\discord\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/discord/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/discord/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the Discord agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the Discord agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.DiscordSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Discord.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\email\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/email/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/email/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the email agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the email agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NotificationEmailSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Email.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\gotify\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/gotify/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/gotify/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the Gotify agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the Gotify agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.GotifySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Gotify.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\lunasea\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/lunasea/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/lunasea/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the LunaSea agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the LunaSea agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.LunaSeaSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Lunasea.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\ntfy\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/ntfy/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/ntfy/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the ntfy.sh agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the ntfy.sh agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.NtfySettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Ntfy.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\pushbullet\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushbullet/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushbullet/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the Pushbullet agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the Pushbullet agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushbulletSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushbullet.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Sounds : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds"/> and sets the default values.
        /// </summary>
        public Sounds()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\pushover\sounds
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SoundsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SoundsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushover/sounds?token={token}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SoundsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushover/sounds?token={token}", rawUrl)
        {
        }
        /// <summary>
        /// Returns valid Pushover sound options in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds>?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder.SoundsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds>> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder.SoundsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds>(requestInfo, global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.Sounds.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns valid Pushover sound options in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder.SoundsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder.SoundsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns valid Pushover sound options in a JSON array.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SoundsRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("token")]
            public string? Token { get; set; }
#nullable restore
#else
            [QueryParameter("token")]
            public string Token { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SoundsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Sounds.SoundsRequestBuilder.SoundsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\pushover\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushover/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/pushover/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the Pushover agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the Pushover agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.PushoverSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Pushover.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\slack\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/slack/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/slack/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the Slack agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the Slack agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.SlackSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Slack.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\telegram\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/telegram/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/telegram/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the Telegram agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the Telegram agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.TelegramSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Telegram.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\webhook\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webhook/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webhook/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the webhook agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the webhook agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebhookSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webhook.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\notifications\webpush\test
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TestRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webpush/test", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test.TestRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TestRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/notifications/webpush/test", rawUrl)
        {
        }
        /// <summary>
        /// Sends a test notification to the Web Push agent.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Sends a test notification to the Web Push agent.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.WebPushSettings body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test.TestRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test.TestRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Notifications.Webpush.Test.TestRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TestRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\plex\devices\servers
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ServersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers.ServersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ServersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/devices/servers", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers.ServersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ServersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/plex/devices/servers", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of available Plex servers and their connectivity state
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.PlexDevice&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.PlexDevice>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.PlexDevice>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.PlexDevice>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.PlexDevice.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of available Plex servers and their connectivity state
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers.ServersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers.ServersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Plex.Devices.Servers.ServersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ServersRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles
{
    /// <summary>
    /// Builds and executes requests for operations under \settings\radarr\{radarrId}\profiles
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ProfilesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles.ProfilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProfilesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr/{radarrId}/profiles", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles.ProfilesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ProfilesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/settings/radarr/{radarrId}/profiles", rawUrl)
        {
        }
        /// <summary>
        /// Returns a list of profiles available on the Radarr server instance in a JSON array.
        /// </summary>
        /// <returns>A List&lt;global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.ServiceProfile.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Returns a list of profiles available on the Radarr server instance in a JSON array.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles.ProfilesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles.ProfilesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Settings.Radarr.Item.Profiles.ProfilesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ProfilesRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \tv\{tvId}\season\{seasonId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithSeasonItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSeasonItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/season/{seasonId}{?language*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithSeasonItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/tv/{tvId}/season/{seasonId}{?language*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns season details with a list of episodes in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.Season"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Season?> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder.WithSeasonItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.Season> GetAsync(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder.WithSeasonItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.Season>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.Season.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns season details with a list of episodes in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder.WithSeasonItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder.WithSeasonItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns season details with a list of episodes in a JSON object.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSeasonItemRequestBuilderGetQueryParameters 
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("language")]
            public string? Language { get; set; }
#nullable restore
#else
            [QueryParameter("language")]
            public string Language { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithSeasonItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::FluentFin.Plugins.Jellyseer.Tv.Item.Season.Item.WithSeasonItemRequestBuilder.WithSeasonItemRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithKeyGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The auth property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Auth { get; set; }
#nullable restore
#else
        public string Auth { get; set; }
#endif
        /// <summary>The endpoint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Endpoint { get; set; }
#nullable restore
#else
        public string Endpoint { get; set; }
#endif
        /// <summary>The p256dh property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? P256dh { get; set; }
#nullable restore
#else
        public string P256dh { get; set; }
#endif
        /// <summary>The userAgent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAgent { get; set; }
#nullable restore
#else
        public string UserAgent { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse"/> and sets the default values.
        /// </summary>
        public WithKeyGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "auth", n => { Auth = n.GetStringValue(); } },
                { "endpoint", n => { Endpoint = n.GetStringValue(); } },
                { "p256dh", n => { P256dh = n.GetStringValue(); } },
                { "userAgent", n => { UserAgent = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("auth", Auth);
            writer.WriteStringValue("endpoint", Endpoint);
            writer.WriteStringValue("p256dh", P256dh);
            writer.WriteStringValue("userAgent", UserAgent);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\pushSubscription\{key}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithKeyItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithKeyItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/pushSubscription/{key}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithKeyItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/pushSubscription/{key}", rawUrl)
        {
        }
        /// <summary>
        /// Deletes the user push subscription with the provided key.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns web push notification settings for a user in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse?> GetAsWithKeyGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse> GetAsWithKeyGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns web push notification settings for a user in a JSON object.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithKeyGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes the user push subscription with the provided key.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns web push notification settings for a user in a JSON object.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithKeyItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithKeyItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item
{
    [Obsolete("This class is obsolete. Use WithKeyGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class WithKeyResponse : global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.PushSubscription.Item.WithKeyResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings\linked-accounts
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LinkedAccountsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The jellyfin property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinRequestBuilder Jellyfin
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The plex property</summary>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexRequestBuilder Plex
        {
            get => new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.LinkedAccountsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LinkedAccountsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/linked-accounts", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.LinkedAccountsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public LinkedAccountsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/linked-accounts", rawUrl)
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Main
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MainGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse"/> and sets the default values.
        /// </summary>
        public MainGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Main
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MainPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody"/> and sets the default values.
        /// </summary>
        public MainPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Main
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MainPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse"/> and sets the default values.
        /// </summary>
        public MainPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Main
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings\main
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MainRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MainRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/main", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MainRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/main", rawUrl)
        {
        }
        /// <summary>
        /// Returns general settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse?> GetAsMainGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse> GetAsMainGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns general settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsMainGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates and returns general settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse?> PostAsMainPostResponseAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse> PostAsMainPostResponseAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates and returns general settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsMainPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns general settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates and returns general settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MainRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MainRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Main
{
    [Obsolete("This class is obsolete. Use MainGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class MainResponse : global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Main.MainResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings\notifications
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NotificationsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications.NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/notifications", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications.NotificationsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public NotificationsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/notifications", rawUrl)
        {
        }
        /// <summary>
        /// Returns notification settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates and returns notification settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications?> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications> PostAsync(global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications>(requestInfo, global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns notification settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates and returns notification settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.Models.UserSettingsNotifications body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications.NotificationsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications.NotificationsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Notifications.NotificationsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NotificationsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NotificationsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Password
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PasswordGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The hasPassword property</summary>
        public bool? HasPassword { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse"/> and sets the default values.
        /// </summary>
        public PasswordGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "hasPassword", n => { HasPassword = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("hasPassword", HasPassword);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Password
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PasswordPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The currentPassword property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrentPassword { get; set; }
#nullable restore
#else
        public string CurrentPassword { get; set; }
#endif
        /// <summary>The newPassword property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewPassword { get; set; }
#nullable restore
#else
        public string NewPassword { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody"/> and sets the default values.
        /// </summary>
        public PasswordPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "currentPassword", n => { CurrentPassword = n.GetStringValue(); } },
                { "newPassword", n => { NewPassword = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("currentPassword", CurrentPassword);
            writer.WriteStringValue("newPassword", NewPassword);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Password
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings\password
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PasswordRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PasswordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/password", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PasswordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/password", rawUrl)
        {
        }
        /// <summary>
        /// Returns important data for the password page to function correctly. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse?> GetAsPasswordGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse> GetAsPasswordGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns important data for the password page to function correctly. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsPasswordGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates a user&apos;s password. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns important data for the password page to function correctly. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates a user&apos;s password. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PasswordRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PasswordRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Password
{
    [Obsolete("This class is obsolete. Use PasswordGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PasswordResponse : global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Password.PasswordResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PermissionsGetResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The permissions property</summary>
        public double? Permissions { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse"/> and sets the default values.
        /// </summary>
        public PermissionsGetResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "permissions", n => { Permissions = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("permissions", Permissions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PermissionsPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The permissions property</summary>
        public double? Permissions { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody"/> and sets the default values.
        /// </summary>
        public PermissionsPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "permissions", n => { Permissions = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("permissions", Permissions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PermissionsPostResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The permissions property</summary>
        public double? Permissions { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse"/> and sets the default values.
        /// </summary>
        public PermissionsPostResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "permissions", n => { Permissions = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("permissions", Permissions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings\permissions
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PermissionsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PermissionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/permissions", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PermissionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/permissions", rawUrl)
        {
        }
        /// <summary>
        /// Returns permission settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse?> GetAsPermissionsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse> GetAsPermissionsGetResponseAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns permission settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsPermissionsGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates and returns permission settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse?> PostAsPermissionsPostResponseAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse> PostAsPermissionsPostResponseAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Updates and returns permission settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use PostAsPermissionsPostResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse?> PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse> PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse>(requestInfo, global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns permission settings for a specific user. Requires `MANAGE_USERS` permission if viewing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Updates and returns permission settings for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PermissionsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PermissionsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions
{
    [Obsolete("This class is obsolete. Use PermissionsGetResponse instead.")]
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PermissionsResponse : global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsGetResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.Permissions.PermissionsResponse();
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class JellyfinPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The password property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The username property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Username { get; set; }
#nullable restore
#else
        public string Username { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody"/> and sets the default values.
        /// </summary>
        public JellyfinPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "password", n => { Password = n.GetStringValue(); } },
                { "username", n => { Username = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("username", Username);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings\linked-accounts\jellyfin
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class JellyfinRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JellyfinRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/linked-accounts/jellyfin", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public JellyfinRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/linked-accounts/jellyfin", rawUrl)
        {
        }
        /// <summary>
        /// Removes the linked Jellyfin account for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Logs in to Jellyfin with the provided credentials, then links the associated Jellyfin account with the user&apos;s account. Users can only link external accounts to their own account.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes the linked Jellyfin account for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Logs in to Jellyfin with the provided credentials, then links the associated Jellyfin account with the user&apos;s account. Users can only link external accounts to their own account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Jellyfin.JellyfinRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class JellyfinRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class JellyfinRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlexPostRequestBody : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The authToken property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthToken { get; set; }
#nullable restore
#else
        public string AuthToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody"/> and sets the default values.
        /// </summary>
        public PlexPostRequestBody()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "authToken", n => { AuthToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("authToken", AuthToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618

// <auto-generated/>
#pragma warning disable CS0618
namespace FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex
{
    /// <summary>
    /// Builds and executes requests for operations under \user\{userId}\settings\linked-accounts\plex
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PlexRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlexRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/linked-accounts/plex", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public PlexRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/user/{userId}/settings/linked-accounts/plex", rawUrl)
        {
        }
        /// <summary>
        /// Removes the linked Plex account for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Logs in to Plex with the provided auth token, then links the associated Plex account with the user&apos;s account. Users can only link external accounts to their own account.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Removes the linked Plex account for a specific user. Requires `MANAGE_USERS` permission if editing other users.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Logs in to Plex with the provided auth token, then links the associated Plex account with the user&apos;s account. Users can only link external accounts to their own account.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexRequestBuilder WithUrl(string rawUrl)
        {
            return new global::FluentFin.Plugins.Jellyseer.User.Item.Settings.LinkedAccounts.Plex.PlexRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PlexRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class PlexRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618

